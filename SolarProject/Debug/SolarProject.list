
SolarProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcb4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  0800be44  0800be44  0001be44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c150  0800c150  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800c150  0800c150  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c150  0800c150  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c150  0800c150  0001c150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c154  0800c154  0001c154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800c158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020d8  20000078  0800c1d0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002150  0800c1d0  00022150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c74d  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000048e4  00000000  00000000  0003c838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001770  00000000  00000000  00041120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001208  00000000  00000000  00042890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020979  00000000  00000000  00043a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f106  00000000  00000000  00064411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b7e7a  00000000  00000000  00083517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006be0  00000000  00000000  0013b394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00141f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800be2c 	.word	0x0800be2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800be2c 	.word	0x0800be2c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <MotorServiceMotorInit>:
volatile MotorState_t* horizontalMotorHandle = &horizontalMotor;
volatile MotorState_t* verticalMotorHandle = &verticalMotor;
volatile ModeState_t* modeStateHandle = &modeState;

void MotorServiceMotorInit(MotorState_t* HorizontalMotor, MotorState_t* VerticalMotor, ModeState_t* ModeState)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
	/* HORIZONTAL MOTOR INIT */
	HorizontalMotor->ORIENTATION = HORIZONTAL;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2201      	movs	r2, #1
 8000abc:	701a      	strb	r2, [r3, #0]
	HorizontalMotor->DIR = TOP;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	705a      	strb	r2, [r3, #1]
	HorizontalMotor->RESET = true;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	709a      	strb	r2, [r3, #2]
	HorizontalMotor->STOP = true;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	2201      	movs	r2, #1
 8000ace:	70da      	strb	r2, [r3, #3]
	HorizontalMotor->CURRENTPOSITION = 1000;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	4a10      	ldr	r2, [pc, #64]	; (8000b14 <MotorServiceMotorInit+0x68>)
 8000ad4:	605a      	str	r2, [r3, #4]

	/*VERTICAL MOTOR INIT*/
	VerticalMotor->ORIENTATION = VERTICAL;
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
	VerticalMotor->DIR = LEFT;
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	2201      	movs	r2, #1
 8000ae0:	705a      	strb	r2, [r3, #1]
	VerticalMotor->RESET = true;
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	709a      	strb	r2, [r3, #2]
	VerticalMotor->STOP = true;
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	2201      	movs	r2, #1
 8000aec:	70da      	strb	r2, [r3, #3]
	VerticalMotor->CURRENTPOSITION = 1000;
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	4a08      	ldr	r2, [pc, #32]	; (8000b14 <MotorServiceMotorInit+0x68>)
 8000af2:	605a      	str	r2, [r3, #4]

	/*CONTROL MODE INIT*/
	ModeState->HORIZONTALSETPOSITION = 0;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2200      	movs	r2, #0
 8000af8:	705a      	strb	r2, [r3, #1]
	ModeState->VERTICALSETPOSITION = 0;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]
	ModeState->MODE = AUTO;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2200      	movs	r2, #0
 8000b04:	709a      	strb	r2, [r3, #2]
}
 8000b06:	bf00      	nop
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	447a0000 	.word	0x447a0000

08000b18 <MotorServiceMotorHoming>:

void MotorServiceMotorHoming(MotorState_t* motor, uint8_t* limiter)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
	uint8_t limit1 = limiter[0];
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	73fb      	strb	r3, [r7, #15]
	uint8_t limit2 = limiter[2];
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	789b      	ldrb	r3, [r3, #2]
 8000b2c:	73bb      	strb	r3, [r7, #14]


	if(motor->ORIENTATION == VERTICAL)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d114      	bne.n	8000b60 <MotorServiceMotorHoming+0x48>
	{
		if(limiter[2] == GPIO_PIN_RESET)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	3302      	adds	r3, #2
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d106      	bne.n	8000b4e <MotorServiceMotorHoming+0x36>
		{
			motor->RESET = true;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2201      	movs	r2, #1
 8000b44:	709a      	strb	r2, [r3, #2]
			motor->STOP = true;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2201      	movs	r2, #1
 8000b4a:	70da      	strb	r2, [r3, #3]
 8000b4c:	e008      	b.n	8000b60 <MotorServiceMotorHoming+0x48>
		}
		else
		{
			motor->DIR = LEFT;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2201      	movs	r2, #1
 8000b52:	705a      	strb	r2, [r3, #1]
			motor->RESET = false;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2200      	movs	r2, #0
 8000b58:	709a      	strb	r2, [r3, #2]
			motor->STOP = false;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	70da      	strb	r2, [r3, #3]
		}
	}

	if(motor->ORIENTATION == HORIZONTAL)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d113      	bne.n	8000b90 <MotorServiceMotorHoming+0x78>
	{
		if(limiter[0] == GPIO_PIN_RESET)
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d106      	bne.n	8000b7e <MotorServiceMotorHoming+0x66>
		{
			motor->RESET = true;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2201      	movs	r2, #1
 8000b74:	709a      	strb	r2, [r3, #2]
			motor->STOP = true;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2201      	movs	r2, #1
 8000b7a:	70da      	strb	r2, [r3, #3]
 8000b7c:	e008      	b.n	8000b90 <MotorServiceMotorHoming+0x78>
		}
		else
		{
			motor->DIR = BOTTOM;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2201      	movs	r2, #1
 8000b82:	705a      	strb	r2, [r3, #1]
			motor->RESET = false;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2200      	movs	r2, #0
 8000b88:	709a      	strb	r2, [r3, #2]
			motor->STOP = false;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	70da      	strb	r2, [r3, #3]
		}
	}

	MotorServiceMotorControl(motor);
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	f000 f815 	bl	8000bc0 <MotorServiceMotorControl>
}
 8000b96:	bf00      	nop
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <MotorServiceMotorStop>:

void MotorServiceMotorStop(MotorState_t* motor)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
	motor->STOP = true;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2201      	movs	r2, #1
 8000baa:	70da      	strb	r2, [r3, #3]
	motor->RESET = true;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2201      	movs	r2, #1
 8000bb0:	709a      	strb	r2, [r3, #2]
	MotorServiceMotorControl(motor);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f000 f804 	bl	8000bc0 <MotorServiceMotorControl>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <MotorServiceMotorControl>:

void MotorServiceMotorControl(MotorState_t* motor)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	if(motor->ORIENTATION == VERTICAL)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d11d      	bne.n	8000c0c <MotorServiceMotorControl+0x4c>
	{
		if(motor->STOP == true)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	78db      	ldrb	r3, [r3, #3]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d004      	beq.n	8000be2 <MotorServiceMotorControl+0x22>
		{
			HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4820      	ldr	r0, [pc, #128]	; (8000c5c <MotorServiceMotorControl+0x9c>)
 8000bdc:	f004 ffc2 	bl	8005b64 <HAL_TIM_PWM_Stop>
 8000be0:	e003      	b.n	8000bea <MotorServiceMotorControl+0x2a>
		}
		else
		{
			HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000be2:	2100      	movs	r1, #0
 8000be4:	481d      	ldr	r0, [pc, #116]	; (8000c5c <MotorServiceMotorControl+0x9c>)
 8000be6:	f004 fed7 	bl	8005998 <HAL_TIM_PWM_Start>
		}
		HAL_GPIO_WritePin(DIR_VERTICAL_GPIO_Port, DIR_VERTICAL_Pin, motor->DIR);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	785b      	ldrb	r3, [r3, #1]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	2102      	movs	r1, #2
 8000bf2:	481b      	ldr	r0, [pc, #108]	; (8000c60 <MotorServiceMotorControl+0xa0>)
 8000bf4:	f003 f970 	bl	8003ed8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RESET_VERTICAL_GPIO_Port, RESET_VERTICAL_Pin, !(motor->RESET));
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	789b      	ldrb	r3, [r3, #2]
 8000bfc:	f083 0301 	eor.w	r3, r3, #1
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	461a      	mov	r2, r3
 8000c04:	2120      	movs	r1, #32
 8000c06:	4816      	ldr	r0, [pc, #88]	; (8000c60 <MotorServiceMotorControl+0xa0>)
 8000c08:	f003 f966 	bl	8003ed8 <HAL_GPIO_WritePin>
	}

	if(motor->ORIENTATION == HORIZONTAL)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d11e      	bne.n	8000c52 <MotorServiceMotorControl+0x92>
	{
		if(motor->STOP == true)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	78db      	ldrb	r3, [r3, #3]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d004      	beq.n	8000c26 <MotorServiceMotorControl+0x66>
		{
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4811      	ldr	r0, [pc, #68]	; (8000c64 <MotorServiceMotorControl+0xa4>)
 8000c20:	f004 ffa0 	bl	8005b64 <HAL_TIM_PWM_Stop>
 8000c24:	e003      	b.n	8000c2e <MotorServiceMotorControl+0x6e>
		}
		else
		{
			HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000c26:	2100      	movs	r1, #0
 8000c28:	480e      	ldr	r0, [pc, #56]	; (8000c64 <MotorServiceMotorControl+0xa4>)
 8000c2a:	f004 feb5 	bl	8005998 <HAL_TIM_PWM_Start>
		}

		HAL_GPIO_WritePin(DIR_HORIZONTAL_GPIO_Port, DIR_HORIZONTAL_Pin, motor->DIR);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	785b      	ldrb	r3, [r3, #1]
 8000c32:	461a      	mov	r2, r3
 8000c34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c38:	4809      	ldr	r0, [pc, #36]	; (8000c60 <MotorServiceMotorControl+0xa0>)
 8000c3a:	f003 f94d 	bl	8003ed8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RESET_HORIZONTAL_GPIO_Port, RESET_HORIZONTAL_Pin, !(motor->RESET)); 	 // reset jest aktywowany stanem niskim, logika odwrotna
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	789b      	ldrb	r3, [r3, #2]
 8000c42:	f083 0301 	eor.w	r3, r3, #1
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	461a      	mov	r2, r3
 8000c4a:	2110      	movs	r1, #16
 8000c4c:	4804      	ldr	r0, [pc, #16]	; (8000c60 <MotorServiceMotorControl+0xa0>)
 8000c4e:	f003 f943 	bl	8003ed8 <HAL_GPIO_WritePin>
	}
}
 8000c52:	bf00      	nop
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2000051c 	.word	0x2000051c
 8000c60:	48000400 	.word	0x48000400
 8000c64:	20000484 	.word	0x20000484

08000c68 <MotorServiceAutoMode>:

void MotorServiceAutoMode(LDRresistance_t* resistance, uint8_t* limiter, MotorState_t* motor)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
	/* HORIZONTAL MOTOR SETTINGS IN AUTO MODE */
	if(motor->ORIENTATION == HORIZONTAL)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d16f      	bne.n	8000d5c <MotorServiceAutoMode+0xf4>
	{
		float horizontalResistanceDiff = resistance->LDRTOP - resistance->LDRBOTTOM;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	ed93 7a00 	vldr	s14, [r3]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c8c:	edc7 7a05 	vstr	s15, [r7, #20]

		if(horizontalResistanceDiff < DIFFUPPERBOUND && horizontalResistanceDiff > DIFFLOWERBOUND)
 8000c90:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c94:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000c98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca0:	d50f      	bpl.n	8000cc2 <MotorServiceAutoMode+0x5a>
 8000ca2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ca6:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8000caa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cb2:	dd06      	ble.n	8000cc2 <MotorServiceAutoMode+0x5a>
		{
			motor->STOP = true;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	70da      	strb	r2, [r3, #3]
			motor->RESET = true;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	709a      	strb	r2, [r3, #2]
 8000cc0:	e04c      	b.n	8000d5c <MotorServiceAutoMode+0xf4>
		}
		else
		{
			if(resistance->LDRBOTTOM > resistance->LDRTOP && limiter[1] == GPIO_PIN_SET && motor->CURRENTPOSITION < 90 )
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	ed93 7a01 	vldr	s14, [r3, #4]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	edd3 7a00 	vldr	s15, [r3]
 8000cce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd6:	dd18      	ble.n	8000d0a <MotorServiceAutoMode+0xa2>
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d113      	bne.n	8000d0a <MotorServiceAutoMode+0xa2>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ce8:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8000e48 <MotorServiceAutoMode+0x1e0>
 8000cec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cf4:	d509      	bpl.n	8000d0a <MotorServiceAutoMode+0xa2>
			{
				motor->DIR = TOP;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	705a      	strb	r2, [r3, #1]
				motor->RESET = false;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	709a      	strb	r2, [r3, #2]
				motor->STOP = false;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	70da      	strb	r2, [r3, #3]
 8000d08:	e028      	b.n	8000d5c <MotorServiceAutoMode+0xf4>
			}
			else if(resistance->LDRBOTTOM < resistance->LDRTOP && limiter[0] == GPIO_PIN_SET && motor->CURRENTPOSITION > 30 )
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	ed93 7a01 	vldr	s14, [r3, #4]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	edd3 7a00 	vldr	s15, [r3]
 8000d16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d1e:	d517      	bpl.n	8000d50 <MotorServiceAutoMode+0xe8>
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d113      	bne.n	8000d50 <MotorServiceAutoMode+0xe8>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d2e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000d32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d3a:	dd09      	ble.n	8000d50 <MotorServiceAutoMode+0xe8>
			{
				motor->DIR = BOTTOM;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2201      	movs	r2, #1
 8000d40:	705a      	strb	r2, [r3, #1]
				motor->RESET = false;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2200      	movs	r2, #0
 8000d46:	709a      	strb	r2, [r3, #2]
				motor->STOP = false;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	70da      	strb	r2, [r3, #3]
 8000d4e:	e005      	b.n	8000d5c <MotorServiceAutoMode+0xf4>
			}
			else
			{
				motor->STOP = true;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2201      	movs	r2, #1
 8000d54:	70da      	strb	r2, [r3, #3]
				motor->RESET = true;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2201      	movs	r2, #1
 8000d5a:	709a      	strb	r2, [r3, #2]
			}
		}
	}

	/* VERICAL MOTOR SETTINGS IN AUTO MODE */
	if(motor->ORIENTATION == VERTICAL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d169      	bne.n	8000e38 <MotorServiceAutoMode+0x1d0>
	{
		float verticalResistanceDiff = resistance->LDRLEFT - resistance->LDRRIGHT;
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	ed93 7a02 	vldr	s14, [r3, #8]
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d74:	edc7 7a04 	vstr	s15, [r7, #16]

		if(verticalResistanceDiff < DIFFUPPERBOUND && verticalResistanceDiff > DIFFLOWERBOUND)
 8000d78:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d7c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000d80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d88:	d50f      	bpl.n	8000daa <MotorServiceAutoMode+0x142>
 8000d8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8000d8e:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8000d92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d9a:	dd06      	ble.n	8000daa <MotorServiceAutoMode+0x142>
		{
			motor->STOP = true;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2201      	movs	r2, #1
 8000da0:	70da      	strb	r2, [r3, #3]
			motor->RESET = true;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2201      	movs	r2, #1
 8000da6:	709a      	strb	r2, [r3, #2]
 8000da8:	e046      	b.n	8000e38 <MotorServiceAutoMode+0x1d0>
		}
		else
		{
			if(resistance->LDRLEFT < resistance->LDRRIGHT && limiter[2] == GPIO_PIN_SET && motor->CURRENTPOSITION < 180)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	ed93 7a02 	vldr	s14, [r3, #8]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	edd3 7a03 	vldr	s15, [r3, #12]
 8000db6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dbe:	d518      	bpl.n	8000df2 <MotorServiceAutoMode+0x18a>
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d113      	bne.n	8000df2 <MotorServiceAutoMode+0x18a>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	edd3 7a01 	vldr	s15, [r3, #4]
 8000dd0:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000e4c <MotorServiceAutoMode+0x1e4>
 8000dd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ddc:	d509      	bpl.n	8000df2 <MotorServiceAutoMode+0x18a>
			{
				motor->DIR = LEFT;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2201      	movs	r2, #1
 8000de2:	705a      	strb	r2, [r3, #1]
				motor->RESET = false;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	709a      	strb	r2, [r3, #2]
				motor->STOP = false;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2200      	movs	r2, #0
 8000dee:	70da      	strb	r2, [r3, #3]
 8000df0:	e022      	b.n	8000e38 <MotorServiceAutoMode+0x1d0>
			}
			else if(resistance->LDRLEFT > resistance->LDRRIGHT && motor->CURRENTPOSITION > 0)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	ed93 7a02 	vldr	s14, [r3, #8]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	edd3 7a03 	vldr	s15, [r3, #12]
 8000dfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e06:	dd11      	ble.n	8000e2c <MotorServiceAutoMode+0x1c4>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e16:	dd09      	ble.n	8000e2c <MotorServiceAutoMode+0x1c4>
			{
				motor->DIR = RIGHT;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	705a      	strb	r2, [r3, #1]
				motor->RESET = false;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	709a      	strb	r2, [r3, #2]
				motor->STOP = false;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	70da      	strb	r2, [r3, #3]
 8000e2a:	e005      	b.n	8000e38 <MotorServiceAutoMode+0x1d0>
			}
			else
			{
				motor->STOP = true;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2201      	movs	r2, #1
 8000e30:	70da      	strb	r2, [r3, #3]
				motor->RESET = true;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2201      	movs	r2, #1
 8000e36:	709a      	strb	r2, [r3, #2]
			}
		}
	}

	MotorServiceMotorControl(motor);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff fec1 	bl	8000bc0 <MotorServiceMotorControl>
}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	42b40000 	.word	0x42b40000
 8000e4c:	43340000 	.word	0x43340000

08000e50 <MotorServiceManualMode>:

void MotorServiceManualMode(ModeState_t* mode, MotorState_t* motor)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
	if(motor->ORIENTATION == HORIZONTAL)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d15e      	bne.n	8000f20 <MotorServiceManualMode+0xd0>
	{
		if(motor->CURRENTPOSITION == mode->HORIZONTALSETPOSITION)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	ed93 7a01 	vldr	s14, [r3, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	785b      	ldrb	r3, [r3, #1]
 8000e6c:	ee07 3a90 	vmov	s15, r3
 8000e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e74:	eeb4 7a67 	vcmp.f32	s14, s15
 8000e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7c:	d106      	bne.n	8000e8c <MotorServiceManualMode+0x3c>
		{
			motor->STOP = true;
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	2201      	movs	r2, #1
 8000e82:	70da      	strb	r2, [r3, #3]
			motor->RESET = true;
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	2201      	movs	r2, #1
 8000e88:	709a      	strb	r2, [r3, #2]
 8000e8a:	e049      	b.n	8000f20 <MotorServiceManualMode+0xd0>
		}
		else
		{
			if((motor->CURRENTPOSITION < mode->HORIZONTALSETPOSITION) && motor->CURRENTPOSITION < 90 )
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	ed93 7a01 	vldr	s14, [r3, #4]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	785b      	ldrb	r3, [r3, #1]
 8000e96:	ee07 3a90 	vmov	s15, r3
 8000e9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea6:	d513      	bpl.n	8000ed0 <MotorServiceManualMode+0x80>
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	edd3 7a01 	vldr	s15, [r3, #4]
 8000eae:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8000ff0 <MotorServiceManualMode+0x1a0>
 8000eb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eba:	d509      	bpl.n	8000ed0 <MotorServiceManualMode+0x80>
			{
				motor->DIR = TOP;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	705a      	strb	r2, [r3, #1]
				motor->RESET = false;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	709a      	strb	r2, [r3, #2]
				motor->STOP = false;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	70da      	strb	r2, [r3, #3]
 8000ece:	e027      	b.n	8000f20 <MotorServiceManualMode+0xd0>
			}
			else if((motor->CURRENTPOSITION > mode->HORIZONTALSETPOSITION) && motor->CURRENTPOSITION > 30)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	ed93 7a01 	vldr	s14, [r3, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	785b      	ldrb	r3, [r3, #1]
 8000eda:	ee07 3a90 	vmov	s15, r3
 8000ede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ee2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eea:	dd13      	ble.n	8000f14 <MotorServiceManualMode+0xc4>
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ef2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000ef6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000efe:	dd09      	ble.n	8000f14 <MotorServiceManualMode+0xc4>
			{
				motor->DIR = BOTTOM;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	2201      	movs	r2, #1
 8000f04:	705a      	strb	r2, [r3, #1]
				motor->RESET = false;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	709a      	strb	r2, [r3, #2]
				motor->STOP = false;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	70da      	strb	r2, [r3, #3]
 8000f12:	e005      	b.n	8000f20 <MotorServiceManualMode+0xd0>
			}
			else
			{
				motor->STOP = true;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	2201      	movs	r2, #1
 8000f18:	70da      	strb	r2, [r3, #3]
				motor->RESET = true;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	709a      	strb	r2, [r3, #2]
			}
		}
	}

	if(motor->ORIENTATION == VERTICAL)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d15c      	bne.n	8000fe2 <MotorServiceManualMode+0x192>
	{
		if(motor->CURRENTPOSITION == mode->VERTICALSETPOSITION)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	ee07 3a90 	vmov	s15, r3
 8000f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f3a:	eeb4 7a67 	vcmp.f32	s14, s15
 8000f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f42:	d106      	bne.n	8000f52 <MotorServiceManualMode+0x102>
		{
			motor->STOP = true;
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	2201      	movs	r2, #1
 8000f48:	70da      	strb	r2, [r3, #3]
			motor->RESET = true;
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	709a      	strb	r2, [r3, #2]
 8000f50:	e047      	b.n	8000fe2 <MotorServiceManualMode+0x192>
		}
		else
		{
			if( (motor->CURRENTPOSITION < mode->VERTICALSETPOSITION) && motor->CURRENTPOSITION < 180 )
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	ee07 3a90 	vmov	s15, r3
 8000f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f6c:	d513      	bpl.n	8000f96 <MotorServiceManualMode+0x146>
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f74:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8000ff4 <MotorServiceManualMode+0x1a4>
 8000f78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f80:	d509      	bpl.n	8000f96 <MotorServiceManualMode+0x146>
			{
				motor->DIR = LEFT;
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	2201      	movs	r2, #1
 8000f86:	705a      	strb	r2, [r3, #1]
				motor->RESET = false;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	709a      	strb	r2, [r3, #2]
				motor->STOP = false;
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	2200      	movs	r2, #0
 8000f92:	70da      	strb	r2, [r3, #3]
 8000f94:	e025      	b.n	8000fe2 <MotorServiceManualMode+0x192>
			}
			else if(motor->CURRENTPOSITION > mode->VERTICALSETPOSITION && motor->CURRENTPOSITION > 0)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	ee07 3a90 	vmov	s15, r3
 8000fa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fa8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb0:	dd11      	ble.n	8000fd6 <MotorServiceManualMode+0x186>
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc0:	dd09      	ble.n	8000fd6 <MotorServiceManualMode+0x186>
			{
				motor->DIR = RIGHT;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	705a      	strb	r2, [r3, #1]
				motor->RESET = false;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	709a      	strb	r2, [r3, #2]
				motor->STOP = false;
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	70da      	strb	r2, [r3, #3]
 8000fd4:	e005      	b.n	8000fe2 <MotorServiceManualMode+0x192>
			}
			else
			{
				motor->STOP = true;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	70da      	strb	r2, [r3, #3]
				motor->RESET = true;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	709a      	strb	r2, [r3, #2]
			}
		}
	}

	MotorServiceMotorControl(motor);
 8000fe2:	6838      	ldr	r0, [r7, #0]
 8000fe4:	f7ff fdec 	bl	8000bc0 <MotorServiceMotorControl>
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	42b40000 	.word	0x42b40000
 8000ff4:	43340000 	.word	0x43340000

08000ff8 <MotorServiceVerticalCurrentPosition>:

void MotorServiceVerticalCurrentPosition(MotorState_t* motor)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	if (motor->DIR == LEFT )
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	785b      	ldrb	r3, [r3, #1]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d10a      	bne.n	800101e <MotorServiceVerticalCurrentPosition+0x26>
	{
		motor->CURRENTPOSITION++;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	edd3 7a01 	vldr	s15, [r3, #4]
 800100e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001012:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	else
	{
		motor->CURRENTPOSITION --;
	}
}
 800101c:	e009      	b.n	8001032 <MotorServiceVerticalCurrentPosition+0x3a>
		motor->CURRENTPOSITION --;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	edd3 7a01 	vldr	s15, [r3, #4]
 8001024:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001028:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <MotorServiceHorizontalCurrentPosition>:

void MotorServiceHorizontalCurrentPosition(MotorState_t* motor)
{
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
	if (motor->DIR == TOP )
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	785b      	ldrb	r3, [r3, #1]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d10a      	bne.n	8001064 <MotorServiceHorizontalCurrentPosition+0x26>
	{
		motor->CURRENTPOSITION += 1;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	edd3 7a01 	vldr	s15, [r3, #4]
 8001054:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001058:	ee77 7a87 	vadd.f32	s15, s15, s14
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	else
	{
		motor->CURRENTPOSITION -= 1;
	}
}
 8001062:	e009      	b.n	8001078 <MotorServiceHorizontalCurrentPosition+0x3a>
		motor->CURRENTPOSITION -= 1;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	edd3 7a01 	vldr	s15, [r3, #4]
 800106a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800106e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	0000      	movs	r0, r0
	...

08001088 <SensorServiceADC2Resistance>:

volatile uint8_t limitSwitch[3];
volatile uint16_t measurement[4];

void SensorServiceADC2Resistance(uint16_t* measurement, LDRresistance_t* LDRResistance)
{
 8001088:	b5b0      	push	{r4, r5, r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
	float ldrResistance[4];

	for (uint8_t i = 0; i < 4; i++)
 8001092:	2300      	movs	r3, #0
 8001094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001098:	e040      	b.n	800111c <SensorServiceADC2Resistance+0x94>
	{
		uint16_t meas = *(measurement + i);
 800109a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	4413      	add	r3, r2
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	84bb      	strh	r3, [r7, #36]	; 0x24
		float ldrvoltage = SensorServiceADC2Voltage(meas);
 80010a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 f854 	bl	8001158 <SensorServiceADC2Voltage>
 80010b0:	ed87 0a08 	vstr	s0, [r7, #32]
		float current = ldrvoltage/LDRRESISTOR;
 80010b4:	ed97 7a08 	vldr	s14, [r7, #32]
 80010b8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001150 <SensorServiceADC2Resistance+0xc8>
 80010bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010c0:	edc7 7a07 	vstr	s15, [r7, #28]
		float photoresistorResistance = (3.3 - ldrvoltage)/current;
 80010c4:	6a38      	ldr	r0, [r7, #32]
 80010c6:	f7ff fa37 	bl	8000538 <__aeabi_f2d>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	a11e      	add	r1, pc, #120	; (adr r1, 8001148 <SensorServiceADC2Resistance+0xc0>)
 80010d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010d4:	f7ff f8d0 	bl	8000278 <__aeabi_dsub>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4614      	mov	r4, r2
 80010de:	461d      	mov	r5, r3
 80010e0:	69f8      	ldr	r0, [r7, #28]
 80010e2:	f7ff fa29 	bl	8000538 <__aeabi_f2d>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4620      	mov	r0, r4
 80010ec:	4629      	mov	r1, r5
 80010ee:	f7ff fba5 	bl	800083c <__aeabi_ddiv>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	f7ff fc87 	bl	8000a0c <__aeabi_d2f>
 80010fe:	4603      	mov	r3, r0
 8001100:	61bb      	str	r3, [r7, #24]
		ldrResistance[i] = photoresistorResistance;
 8001102:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	3328      	adds	r3, #40	; 0x28
 800110a:	443b      	add	r3, r7
 800110c:	3b20      	subs	r3, #32
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++)
 8001112:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001116:	3301      	adds	r3, #1
 8001118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800111c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001120:	2b03      	cmp	r3, #3
 8001122:	d9ba      	bls.n	800109a <SensorServiceADC2Resistance+0x12>
	}

	LDRResistance->LDRTOP = ldrResistance[0];
 8001124:	68ba      	ldr	r2, [r7, #8]
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	601a      	str	r2, [r3, #0]
	LDRResistance->LDRBOTTOM = ldrResistance[1];
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	605a      	str	r2, [r3, #4]
	LDRResistance->LDRLEFT = ldrResistance[2];
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	609a      	str	r2, [r3, #8]
	LDRResistance->LDRRIGHT = ldrResistance[3];
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	60da      	str	r2, [r3, #12]
}
 800113c:	bf00      	nop
 800113e:	3728      	adds	r7, #40	; 0x28
 8001140:	46bd      	mov	sp, r7
 8001142:	bdb0      	pop	{r4, r5, r7, pc}
 8001144:	f3af 8000 	nop.w
 8001148:	66666666 	.word	0x66666666
 800114c:	400a6666 	.word	0x400a6666
 8001150:	44fa0000 	.word	0x44fa0000
 8001154:	00000000 	.word	0x00000000

08001158 <SensorServiceADC2Voltage>:

float SensorServiceADC2Voltage(uint16_t measurement)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	80fb      	strh	r3, [r7, #6]
	return 3.3 * (float) measurement / (float) 4095;
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800116c:	ee17 0a90 	vmov	r0, s15
 8001170:	f7ff f9e2 	bl	8000538 <__aeabi_f2d>
 8001174:	a30e      	add	r3, pc, #56	; (adr r3, 80011b0 <SensorServiceADC2Voltage+0x58>)
 8001176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117a:	f7ff fa35 	bl	80005e8 <__aeabi_dmul>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	a30c      	add	r3, pc, #48	; (adr r3, 80011b8 <SensorServiceADC2Voltage+0x60>)
 8001188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118c:	f7ff fb56 	bl	800083c <__aeabi_ddiv>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4610      	mov	r0, r2
 8001196:	4619      	mov	r1, r3
 8001198:	f7ff fc38 	bl	8000a0c <__aeabi_d2f>
 800119c:	4603      	mov	r3, r0
 800119e:	ee07 3a90 	vmov	s15, r3
}
 80011a2:	eeb0 0a67 	vmov.f32	s0, s15
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	f3af 8000 	nop.w
 80011b0:	66666666 	.word	0x66666666
 80011b4:	400a6666 	.word	0x400a6666
 80011b8:	00000000 	.word	0x00000000
 80011bc:	40affe00 	.word	0x40affe00

080011c0 <SensorServiceReadLimiter>:

void SensorServiceReadLimiter(uint8_t* limiter)
{
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	limiter[0] = HAL_GPIO_ReadPin(LIMIT_HORIZONTAL_30DEG_GPIO_Port, LIMIT_HORIZONTAL_30DEG_Pin);
 80011c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <SensorServiceReadLimiter+0x44>)
 80011ce:	f002 fe6b 	bl	8003ea8 <HAL_GPIO_ReadPin>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	701a      	strb	r2, [r3, #0]
	limiter[1] = HAL_GPIO_ReadPin(LIMIT_HORIZONTAL_90DEG_GPIO_Port, LIMIT_HORIZONTAL_90DEG_Pin);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	1c5c      	adds	r4, r3, #1
 80011de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011e2:	4808      	ldr	r0, [pc, #32]	; (8001204 <SensorServiceReadLimiter+0x44>)
 80011e4:	f002 fe60 	bl	8003ea8 <HAL_GPIO_ReadPin>
 80011e8:	4603      	mov	r3, r0
 80011ea:	7023      	strb	r3, [r4, #0]
	limiter[2] = HAL_GPIO_ReadPin(LIMIT_VERTICAL_GPIO_Port, LIMIT_VERTICAL_Pin);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	1c9c      	adds	r4, r3, #2
 80011f0:	2180      	movs	r1, #128	; 0x80
 80011f2:	4804      	ldr	r0, [pc, #16]	; (8001204 <SensorServiceReadLimiter+0x44>)
 80011f4:	f002 fe58 	bl	8003ea8 <HAL_GPIO_ReadPin>
 80011f8:	4603      	mov	r3, r0
 80011fa:	7023      	strb	r3, [r4, #0]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	bd90      	pop	{r4, r7, pc}
 8001204:	48000800 	.word	0x48000800

08001208 <uartServiceManualModePositionSettings>:
volatile uint8_t RxBuffor[9];
volatile uint8_t TxBuffor[20];
volatile uint16_t TxSize;

void uartServiceManualModePositionSettings(ModeState_t* mode, uint8_t* rxBuffor)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
	char *token = strtok((char*) RxBuffor, ",");
 8001212:	491d      	ldr	r1, [pc, #116]	; (8001288 <uartServiceManualModePositionSettings+0x80>)
 8001214:	481d      	ldr	r0, [pc, #116]	; (800128c <uartServiceManualModePositionSettings+0x84>)
 8001216:	f009 fd5b 	bl	800acd0 <strtok>
 800121a:	60f8      	str	r0, [r7, #12]
	uint8_t config_values[3];

	uint8_t index = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	72fb      	strb	r3, [r7, #11]
	config_values[index] = atoi(token);
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f009 fb83 	bl	800a92c <atoi>
 8001226:	4602      	mov	r2, r0
 8001228:	7afb      	ldrb	r3, [r7, #11]
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	3310      	adds	r3, #16
 800122e:	443b      	add	r3, r7
 8001230:	f803 2c08 	strb.w	r2, [r3, #-8]

	  while (token != NULL && index <= 2)
 8001234:	e014      	b.n	8001260 <uartServiceManualModePositionSettings+0x58>
	  {
	        // Get the next token
	        token = strtok(NULL, ",");
 8001236:	4914      	ldr	r1, [pc, #80]	; (8001288 <uartServiceManualModePositionSettings+0x80>)
 8001238:	2000      	movs	r0, #0
 800123a:	f009 fd49 	bl	800acd0 <strtok>
 800123e:	60f8      	str	r0, [r7, #12]
	        if(index < 2)
 8001240:	7afb      	ldrb	r3, [r7, #11]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d80c      	bhi.n	8001260 <uartServiceManualModePositionSettings+0x58>
	        {
	        	index++;
 8001246:	7afb      	ldrb	r3, [r7, #11]
 8001248:	3301      	adds	r3, #1
 800124a:	72fb      	strb	r3, [r7, #11]
	        	config_values[index] = atoi(token);
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	f009 fb6d 	bl	800a92c <atoi>
 8001252:	4602      	mov	r2, r0
 8001254:	7afb      	ldrb	r3, [r7, #11]
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	3310      	adds	r3, #16
 800125a:	443b      	add	r3, r7
 800125c:	f803 2c08 	strb.w	r2, [r3, #-8]
	  while (token != NULL && index <= 2)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d002      	beq.n	800126c <uartServiceManualModePositionSettings+0x64>
 8001266:	7afb      	ldrb	r3, [r7, #11]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d9e4      	bls.n	8001236 <uartServiceManualModePositionSettings+0x2e>
	        }
	    }

	mode->HORIZONTALSETPOSITION = config_values[0];
 800126c:	7a3a      	ldrb	r2, [r7, #8]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	705a      	strb	r2, [r3, #1]
	mode->VERTICALSETPOSITION = config_values[1];
 8001272:	7a7a      	ldrb	r2, [r7, #9]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	701a      	strb	r2, [r3, #0]
	mode->MODE = config_values[2] ;
 8001278:	7aba      	ldrb	r2, [r7, #10]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	709a      	strb	r2, [r3, #2]
}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	0800be44 	.word	0x0800be44
 800128c:	200000b4 	.word	0x200000b4

08001290 <uartServiceSendCurrentPosition>:


void uartServiceSendCurrentPosition(MotorState_t* HorizontalMotor, MotorState_t* VerticalMotor)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af02      	add	r7, sp, #8
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
	TxSize = sniprintf((char*) TxBuffor, sizeof(TxBuffor), "%d,%d\n", (uint16_t) (HorizontalMotor->CURRENTPOSITION * 10), (uint16_t) (VerticalMotor->CURRENTPOSITION * 10));
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	edd3 7a01 	vldr	s15, [r3, #4]
 80012a0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80012a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012ac:	ee17 3a90 	vmov	r3, s15
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	461a      	mov	r2, r3
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80012ba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80012be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012c6:	ee17 3a90 	vmov	r3, s15
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	4613      	mov	r3, r2
 80012d0:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <uartServiceSendCurrentPosition+0x6c>)
 80012d2:	2114      	movs	r1, #20
 80012d4:	480a      	ldr	r0, [pc, #40]	; (8001300 <uartServiceSendCurrentPosition+0x70>)
 80012d6:	f009 fc7b 	bl	800abd0 <sniprintf>
 80012da:	4603      	mov	r3, r0
 80012dc:	b29a      	uxth	r2, r3
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <uartServiceSendCurrentPosition+0x74>)
 80012e0:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart1, TxBuffor, TxSize);
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <uartServiceSendCurrentPosition+0x74>)
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	461a      	mov	r2, r3
 80012ea:	4905      	ldr	r1, [pc, #20]	; (8001300 <uartServiceSendCurrentPosition+0x70>)
 80012ec:	4806      	ldr	r0, [pc, #24]	; (8001308 <uartServiceSendCurrentPosition+0x78>)
 80012ee:	f005 fdcd 	bl	8006e8c <HAL_UART_Transmit_DMA>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	0800be48 	.word	0x0800be48
 8001300:	200000c0 	.word	0x200000c0
 8001304:	200000d4 	.word	0x200000d4
 8001308:	20000568 	.word	0x20000568

0800130c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001312:	463b      	mov	r3, r7
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
 8001320:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001322:	4b3e      	ldr	r3, [pc, #248]	; (800141c <MX_ADC1_Init+0x110>)
 8001324:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001328:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800132a:	4b3c      	ldr	r3, [pc, #240]	; (800141c <MX_ADC1_Init+0x110>)
 800132c:	2200      	movs	r2, #0
 800132e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001330:	4b3a      	ldr	r3, [pc, #232]	; (800141c <MX_ADC1_Init+0x110>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001336:	4b39      	ldr	r3, [pc, #228]	; (800141c <MX_ADC1_Init+0x110>)
 8001338:	2201      	movs	r2, #1
 800133a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800133c:	4b37      	ldr	r3, [pc, #220]	; (800141c <MX_ADC1_Init+0x110>)
 800133e:	2200      	movs	r2, #0
 8001340:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001342:	4b36      	ldr	r3, [pc, #216]	; (800141c <MX_ADC1_Init+0x110>)
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800134a:	4b34      	ldr	r3, [pc, #208]	; (800141c <MX_ADC1_Init+0x110>)
 800134c:	2200      	movs	r2, #0
 800134e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001350:	4b32      	ldr	r3, [pc, #200]	; (800141c <MX_ADC1_Init+0x110>)
 8001352:	2201      	movs	r2, #1
 8001354:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001356:	4b31      	ldr	r3, [pc, #196]	; (800141c <MX_ADC1_Init+0x110>)
 8001358:	2200      	movs	r2, #0
 800135a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800135c:	4b2f      	ldr	r3, [pc, #188]	; (800141c <MX_ADC1_Init+0x110>)
 800135e:	2204      	movs	r2, #4
 8001360:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001362:	4b2e      	ldr	r3, [pc, #184]	; (800141c <MX_ADC1_Init+0x110>)
 8001364:	2201      	movs	r2, #1
 8001366:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800136a:	4b2c      	ldr	r3, [pc, #176]	; (800141c <MX_ADC1_Init+0x110>)
 800136c:	2204      	movs	r2, #4
 800136e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001370:	4b2a      	ldr	r3, [pc, #168]	; (800141c <MX_ADC1_Init+0x110>)
 8001372:	2200      	movs	r2, #0
 8001374:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001376:	4b29      	ldr	r3, [pc, #164]	; (800141c <MX_ADC1_Init+0x110>)
 8001378:	2200      	movs	r2, #0
 800137a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800137c:	4827      	ldr	r0, [pc, #156]	; (800141c <MX_ADC1_Init+0x110>)
 800137e:	f001 fb27 	bl	80029d0 <HAL_ADC_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8001388:	f000 fc96 	bl	8001cb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800138c:	2306      	movs	r3, #6
 800138e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001390:	2301      	movs	r3, #1
 8001392:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8001398:	2306      	movs	r3, #6
 800139a:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800139c:	2300      	movs	r3, #0
 800139e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a4:	463b      	mov	r3, r7
 80013a6:	4619      	mov	r1, r3
 80013a8:	481c      	ldr	r0, [pc, #112]	; (800141c <MX_ADC1_Init+0x110>)
 80013aa:	f001 fd33 	bl	8002e14 <HAL_ADC_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80013b4:	f000 fc80 	bl	8001cb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80013b8:	2307      	movs	r3, #7
 80013ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013bc:	2302      	movs	r3, #2
 80013be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 80013c0:	2305      	movs	r3, #5
 80013c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c4:	463b      	mov	r3, r7
 80013c6:	4619      	mov	r1, r3
 80013c8:	4814      	ldr	r0, [pc, #80]	; (800141c <MX_ADC1_Init+0x110>)
 80013ca:	f001 fd23 	bl	8002e14 <HAL_ADC_ConfigChannel>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80013d4:	f000 fc70 	bl	8001cb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80013d8:	2308      	movs	r3, #8
 80013da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80013dc:	2303      	movs	r3, #3
 80013de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e4:	463b      	mov	r3, r7
 80013e6:	4619      	mov	r1, r3
 80013e8:	480c      	ldr	r0, [pc, #48]	; (800141c <MX_ADC1_Init+0x110>)
 80013ea:	f001 fd13 	bl	8002e14 <HAL_ADC_ConfigChannel>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80013f4:	f000 fc60 	bl	8001cb8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80013f8:	2309      	movs	r3, #9
 80013fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80013fc:	2304      	movs	r3, #4
 80013fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001400:	463b      	mov	r3, r7
 8001402:	4619      	mov	r1, r3
 8001404:	4805      	ldr	r0, [pc, #20]	; (800141c <MX_ADC1_Init+0x110>)
 8001406:	f001 fd05 	bl	8002e14 <HAL_ADC_ConfigChannel>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_ADC1_Init+0x108>
  {
    Error_Handler();
 8001410:	f000 fc52 	bl	8001cb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200000d8 	.word	0x200000d8

08001420 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	; 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001440:	d14b      	bne.n	80014da <HAL_ADC_MspInit+0xba>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001442:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <HAL_ADC_MspInit+0xc4>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	4a27      	ldr	r2, [pc, #156]	; (80014e4 <HAL_ADC_MspInit+0xc4>)
 8001448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144c:	6153      	str	r3, [r2, #20]
 800144e:	4b25      	ldr	r3, [pc, #148]	; (80014e4 <HAL_ADC_MspInit+0xc4>)
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800145a:	4b22      	ldr	r3, [pc, #136]	; (80014e4 <HAL_ADC_MspInit+0xc4>)
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	4a21      	ldr	r2, [pc, #132]	; (80014e4 <HAL_ADC_MspInit+0xc4>)
 8001460:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001464:	6153      	str	r3, [r2, #20]
 8001466:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <HAL_ADC_MspInit+0xc4>)
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    PC3     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = LDR_TOP_Pin|LDR_BOTTOM_Pin|LDR_LEFT_Pin|LDR_RIGHT_Pin;
 8001472:	230f      	movs	r3, #15
 8001474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001476:	2303      	movs	r3, #3
 8001478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4619      	mov	r1, r3
 8001484:	4818      	ldr	r0, [pc, #96]	; (80014e8 <HAL_ADC_MspInit+0xc8>)
 8001486:	f002 fb9d 	bl	8003bc4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800148a:	4b18      	ldr	r3, [pc, #96]	; (80014ec <HAL_ADC_MspInit+0xcc>)
 800148c:	4a18      	ldr	r2, [pc, #96]	; (80014f0 <HAL_ADC_MspInit+0xd0>)
 800148e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001490:	4b16      	ldr	r3, [pc, #88]	; (80014ec <HAL_ADC_MspInit+0xcc>)
 8001492:	2200      	movs	r2, #0
 8001494:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_ADC_MspInit+0xcc>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800149c:	4b13      	ldr	r3, [pc, #76]	; (80014ec <HAL_ADC_MspInit+0xcc>)
 800149e:	2280      	movs	r2, #128	; 0x80
 80014a0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014a2:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_ADC_MspInit+0xcc>)
 80014a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014a8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <HAL_ADC_MspInit+0xcc>)
 80014ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014b0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <HAL_ADC_MspInit+0xcc>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <HAL_ADC_MspInit+0xcc>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014be:	480b      	ldr	r0, [pc, #44]	; (80014ec <HAL_ADC_MspInit+0xcc>)
 80014c0:	f002 f96c 	bl	800379c <HAL_DMA_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 80014ca:	f000 fbf5 	bl	8001cb8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a06      	ldr	r2, [pc, #24]	; (80014ec <HAL_ADC_MspInit+0xcc>)
 80014d2:	639a      	str	r2, [r3, #56]	; 0x38
 80014d4:	4a05      	ldr	r2, [pc, #20]	; (80014ec <HAL_ADC_MspInit+0xcc>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80014da:	bf00      	nop
 80014dc:	3728      	adds	r7, #40	; 0x28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40021000 	.word	0x40021000
 80014e8:	48000800 	.word	0x48000800
 80014ec:	20000128 	.word	0x20000128
 80014f0:	40020008 	.word	0x40020008

080014f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014fa:	4b18      	ldr	r3, [pc, #96]	; (800155c <MX_DMA_Init+0x68>)
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	4a17      	ldr	r2, [pc, #92]	; (800155c <MX_DMA_Init+0x68>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6153      	str	r3, [r2, #20]
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <MX_DMA_Init+0x68>)
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001512:	2200      	movs	r2, #0
 8001514:	2105      	movs	r1, #5
 8001516:	200b      	movs	r0, #11
 8001518:	f002 f916 	bl	8003748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800151c:	200b      	movs	r0, #11
 800151e:	f002 f92f 	bl	8003780 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	2105      	movs	r1, #5
 8001526:	200e      	movs	r0, #14
 8001528:	f002 f90e 	bl	8003748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800152c:	200e      	movs	r0, #14
 800152e:	f002 f927 	bl	8003780 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2105      	movs	r1, #5
 8001536:	200f      	movs	r0, #15
 8001538:	f002 f906 	bl	8003748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800153c:	200f      	movs	r0, #15
 800153e:	f002 f91f 	bl	8003780 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2105      	movs	r1, #5
 8001546:	2010      	movs	r0, #16
 8001548:	f002 f8fe 	bl	8003748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800154c:	2010      	movs	r0, #16
 800154e:	f002 f917 	bl	8003780 <HAL_NVIC_EnableIRQ>

}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40021000 	.word	0x40021000

08001560 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4a07      	ldr	r2, [pc, #28]	; (800158c <vApplicationGetIdleTaskMemory+0x2c>)
 8001570:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	4a06      	ldr	r2, [pc, #24]	; (8001590 <vApplicationGetIdleTaskMemory+0x30>)
 8001576:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2280      	movs	r2, #128	; 0x80
 800157c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800157e:	bf00      	nop
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000190 	.word	0x20000190
 8001590:	200001e4 	.word	0x200001e4

08001594 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001594:	b5b0      	push	{r4, r5, r7, lr}
 8001596:	b0ae      	sub	sp, #184	; 0xb8
 8001598:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of MotorControlSemaphore */
  osSemaphoreDef(MotorControlSemaphore);
 800159a:	2300      	movs	r3, #0
 800159c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  MotorControlSemaphoreHandle = osSemaphoreCreate(osSemaphore(MotorControlSemaphore), 1);
 80015a6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80015aa:	2101      	movs	r1, #1
 80015ac:	4618      	mov	r0, r3
 80015ae:	f006 fe71 	bl	8008294 <osSemaphoreCreate>
 80015b2:	4603      	mov	r3, r0
 80015b4:	4a47      	ldr	r2, [pc, #284]	; (80016d4 <MX_FREERTOS_Init+0x140>)
 80015b6:	6013      	str	r3, [r2, #0]

  /* definition and creation of LimiterSemaphore */
  osSemaphoreDef(LimiterSemaphore);
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80015be:	2300      	movs	r3, #0
 80015c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  LimiterSemaphoreHandle = osSemaphoreCreate(osSemaphore(LimiterSemaphore), 1);
 80015c4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80015c8:	2101      	movs	r1, #1
 80015ca:	4618      	mov	r0, r3
 80015cc:	f006 fe62 	bl	8008294 <osSemaphoreCreate>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4a41      	ldr	r2, [pc, #260]	; (80016d8 <MX_FREERTOS_Init+0x144>)
 80015d4:	6013      	str	r3, [r2, #0]

  /* definition and creation of RxUARTSemaphore */
  osSemaphoreDef(RxUARTSemaphore);
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80015dc:	2300      	movs	r3, #0
 80015de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RxUARTSemaphoreHandle = osSemaphoreCreate(osSemaphore(RxUARTSemaphore), 1);
 80015e2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015e6:	2101      	movs	r1, #1
 80015e8:	4618      	mov	r0, r3
 80015ea:	f006 fe53 	bl	8008294 <osSemaphoreCreate>
 80015ee:	4603      	mov	r3, r0
 80015f0:	4a3a      	ldr	r2, [pc, #232]	; (80016dc <MX_FREERTOS_Init+0x148>)
 80015f2:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of LDRResistance */
  osMessageQDef(LDRResistance, 10, LDRresistance_t);
 80015f4:	4b3a      	ldr	r3, [pc, #232]	; (80016e0 <MX_FREERTOS_Init+0x14c>)
 80015f6:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80015fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  LDRResistanceHandle = osMessageCreate(osMessageQ(LDRResistance), NULL);
 8001600:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001604:	2100      	movs	r1, #0
 8001606:	4618      	mov	r0, r3
 8001608:	f006 fe76 	bl	80082f8 <osMessageCreate>
 800160c:	4603      	mov	r3, r0
 800160e:	4a35      	ldr	r2, [pc, #212]	; (80016e4 <MX_FREERTOS_Init+0x150>)
 8001610:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of RxUART */
  osThreadDef(RxUART, StartRxUART, osPriorityAboveNormal, 0, 256);
 8001612:	4b35      	ldr	r3, [pc, #212]	; (80016e8 <MX_FREERTOS_Init+0x154>)
 8001614:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001618:	461d      	mov	r5, r3
 800161a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800161c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800161e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001622:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RxUARTHandle = osThreadCreate(osThread(RxUART), NULL);
 8001626:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800162a:	2100      	movs	r1, #0
 800162c:	4618      	mov	r0, r3
 800162e:	f006 fdd1 	bl	80081d4 <osThreadCreate>
 8001632:	4603      	mov	r3, r0
 8001634:	4a2d      	ldr	r2, [pc, #180]	; (80016ec <MX_FREERTOS_Init+0x158>)
 8001636:	6013      	str	r3, [r2, #0]

  /* definition and creation of ADC2Resistance */
  osThreadDef(ADC2Resistance, StartADC2Resistance, osPriorityNormal, 0, 128);
 8001638:	4b2d      	ldr	r3, [pc, #180]	; (80016f0 <MX_FREERTOS_Init+0x15c>)
 800163a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800163e:	461d      	mov	r5, r3
 8001640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001644:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001648:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADC2ResistanceHandle = osThreadCreate(osThread(ADC2Resistance), NULL);
 800164c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f006 fdbe 	bl	80081d4 <osThreadCreate>
 8001658:	4603      	mov	r3, r0
 800165a:	4a26      	ldr	r2, [pc, #152]	; (80016f4 <MX_FREERTOS_Init+0x160>)
 800165c:	6013      	str	r3, [r2, #0]

  /* definition and creation of MotorControl */
  osThreadDef(MotorControl, StartMotorControl, osPriorityNormal, 0, 128);
 800165e:	4b26      	ldr	r3, [pc, #152]	; (80016f8 <MX_FREERTOS_Init+0x164>)
 8001660:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001664:	461d      	mov	r5, r3
 8001666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800166a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800166e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotorControlHandle = osThreadCreate(osThread(MotorControl), NULL);
 8001672:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f006 fdab 	bl	80081d4 <osThreadCreate>
 800167e:	4603      	mov	r3, r0
 8001680:	4a1e      	ldr	r2, [pc, #120]	; (80016fc <MX_FREERTOS_Init+0x168>)
 8001682:	6013      	str	r3, [r2, #0]

  /* definition and creation of LimiterHandling */
  osThreadDef(LimiterHandling, StartLimiterHandling, osPriorityAboveNormal, 0, 128);
 8001684:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <MX_FREERTOS_Init+0x16c>)
 8001686:	f107 0420 	add.w	r4, r7, #32
 800168a:	461d      	mov	r5, r3
 800168c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800168e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001690:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001694:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LimiterHandlingHandle = osThreadCreate(osThread(LimiterHandling), NULL);
 8001698:	f107 0320 	add.w	r3, r7, #32
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f006 fd98 	bl	80081d4 <osThreadCreate>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4a17      	ldr	r2, [pc, #92]	; (8001704 <MX_FREERTOS_Init+0x170>)
 80016a8:	6013      	str	r3, [r2, #0]

  /* definition and creation of TxUART */
  osThreadDef(TxUART, StartTask05, osPriorityNormal, 0, 128);
 80016aa:	4b17      	ldr	r3, [pc, #92]	; (8001708 <MX_FREERTOS_Init+0x174>)
 80016ac:	1d3c      	adds	r4, r7, #4
 80016ae:	461d      	mov	r5, r3
 80016b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TxUARTHandle = osThreadCreate(osThread(TxUART), NULL);
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	2100      	movs	r1, #0
 80016c0:	4618      	mov	r0, r3
 80016c2:	f006 fd87 	bl	80081d4 <osThreadCreate>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a10      	ldr	r2, [pc, #64]	; (800170c <MX_FREERTOS_Init+0x178>)
 80016ca:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80016cc:	bf00      	nop
 80016ce:	37b8      	adds	r7, #184	; 0xb8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bdb0      	pop	{r4, r5, r7, pc}
 80016d4:	20000184 	.word	0x20000184
 80016d8:	20000188 	.word	0x20000188
 80016dc:	2000018c 	.word	0x2000018c
 80016e0:	0800be50 	.word	0x0800be50
 80016e4:	20000180 	.word	0x20000180
 80016e8:	0800be68 	.word	0x0800be68
 80016ec:	2000016c 	.word	0x2000016c
 80016f0:	0800be94 	.word	0x0800be94
 80016f4:	20000170 	.word	0x20000170
 80016f8:	0800bec0 	.word	0x0800bec0
 80016fc:	20000174 	.word	0x20000174
 8001700:	0800beec 	.word	0x0800beec
 8001704:	20000178 	.word	0x20000178
 8001708:	0800bf10 	.word	0x0800bf10
 800170c:	2000017c 	.word	0x2000017c

08001710 <StartRxUART>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartRxUART */
void StartRxUART(void const * argument)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRxUART */
	xSemaphoreTake(RxUARTSemaphoreHandle, portMAX_DELAY );
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <StartRxUART+0x38>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f04f 31ff 	mov.w	r1, #4294967295
 8001720:	4618      	mov	r0, r3
 8001722:	f007 fa79 	bl	8008c18 <xQueueSemaphoreTake>
  /* Infinite loop */
  for(;;)
  {
	  if(xSemaphoreTake(RxUARTSemaphoreHandle, portMAX_DELAY ) == pdTRUE)
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <StartRxUART+0x38>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f04f 31ff 	mov.w	r1, #4294967295
 800172e:	4618      	mov	r0, r3
 8001730:	f007 fa72 	bl	8008c18 <xQueueSemaphoreTake>
 8001734:	4603      	mov	r3, r0
 8001736:	2b01      	cmp	r3, #1
 8001738:	d1f5      	bne.n	8001726 <StartRxUART+0x16>
	  {
		  uartServiceManualModePositionSettings(modeStateHandle, RxBuffor);
 800173a:	4b04      	ldr	r3, [pc, #16]	; (800174c <StartRxUART+0x3c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4904      	ldr	r1, [pc, #16]	; (8001750 <StartRxUART+0x40>)
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fd61 	bl	8001208 <uartServiceManualModePositionSettings>
	  if(xSemaphoreTake(RxUARTSemaphoreHandle, portMAX_DELAY ) == pdTRUE)
 8001746:	e7ee      	b.n	8001726 <StartRxUART+0x16>
 8001748:	2000018c 	.word	0x2000018c
 800174c:	20000008 	.word	0x20000008
 8001750:	200000b4 	.word	0x200000b4

08001754 <StartADC2Resistance>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartADC2Resistance */
void StartADC2Resistance(void const * argument)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartADC2Resistance */
  /* Infinite loop */
	LDRresistance_t LDRresistance = {0};
 800175c:	f107 0308 	add.w	r3, r7, #8
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) measurement, 4);
 800176a:	2204      	movs	r2, #4
 800176c:	490a      	ldr	r1, [pc, #40]	; (8001798 <StartADC2Resistance+0x44>)
 800176e:	480b      	ldr	r0, [pc, #44]	; (800179c <StartADC2Resistance+0x48>)
 8001770:	f001 fab4 	bl	8002cdc <HAL_ADC_Start_DMA>
	  SensorServiceADC2Resistance((uint16_t*) measurement, &LDRresistance);
 8001774:	f107 0308 	add.w	r3, r7, #8
 8001778:	4619      	mov	r1, r3
 800177a:	4807      	ldr	r0, [pc, #28]	; (8001798 <StartADC2Resistance+0x44>)
 800177c:	f7ff fc84 	bl	8001088 <SensorServiceADC2Resistance>
	  xQueueSend(LDRResistanceHandle, &LDRresistance, 0);
 8001780:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <StartADC2Resistance+0x4c>)
 8001782:	6818      	ldr	r0, [r3, #0]
 8001784:	f107 0108 	add.w	r1, r7, #8
 8001788:	2300      	movs	r3, #0
 800178a:	2200      	movs	r2, #0
 800178c:	f006 ffd8 	bl	8008740 <xQueueGenericSend>
	  osDelay(10);
 8001790:	200a      	movs	r0, #10
 8001792:	f006 fd6b 	bl	800826c <osDelay>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) measurement, 4);
 8001796:	e7e8      	b.n	800176a <StartADC2Resistance+0x16>
 8001798:	200000ac 	.word	0x200000ac
 800179c:	200000d8 	.word	0x200000d8
 80017a0:	20000180 	.word	0x20000180

080017a4 <StartMotorControl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotorControl */
void StartMotorControl(void const * argument)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotorControl */
	LDRresistance_t resistance = {0};
 80017ac:	f107 0308 	add.w	r3, r7, #8
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
  /* Infinite loop */
  for(;;)
  {
	if(osSemaphoreGetCount(MotorControlSemaphoreHandle) > 0)
 80017ba:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <StartMotorControl+0x8c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f006 fdc2 	bl	8008348 <osSemaphoreGetCount>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f7      	beq.n	80017ba <StartMotorControl+0x16>
	{
		xQueueReceive(LDRResistanceHandle, &resistance, 0);
 80017ca:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <StartMotorControl+0x90>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f107 0108 	add.w	r1, r7, #8
 80017d2:	2200      	movs	r2, #0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f007 f93f 	bl	8008a58 <xQueueReceive>

		if (modeStateHandle->MODE == MANUAL)
 80017da:	4b17      	ldr	r3, [pc, #92]	; (8001838 <StartMotorControl+0x94>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	789b      	ldrb	r3, [r3, #2]
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d110      	bne.n	8001808 <StartMotorControl+0x64>
		{
			MotorServiceManualMode(modeStateHandle, horizontalMotorHandle);
 80017e6:	4b14      	ldr	r3, [pc, #80]	; (8001838 <StartMotorControl+0x94>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a14      	ldr	r2, [pc, #80]	; (800183c <StartMotorControl+0x98>)
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	4611      	mov	r1, r2
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fb2d 	bl	8000e50 <MotorServiceManualMode>
			MotorServiceManualMode(modeStateHandle, verticalMotorHandle);
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <StartMotorControl+0x94>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a11      	ldr	r2, [pc, #68]	; (8001840 <StartMotorControl+0x9c>)
 80017fc:	6812      	ldr	r2, [r2, #0]
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fb25 	bl	8000e50 <MotorServiceManualMode>
 8001806:	e00f      	b.n	8001828 <StartMotorControl+0x84>
		}
		else
		{
			MotorServiceAutoMode(&resistance, limitSwitch, horizontalMotorHandle);
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <StartMotorControl+0x98>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	f107 0308 	add.w	r3, r7, #8
 8001810:	490c      	ldr	r1, [pc, #48]	; (8001844 <StartMotorControl+0xa0>)
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fa28 	bl	8000c68 <MotorServiceAutoMode>
			MotorServiceAutoMode(&resistance, limitSwitch, verticalMotorHandle);
 8001818:	4b09      	ldr	r3, [pc, #36]	; (8001840 <StartMotorControl+0x9c>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	f107 0308 	add.w	r3, r7, #8
 8001820:	4908      	ldr	r1, [pc, #32]	; (8001844 <StartMotorControl+0xa0>)
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fa20 	bl	8000c68 <MotorServiceAutoMode>
		}
		osDelay(10);
 8001828:	200a      	movs	r0, #10
 800182a:	f006 fd1f 	bl	800826c <osDelay>
	if(osSemaphoreGetCount(MotorControlSemaphoreHandle) > 0)
 800182e:	e7c4      	b.n	80017ba <StartMotorControl+0x16>
 8001830:	20000184 	.word	0x20000184
 8001834:	20000180 	.word	0x20000180
 8001838:	20000008 	.word	0x20000008
 800183c:	20000000 	.word	0x20000000
 8001840:	20000004 	.word	0x20000004
 8001844:	200000a8 	.word	0x200000a8

08001848 <StartLimiterHandling>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLimiterHandling */
void StartLimiterHandling(void const * argument)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLimiterHandling */
	xSemaphoreTake(LimiterSemaphoreHandle, portMAX_DELAY );
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <StartLimiterHandling+0x48>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f04f 31ff 	mov.w	r1, #4294967295
 8001858:	4618      	mov	r0, r3
 800185a:	f007 f9dd 	bl	8008c18 <xQueueSemaphoreTake>
  /* Infinite loop */
  for(;;)
  {
	  if(xSemaphoreTake(LimiterSemaphoreHandle, portMAX_DELAY ) == pdTRUE)
 800185e:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <StartLimiterHandling+0x48>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f04f 31ff 	mov.w	r1, #4294967295
 8001866:	4618      	mov	r0, r3
 8001868:	f007 f9d6 	bl	8008c18 <xQueueSemaphoreTake>
 800186c:	4603      	mov	r3, r0
 800186e:	2b01      	cmp	r3, #1
 8001870:	d1f5      	bne.n	800185e <StartLimiterHandling+0x16>
	  {
		  SensorServiceReadLimiter(limitSwitch);
 8001872:	4808      	ldr	r0, [pc, #32]	; (8001894 <StartLimiterHandling+0x4c>)
 8001874:	f7ff fca4 	bl	80011c0 <SensorServiceReadLimiter>
		  MotorServiceMotorStop(horizontalMotorHandle);
 8001878:	4b07      	ldr	r3, [pc, #28]	; (8001898 <StartLimiterHandling+0x50>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff f98e 	bl	8000b9e <MotorServiceMotorStop>
		  MotorServiceMotorStop(verticalMotorHandle);
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <StartLimiterHandling+0x54>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff f989 	bl	8000b9e <MotorServiceMotorStop>
	  if(xSemaphoreTake(LimiterSemaphoreHandle, portMAX_DELAY ) == pdTRUE)
 800188c:	e7e7      	b.n	800185e <StartLimiterHandling+0x16>
 800188e:	bf00      	nop
 8001890:	20000188 	.word	0x20000188
 8001894:	200000a8 	.word	0x200000a8
 8001898:	20000000 	.word	0x20000000
 800189c:	20000004 	.word	0x20000004

080018a0 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
	  uartServiceSendCurrentPosition(horizontalMotorHandle, verticalMotorHandle);
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <StartTask05+0x24>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a06      	ldr	r2, [pc, #24]	; (80018c8 <StartTask05+0x28>)
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	4611      	mov	r1, r2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fcec 	bl	8001290 <uartServiceSendCurrentPosition>
	  osDelay(1000);
 80018b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018bc:	f006 fcd6 	bl	800826c <osDelay>
  {
 80018c0:	e7f2      	b.n	80018a8 <StartTask05+0x8>
 80018c2:	bf00      	nop
 80018c4:	20000000 	.word	0x20000000
 80018c8:	20000004 	.word	0x20000004

080018cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018e2:	4b41      	ldr	r3, [pc, #260]	; (80019e8 <MX_GPIO_Init+0x11c>)
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	4a40      	ldr	r2, [pc, #256]	; (80019e8 <MX_GPIO_Init+0x11c>)
 80018e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018ec:	6153      	str	r3, [r2, #20]
 80018ee:	4b3e      	ldr	r3, [pc, #248]	; (80019e8 <MX_GPIO_Init+0x11c>)
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018fa:	4b3b      	ldr	r3, [pc, #236]	; (80019e8 <MX_GPIO_Init+0x11c>)
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	4a3a      	ldr	r2, [pc, #232]	; (80019e8 <MX_GPIO_Init+0x11c>)
 8001900:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001904:	6153      	str	r3, [r2, #20]
 8001906:	4b38      	ldr	r3, [pc, #224]	; (80019e8 <MX_GPIO_Init+0x11c>)
 8001908:	695b      	ldr	r3, [r3, #20]
 800190a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	4b35      	ldr	r3, [pc, #212]	; (80019e8 <MX_GPIO_Init+0x11c>)
 8001914:	695b      	ldr	r3, [r3, #20]
 8001916:	4a34      	ldr	r2, [pc, #208]	; (80019e8 <MX_GPIO_Init+0x11c>)
 8001918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800191c:	6153      	str	r3, [r2, #20]
 800191e:	4b32      	ldr	r3, [pc, #200]	; (80019e8 <MX_GPIO_Init+0x11c>)
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800192a:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <MX_GPIO_Init+0x11c>)
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	4a2e      	ldr	r2, [pc, #184]	; (80019e8 <MX_GPIO_Init+0x11c>)
 8001930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001934:	6153      	str	r3, [r2, #20]
 8001936:	4b2c      	ldr	r3, [pc, #176]	; (80019e8 <MX_GPIO_Init+0x11c>)
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIR_VERTICAL_Pin|DIR_HORIZONTAL_Pin|LD2_Pin|RESET_HORIZONTAL_Pin
 8001942:	2200      	movs	r2, #0
 8001944:	f242 4132 	movw	r1, #9266	; 0x2432
 8001948:	4828      	ldr	r0, [pc, #160]	; (80019ec <MX_GPIO_Init+0x120>)
 800194a:	f002 fac5 	bl	8003ed8 <HAL_GPIO_WritePin>
                          |RESET_VERTICAL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800194e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001954:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	4619      	mov	r1, r3
 8001964:	4822      	ldr	r0, [pc, #136]	; (80019f0 <MX_GPIO_Init+0x124>)
 8001966:	f002 f92d 	bl	8003bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIR_VERTICAL_Pin|RESET_HORIZONTAL_Pin;
 800196a:	2312      	movs	r3, #18
 800196c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196e:	2301      	movs	r3, #1
 8001970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001976:	2303      	movs	r3, #3
 8001978:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	481a      	ldr	r0, [pc, #104]	; (80019ec <MX_GPIO_Init+0x120>)
 8001982:	f002 f91f 	bl	8003bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DIR_HORIZONTAL_Pin|LD2_Pin|RESET_VERTICAL_Pin;
 8001986:	f242 4320 	movw	r3, #9248	; 0x2420
 800198a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198c:	2301      	movs	r3, #1
 800198e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001994:	2300      	movs	r3, #0
 8001996:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	4619      	mov	r1, r3
 800199e:	4813      	ldr	r0, [pc, #76]	; (80019ec <MX_GPIO_Init+0x120>)
 80019a0:	f002 f910 	bl	8003bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LIMIT_VERTICAL_Pin|LIMIT_HORIZONTAL_90DEG_Pin|LIMIT_HORIZONTAL_30DEG_Pin;
 80019a4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80019a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80019aa:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80019ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019b0:	2302      	movs	r3, #2
 80019b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	4619      	mov	r1, r3
 80019ba:	480d      	ldr	r0, [pc, #52]	; (80019f0 <MX_GPIO_Init+0x124>)
 80019bc:	f002 f902 	bl	8003bc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2105      	movs	r1, #5
 80019c4:	2017      	movs	r0, #23
 80019c6:	f001 febf 	bl	8003748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019ca:	2017      	movs	r0, #23
 80019cc:	f001 fed8 	bl	8003780 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2105      	movs	r1, #5
 80019d4:	2028      	movs	r0, #40	; 0x28
 80019d6:	f001 feb7 	bl	8003748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019da:	2028      	movs	r0, #40	; 0x28
 80019dc:	f001 fed0 	bl	8003780 <HAL_NVIC_EnableIRQ>

}
 80019e0:	bf00      	nop
 80019e2:	3728      	adds	r7, #40	; 0x28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40021000 	.word	0x40021000
 80019ec:	48000400 	.word	0x48000400
 80019f0:	48000800 	.word	0x48000800

080019f4 <HAL_GPIO_EXTI_Callback>:
/*-------------UART TRANSMITION--------*/
extern volatile uint8_t RxBuffor[9];
volatile uint8_t RxBuffor2[9];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	80fb      	strh	r3, [r7, #6]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]

	if (GPIO_Pin == LIMIT_HORIZONTAL_30DEG_Pin || GPIO_Pin == LIMIT_HORIZONTAL_90DEG_Pin ||  GPIO_Pin == LIMIT_VERTICAL_Pin)
 8001a02:	88fb      	ldrh	r3, [r7, #6]
 8001a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a08:	d006      	beq.n	8001a18 <HAL_GPIO_EXTI_Callback+0x24>
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a10:	d002      	beq.n	8001a18 <HAL_GPIO_EXTI_Callback+0x24>
 8001a12:	88fb      	ldrh	r3, [r7, #6]
 8001a14:	2b80      	cmp	r3, #128	; 0x80
 8001a16:	d118      	bne.n	8001a4a <HAL_GPIO_EXTI_Callback+0x56>
	{
		if (initializeFlag == 0)
 8001a18:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <HAL_GPIO_EXTI_Callback+0x60>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d103      	bne.n	8001a2a <HAL_GPIO_EXTI_Callback+0x36>
		{
			SensorServiceReadLimiter(limitSwitch);
 8001a22:	480d      	ldr	r0, [pc, #52]	; (8001a58 <HAL_GPIO_EXTI_Callback+0x64>)
 8001a24:	f7ff fbcc 	bl	80011c0 <SensorServiceReadLimiter>
		{
			xSemaphoreGiveFromISR(MotorControlSemaphoreHandle, &xHigherPriorityTaskWoken);
			xSemaphoreGiveFromISR(LimiterSemaphoreHandle, &xHigherPriorityTaskWoken);
		}
	}
}
 8001a28:	e00f      	b.n	8001a4a <HAL_GPIO_EXTI_Callback+0x56>
			xSemaphoreGiveFromISR(MotorControlSemaphoreHandle, &xHigherPriorityTaskWoken);
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <HAL_GPIO_EXTI_Callback+0x68>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f107 020c 	add.w	r2, r7, #12
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f006 ff81 	bl	800893c <xQueueGiveFromISR>
			xSemaphoreGiveFromISR(LimiterSemaphoreHandle, &xHigherPriorityTaskWoken);
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f107 020c 	add.w	r2, r7, #12
 8001a42:	4611      	mov	r1, r2
 8001a44:	4618      	mov	r0, r3
 8001a46:	f006 ff79 	bl	800893c <xQueueGiveFromISR>
}
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	200003e4 	.word	0x200003e4
 8001a58:	200000a8 	.word	0x200000a8
 8001a5c:	20000184 	.word	0x20000184
 8001a60:	20000188 	.word	0x20000188

08001a64 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <HAL_UART_RxCpltCallback+0x38>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d10e      	bne.n	8001a94 <HAL_UART_RxCpltCallback+0x30>
	{
		HAL_UART_Receive_DMA(&huart1, RxBuffor, 9);
 8001a76:	2209      	movs	r2, #9
 8001a78:	4909      	ldr	r1, [pc, #36]	; (8001aa0 <HAL_UART_RxCpltCallback+0x3c>)
 8001a7a:	480a      	ldr	r0, [pc, #40]	; (8001aa4 <HAL_UART_RxCpltCallback+0x40>)
 8001a7c:	f005 fa82 	bl	8006f84 <HAL_UART_Receive_DMA>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(RxUARTSemaphoreHandle, &xHigherPriorityTaskWoken);
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <HAL_UART_RxCpltCallback+0x44>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f107 020c 	add.w	r2, r7, #12
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f006 ff54 	bl	800893c <xQueueGiveFromISR>
	}
}
 8001a94:	bf00      	nop
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40013800 	.word	0x40013800
 8001aa0:	200000b4 	.word	0x200000b4
 8001aa4:	20000568 	.word	0x20000568
 8001aa8:	2000018c 	.word	0x2000018c

08001aac <MotorandModeInit>:


void MotorandModeInit(MotorState_t* HorizontalMotor, MotorState_t* VerticalMotor, ModeState_t* ModeState)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
	MotorServiceMotorInit(HorizontalMotor, VerticalMotor, ModeState);
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	68b9      	ldr	r1, [r7, #8]
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f7fe fff5 	bl	8000aac <MotorServiceMotorInit>
	SensorServiceReadLimiter(limitSwitch);
 8001ac2:	4812      	ldr	r0, [pc, #72]	; (8001b0c <MotorandModeInit+0x60>)
 8001ac4:	f7ff fb7c 	bl	80011c0 <SensorServiceReadLimiter>

	while (limitSwitch[0] || limitSwitch[2])
 8001ac8:	e007      	b.n	8001ada <MotorandModeInit+0x2e>
	{
		MotorServiceMotorHoming(HorizontalMotor, limitSwitch);
 8001aca:	4910      	ldr	r1, [pc, #64]	; (8001b0c <MotorandModeInit+0x60>)
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f7ff f823 	bl	8000b18 <MotorServiceMotorHoming>
		MotorServiceMotorHoming(VerticalMotor, limitSwitch);
 8001ad2:	490e      	ldr	r1, [pc, #56]	; (8001b0c <MotorandModeInit+0x60>)
 8001ad4:	68b8      	ldr	r0, [r7, #8]
 8001ad6:	f7ff f81f 	bl	8000b18 <MotorServiceMotorHoming>
	while (limitSwitch[0] || limitSwitch[2])
 8001ada:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <MotorandModeInit+0x60>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1f2      	bne.n	8001aca <MotorandModeInit+0x1e>
 8001ae4:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <MotorandModeInit+0x60>)
 8001ae6:	789b      	ldrb	r3, [r3, #2]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1ed      	bne.n	8001aca <MotorandModeInit+0x1e>
	}

	HorizontalMotor->CURRENTPOSITION = 30;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <MotorandModeInit+0x64>)
 8001af2:	605a      	str	r2, [r3, #4]
	VerticalMotor->CURRENTPOSITION = 0;
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	605a      	str	r2, [r3, #4]
	initializeFlag = 1;
 8001afc:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <MotorandModeInit+0x68>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	701a      	strb	r2, [r3, #0]
}
 8001b02:	bf00      	nop
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200000a8 	.word	0x200000a8
 8001b10:	41f00000 	.word	0x41f00000
 8001b14:	200003e4 	.word	0x200003e4

08001b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b1c:	f000 ff04 	bl	8002928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b20:	f000 f83a 	bl	8001b98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b24:	f7ff fed2 	bl	80018cc <MX_GPIO_Init>
  MX_DMA_Init();
 8001b28:	f7ff fce4 	bl	80014f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001b2c:	f000 fd9e 	bl	800266c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001b30:	f7ff fbec 	bl	800130c <MX_ADC1_Init>
  MX_TIM1_Init();
 8001b34:	f000 fad0 	bl	80020d8 <MX_TIM1_Init>
  MX_TIM15_Init();
 8001b38:	f000 fba0 	bl	800227c <MX_TIM15_Init>
  MX_TIM2_Init();
 8001b3c:	f000 fb26 	bl	800218c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001b40:	f000 fd64 	bl	800260c <MX_USART1_UART_Init>
  MX_TIM16_Init();
 8001b44:	f000 fbee 	bl	8002324 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim15); // counting the PWM impulse from TIM2
 8001b48:	480c      	ldr	r0, [pc, #48]	; (8001b7c <main+0x64>)
 8001b4a:	f003 fe6f 	bl	800582c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim1); // counting the PWM impulse from TIM16
 8001b4e:	480c      	ldr	r0, [pc, #48]	; (8001b80 <main+0x68>)
 8001b50:	f003 fe6c 	bl	800582c <HAL_TIM_Base_Start_IT>

  MotorandModeInit(horizontalMotorHandle, verticalMotorHandle, modeStateHandle);
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <main+0x6c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <main+0x70>)
 8001b5a:	6811      	ldr	r1, [r2, #0]
 8001b5c:	4a0b      	ldr	r2, [pc, #44]	; (8001b8c <main+0x74>)
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ffa3 	bl	8001aac <MotorandModeInit>
  HAL_UART_Receive_DMA(&huart1, RxBuffor, 9);
 8001b66:	2209      	movs	r2, #9
 8001b68:	4909      	ldr	r1, [pc, #36]	; (8001b90 <main+0x78>)
 8001b6a:	480a      	ldr	r0, [pc, #40]	; (8001b94 <main+0x7c>)
 8001b6c:	f005 fa0a 	bl	8006f84 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001b70:	f7ff fd10 	bl	8001594 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001b74:	f006 fb27 	bl	80081c6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <main+0x60>
 8001b7a:	bf00      	nop
 8001b7c:	200004d0 	.word	0x200004d0
 8001b80:	20000438 	.word	0x20000438
 8001b84:	20000000 	.word	0x20000000
 8001b88:	20000004 	.word	0x20000004
 8001b8c:	20000008 	.word	0x20000008
 8001b90:	200000b4 	.word	0x200000b4
 8001b94:	20000568 	.word	0x20000568

08001b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b09c      	sub	sp, #112	; 0x70
 8001b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ba2:	2228      	movs	r2, #40	; 0x28
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f009 f889 	bl	800acbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bbc:	463b      	mov	r3, r7
 8001bbe:	2234      	movs	r2, #52	; 0x34
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f009 f87b 	bl	800acbe <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bd0:	2310      	movs	r3, #16
 8001bd2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001bdc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001be0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001be2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001be6:	4618      	mov	r0, r3
 8001be8:	f002 f9a6 	bl	8003f38 <HAL_RCC_OscConfig>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001bf2:	f000 f861 	bl	8001cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bf6:	230f      	movs	r3, #15
 8001bf8:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c10:	2102      	movs	r1, #2
 8001c12:	4618      	mov	r0, r3
 8001c14:	f003 f9ce 	bl	8004fb4 <HAL_RCC_ClockConfig>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001c1e:	f000 f84b 	bl	8001cb8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 8001c22:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <SystemClock_Config+0xc0>)
 8001c24:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_TIM15|RCC_PERIPHCLK_TIM16
                              |RCC_PERIPHCLK_ADC1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001c26:	2300      	movs	r3, #0
 8001c28:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8001c36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c3a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c3c:	463b      	mov	r3, r7
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f003 fc0a 	bl	8005458 <HAL_RCCEx_PeriphCLKConfig>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001c4a:	f000 f835 	bl	8001cb8 <Error_Handler>
  }
}
 8001c4e:	bf00      	nop
 8001c50:	3770      	adds	r7, #112	; 0x70
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	000c1081 	.word	0x000c1081

08001c5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0e      	ldr	r2, [pc, #56]	; (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d101      	bne.n	8001c72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c6e:	f000 fe71 	bl	8002954 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM15)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a0c      	ldr	r2, [pc, #48]	; (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d104      	bne.n	8001c86 <HAL_TIM_PeriodElapsedCallback+0x2a>
  {
	 MotorServiceHorizontalCurrentPosition(horizontalMotorHandle);
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff f9dc 	bl	800103e <MotorServiceHorizontalCurrentPosition>
  }
  if (htim->Instance == TIM1)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a09      	ldr	r2, [pc, #36]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d104      	bne.n	8001c9a <HAL_TIM_PeriodElapsedCallback+0x3e>
  {
	 MotorServiceVerticalCurrentPosition(verticalMotorHandle);
 8001c90:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff f9af 	bl	8000ff8 <MotorServiceVerticalCurrentPosition>
  }
  /* USER CODE END Callback 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40001000 	.word	0x40001000
 8001ca8:	40014000 	.word	0x40014000
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	40012c00 	.word	0x40012c00
 8001cb4:	20000004 	.word	0x20000004

08001cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cbc:	b672      	cpsid	i
}
 8001cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <Error_Handler+0x8>
	...

08001cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <HAL_MspInit+0x4c>)
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	4a10      	ldr	r2, [pc, #64]	; (8001d10 <HAL_MspInit+0x4c>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6193      	str	r3, [r2, #24]
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <HAL_MspInit+0x4c>)
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	607b      	str	r3, [r7, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <HAL_MspInit+0x4c>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <HAL_MspInit+0x4c>)
 8001ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cec:	61d3      	str	r3, [r2, #28]
 8001cee:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <HAL_MspInit+0x4c>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	210f      	movs	r1, #15
 8001cfe:	f06f 0001 	mvn.w	r0, #1
 8001d02:	f001 fd21 	bl	8003748 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40021000 	.word	0x40021000

08001d14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08e      	sub	sp, #56	; 0x38
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d24:	4b33      	ldr	r3, [pc, #204]	; (8001df4 <HAL_InitTick+0xe0>)
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	4a32      	ldr	r2, [pc, #200]	; (8001df4 <HAL_InitTick+0xe0>)
 8001d2a:	f043 0310 	orr.w	r3, r3, #16
 8001d2e:	61d3      	str	r3, [r2, #28]
 8001d30:	4b30      	ldr	r3, [pc, #192]	; (8001df4 <HAL_InitTick+0xe0>)
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	f003 0310 	and.w	r3, r3, #16
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d3c:	f107 0210 	add.w	r2, r7, #16
 8001d40:	f107 0314 	add.w	r3, r7, #20
 8001d44:	4611      	mov	r1, r2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f003 fb54 	bl	80053f4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d4c:	6a3b      	ldr	r3, [r7, #32]
 8001d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d103      	bne.n	8001d5e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d56:	f003 fb09 	bl	800536c <HAL_RCC_GetPCLK1Freq>
 8001d5a:	6378      	str	r0, [r7, #52]	; 0x34
 8001d5c:	e004      	b.n	8001d68 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d5e:	f003 fb05 	bl	800536c <HAL_RCC_GetPCLK1Freq>
 8001d62:	4603      	mov	r3, r0
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d6a:	4a23      	ldr	r2, [pc, #140]	; (8001df8 <HAL_InitTick+0xe4>)
 8001d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d70:	0c9b      	lsrs	r3, r3, #18
 8001d72:	3b01      	subs	r3, #1
 8001d74:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d76:	4b21      	ldr	r3, [pc, #132]	; (8001dfc <HAL_InitTick+0xe8>)
 8001d78:	4a21      	ldr	r2, [pc, #132]	; (8001e00 <HAL_InitTick+0xec>)
 8001d7a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <HAL_InitTick+0xe8>)
 8001d7e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d82:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d84:	4a1d      	ldr	r2, [pc, #116]	; (8001dfc <HAL_InitTick+0xe8>)
 8001d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d88:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	; (8001dfc <HAL_InitTick+0xe8>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d90:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <HAL_InitTick+0xe8>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d96:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <HAL_InitTick+0xe8>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001d9c:	4817      	ldr	r0, [pc, #92]	; (8001dfc <HAL_InitTick+0xe8>)
 8001d9e:	f003 fced 	bl	800577c <HAL_TIM_Base_Init>
 8001da2:	4603      	mov	r3, r0
 8001da4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001da8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d11b      	bne.n	8001de8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001db0:	4812      	ldr	r0, [pc, #72]	; (8001dfc <HAL_InitTick+0xe8>)
 8001db2:	f003 fd3b 	bl	800582c <HAL_TIM_Base_Start_IT>
 8001db6:	4603      	mov	r3, r0
 8001db8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001dbc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d111      	bne.n	8001de8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001dc4:	2036      	movs	r0, #54	; 0x36
 8001dc6:	f001 fcdb 	bl	8003780 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b0f      	cmp	r3, #15
 8001dce:	d808      	bhi.n	8001de2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	2036      	movs	r0, #54	; 0x36
 8001dd6:	f001 fcb7 	bl	8003748 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dda:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <HAL_InitTick+0xf0>)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	e002      	b.n	8001de8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001de8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3738      	adds	r7, #56	; 0x38
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40021000 	.word	0x40021000
 8001df8:	431bde83 	.word	0x431bde83
 8001dfc:	200003e8 	.word	0x200003e8
 8001e00:	40001000 	.word	0x40001000
 8001e04:	20000010 	.word	0x20000010

08001e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <NMI_Handler+0x4>

08001e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e12:	e7fe      	b.n	8001e12 <HardFault_Handler+0x4>

08001e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <MemManage_Handler+0x4>

08001e1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e1e:	e7fe      	b.n	8001e1e <BusFault_Handler+0x4>

08001e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <UsageFault_Handler+0x4>

08001e26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e38:	4802      	ldr	r0, [pc, #8]	; (8001e44 <DMA1_Channel1_IRQHandler+0x10>)
 8001e3a:	f001 fdd1 	bl	80039e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000128 	.word	0x20000128

08001e48 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001e4c:	4802      	ldr	r0, [pc, #8]	; (8001e58 <DMA1_Channel4_IRQHandler+0x10>)
 8001e4e:	f001 fdc7 	bl	80039e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	200006bc 	.word	0x200006bc

08001e5c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001e60:	4802      	ldr	r0, [pc, #8]	; (8001e6c <DMA1_Channel5_IRQHandler+0x10>)
 8001e62:	f001 fdbd 	bl	80039e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000678 	.word	0x20000678

08001e70 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001e74:	4802      	ldr	r0, [pc, #8]	; (8001e80 <DMA1_Channel6_IRQHandler+0x10>)
 8001e76:	f001 fdb3 	bl	80039e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000700 	.word	0x20000700

08001e84 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LIMIT_VERTICAL_Pin);
 8001e88:	2080      	movs	r0, #128	; 0x80
 8001e8a:	f002 f83d 	bl	8003f08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LIMIT_HORIZONTAL_90DEG_Pin);
 8001e8e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001e92:	f002 f839 	bl	8003f08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LIMIT_HORIZONTAL_30DEG_Pin);
 8001e96:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001e9a:	f002 f835 	bl	8003f08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ea8:	4803      	ldr	r0, [pc, #12]	; (8001eb8 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8001eaa:	f003 fee9 	bl	8005c80 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8001eae:	4803      	ldr	r0, [pc, #12]	; (8001ebc <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8001eb0:	f003 fee6 	bl	8005c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20000438 	.word	0x20000438
 8001ebc:	200004d0 	.word	0x200004d0

08001ec0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ec4:	4803      	ldr	r0, [pc, #12]	; (8001ed4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001ec6:	f003 fedb 	bl	8005c80 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001eca:	4803      	ldr	r0, [pc, #12]	; (8001ed8 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001ecc:	f003 fed8 	bl	8005c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001ed0:	bf00      	nop
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000438 	.word	0x20000438
 8001ed8:	2000051c 	.word	0x2000051c

08001edc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ee0:	4802      	ldr	r0, [pc, #8]	; (8001eec <USART1_IRQHandler+0x10>)
 8001ee2:	f005 f893 	bl	800700c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000568 	.word	0x20000568

08001ef0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ef4:	4802      	ldr	r0, [pc, #8]	; (8001f00 <USART2_IRQHandler+0x10>)
 8001ef6:	f005 f889 	bl	800700c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	200005f0 	.word	0x200005f0

08001f04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001f08:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f0c:	f001 fffc 	bl	8003f08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f10:	bf00      	nop
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f18:	4802      	ldr	r0, [pc, #8]	; (8001f24 <TIM6_DAC_IRQHandler+0x10>)
 8001f1a:	f003 feb1 	bl	8005c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	200003e8 	.word	0x200003e8

08001f28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return 1;
 8001f2c:	2301      	movs	r3, #1
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <_kill>:

int _kill(int pid, int sig)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f42:	f008 ff67 	bl	800ae14 <__errno>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2216      	movs	r2, #22
 8001f4a:	601a      	str	r2, [r3, #0]
  return -1;
 8001f4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <_exit>:

void _exit (int status)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f60:	f04f 31ff 	mov.w	r1, #4294967295
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff ffe7 	bl	8001f38 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f6a:	e7fe      	b.n	8001f6a <_exit+0x12>

08001f6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	e00a      	b.n	8001f94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f7e:	f3af 8000 	nop.w
 8001f82:	4601      	mov	r1, r0
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	60ba      	str	r2, [r7, #8]
 8001f8a:	b2ca      	uxtb	r2, r1
 8001f8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	3301      	adds	r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	dbf0      	blt.n	8001f7e <_read+0x12>
  }

  return len;
 8001f9c:	687b      	ldr	r3, [r7, #4]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b086      	sub	sp, #24
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	60f8      	str	r0, [r7, #12]
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	e009      	b.n	8001fcc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	60ba      	str	r2, [r7, #8]
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	dbf1      	blt.n	8001fb8 <_write+0x12>
  }
  return len;
 8001fd4:	687b      	ldr	r3, [r7, #4]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3718      	adds	r7, #24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <_close>:

int _close(int file)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fe6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002006:	605a      	str	r2, [r3, #4]
  return 0;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <_isatty>:

int _isatty(int file)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800201e:	2301      	movs	r3, #1
}
 8002020:	4618      	mov	r0, r3
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
	...

08002048 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002050:	4a14      	ldr	r2, [pc, #80]	; (80020a4 <_sbrk+0x5c>)
 8002052:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <_sbrk+0x60>)
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800205c:	4b13      	ldr	r3, [pc, #76]	; (80020ac <_sbrk+0x64>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d102      	bne.n	800206a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002064:	4b11      	ldr	r3, [pc, #68]	; (80020ac <_sbrk+0x64>)
 8002066:	4a12      	ldr	r2, [pc, #72]	; (80020b0 <_sbrk+0x68>)
 8002068:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800206a:	4b10      	ldr	r3, [pc, #64]	; (80020ac <_sbrk+0x64>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4413      	add	r3, r2
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	429a      	cmp	r2, r3
 8002076:	d207      	bcs.n	8002088 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002078:	f008 fecc 	bl	800ae14 <__errno>
 800207c:	4603      	mov	r3, r0
 800207e:	220c      	movs	r2, #12
 8002080:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002082:	f04f 33ff 	mov.w	r3, #4294967295
 8002086:	e009      	b.n	800209c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002088:	4b08      	ldr	r3, [pc, #32]	; (80020ac <_sbrk+0x64>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800208e:	4b07      	ldr	r3, [pc, #28]	; (80020ac <_sbrk+0x64>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	4a05      	ldr	r2, [pc, #20]	; (80020ac <_sbrk+0x64>)
 8002098:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800209a:	68fb      	ldr	r3, [r7, #12]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20004000 	.word	0x20004000
 80020a8:	00000400 	.word	0x00000400
 80020ac:	20000434 	.word	0x20000434
 80020b0:	20002150 	.word	0x20002150

080020b4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <SystemInit+0x20>)
 80020ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020be:	4a05      	ldr	r2, [pc, #20]	; (80020d4 <SystemInit+0x20>)
 80020c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80020de:	f107 030c 	add.w	r3, r7, #12
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]
 80020e8:	609a      	str	r2, [r3, #8]
 80020ea:	60da      	str	r2, [r3, #12]
 80020ec:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ee:	463b      	mov	r3, r7
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020f8:	4b22      	ldr	r3, [pc, #136]	; (8002184 <MX_TIM1_Init+0xac>)
 80020fa:	4a23      	ldr	r2, [pc, #140]	; (8002188 <MX_TIM1_Init+0xb0>)
 80020fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80020fe:	4b21      	ldr	r3, [pc, #132]	; (8002184 <MX_TIM1_Init+0xac>)
 8002100:	2200      	movs	r2, #0
 8002102:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002104:	4b1f      	ldr	r3, [pc, #124]	; (8002184 <MX_TIM1_Init+0xac>)
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 53-1;
 800210a:	4b1e      	ldr	r3, [pc, #120]	; (8002184 <MX_TIM1_Init+0xac>)
 800210c:	2234      	movs	r2, #52	; 0x34
 800210e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002110:	4b1c      	ldr	r3, [pc, #112]	; (8002184 <MX_TIM1_Init+0xac>)
 8002112:	2200      	movs	r2, #0
 8002114:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002116:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <MX_TIM1_Init+0xac>)
 8002118:	2200      	movs	r2, #0
 800211a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800211c:	4b19      	ldr	r3, [pc, #100]	; (8002184 <MX_TIM1_Init+0xac>)
 800211e:	2280      	movs	r2, #128	; 0x80
 8002120:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002122:	4818      	ldr	r0, [pc, #96]	; (8002184 <MX_TIM1_Init+0xac>)
 8002124:	f003 fb2a 	bl	800577c <HAL_TIM_Base_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800212e:	f7ff fdc3 	bl	8001cb8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002132:	2307      	movs	r3, #7
 8002134:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8002136:	2370      	movs	r3, #112	; 0x70
 8002138:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002146:	f107 030c 	add.w	r3, r7, #12
 800214a:	4619      	mov	r1, r3
 800214c:	480d      	ldr	r0, [pc, #52]	; (8002184 <MX_TIM1_Init+0xac>)
 800214e:	f004 f876 	bl	800623e <HAL_TIM_SlaveConfigSynchro>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002158:	f7ff fdae 	bl	8001cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800215c:	2300      	movs	r3, #0
 800215e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002160:	2300      	movs	r3, #0
 8002162:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002164:	2300      	movs	r3, #0
 8002166:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002168:	463b      	mov	r3, r7
 800216a:	4619      	mov	r1, r3
 800216c:	4805      	ldr	r0, [pc, #20]	; (8002184 <MX_TIM1_Init+0xac>)
 800216e:	f004 fd43 	bl	8006bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002178:	f7ff fd9e 	bl	8001cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800217c:	bf00      	nop
 800217e:	3720      	adds	r7, #32
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20000438 	.word	0x20000438
 8002188:	40012c00 	.word	0x40012c00

0800218c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08e      	sub	sp, #56	; 0x38
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a0:	f107 031c 	add.w	r3, r7, #28
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021ac:	463b      	mov	r3, r7
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]
 80021b4:	609a      	str	r2, [r3, #8]
 80021b6:	60da      	str	r2, [r3, #12]
 80021b8:	611a      	str	r2, [r3, #16]
 80021ba:	615a      	str	r2, [r3, #20]
 80021bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021be:	4b2e      	ldr	r3, [pc, #184]	; (8002278 <MX_TIM2_Init+0xec>)
 80021c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80021c6:	4b2c      	ldr	r3, [pc, #176]	; (8002278 <MX_TIM2_Init+0xec>)
 80021c8:	223f      	movs	r2, #63	; 0x3f
 80021ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021cc:	4b2a      	ldr	r3, [pc, #168]	; (8002278 <MX_TIM2_Init+0xec>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80021d2:	4b29      	ldr	r3, [pc, #164]	; (8002278 <MX_TIM2_Init+0xec>)
 80021d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021da:	4b27      	ldr	r3, [pc, #156]	; (8002278 <MX_TIM2_Init+0xec>)
 80021dc:	2200      	movs	r2, #0
 80021de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021e0:	4b25      	ldr	r3, [pc, #148]	; (8002278 <MX_TIM2_Init+0xec>)
 80021e2:	2280      	movs	r2, #128	; 0x80
 80021e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021e6:	4824      	ldr	r0, [pc, #144]	; (8002278 <MX_TIM2_Init+0xec>)
 80021e8:	f003 fac8 	bl	800577c <HAL_TIM_Base_Init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80021f2:	f7ff fd61 	bl	8001cb8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002200:	4619      	mov	r1, r3
 8002202:	481d      	ldr	r0, [pc, #116]	; (8002278 <MX_TIM2_Init+0xec>)
 8002204:	f003 ff52 	bl	80060ac <HAL_TIM_ConfigClockSource>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800220e:	f7ff fd53 	bl	8001cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002212:	4819      	ldr	r0, [pc, #100]	; (8002278 <MX_TIM2_Init+0xec>)
 8002214:	f003 fb5e 	bl	80058d4 <HAL_TIM_PWM_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800221e:	f7ff fd4b 	bl	8001cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002222:	2320      	movs	r3, #32
 8002224:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800222a:	f107 031c 	add.w	r3, r7, #28
 800222e:	4619      	mov	r1, r3
 8002230:	4811      	ldr	r0, [pc, #68]	; (8002278 <MX_TIM2_Init+0xec>)
 8002232:	f004 fce1 	bl	8006bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800223c:	f7ff fd3c 	bl	8001cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002240:	2360      	movs	r3, #96	; 0x60
 8002242:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8002244:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002248:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800224a:	2300      	movs	r3, #0
 800224c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002252:	463b      	mov	r3, r7
 8002254:	2200      	movs	r2, #0
 8002256:	4619      	mov	r1, r3
 8002258:	4807      	ldr	r0, [pc, #28]	; (8002278 <MX_TIM2_Init+0xec>)
 800225a:	f003 fe13 	bl	8005e84 <HAL_TIM_PWM_ConfigChannel>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8002264:	f7ff fd28 	bl	8001cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002268:	4803      	ldr	r0, [pc, #12]	; (8002278 <MX_TIM2_Init+0xec>)
 800226a:	f000 f973 	bl	8002554 <HAL_TIM_MspPostInit>

}
 800226e:	bf00      	nop
 8002270:	3738      	adds	r7, #56	; 0x38
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000484 	.word	0x20000484

0800227c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002282:	f107 030c 	add.w	r3, r7, #12
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	605a      	str	r2, [r3, #4]
 800228c:	609a      	str	r2, [r3, #8]
 800228e:	60da      	str	r2, [r3, #12]
 8002290:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002292:	463b      	mov	r3, r7
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800229c:	4b1f      	ldr	r3, [pc, #124]	; (800231c <MX_TIM15_Init+0xa0>)
 800229e:	4a20      	ldr	r2, [pc, #128]	; (8002320 <MX_TIM15_Init+0xa4>)
 80022a0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80022a2:	4b1e      	ldr	r3, [pc, #120]	; (800231c <MX_TIM15_Init+0xa0>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a8:	4b1c      	ldr	r3, [pc, #112]	; (800231c <MX_TIM15_Init+0xa0>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1976 - 1;
 80022ae:	4b1b      	ldr	r3, [pc, #108]	; (800231c <MX_TIM15_Init+0xa0>)
 80022b0:	f240 72b7 	movw	r2, #1975	; 0x7b7
 80022b4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b6:	4b19      	ldr	r3, [pc, #100]	; (800231c <MX_TIM15_Init+0xa0>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80022bc:	4b17      	ldr	r3, [pc, #92]	; (800231c <MX_TIM15_Init+0xa0>)
 80022be:	2200      	movs	r2, #0
 80022c0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022c2:	4b16      	ldr	r3, [pc, #88]	; (800231c <MX_TIM15_Init+0xa0>)
 80022c4:	2280      	movs	r2, #128	; 0x80
 80022c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80022c8:	4814      	ldr	r0, [pc, #80]	; (800231c <MX_TIM15_Init+0xa0>)
 80022ca:	f003 fa57 	bl	800577c <HAL_TIM_Base_Init>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 80022d4:	f7ff fcf0 	bl	8001cb8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80022d8:	2307      	movs	r3, #7
 80022da:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80022dc:	2300      	movs	r3, #0
 80022de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 80022e0:	f107 030c 	add.w	r3, r7, #12
 80022e4:	4619      	mov	r1, r3
 80022e6:	480d      	ldr	r0, [pc, #52]	; (800231c <MX_TIM15_Init+0xa0>)
 80022e8:	f003 ffa9 	bl	800623e <HAL_TIM_SlaveConfigSynchro>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_TIM15_Init+0x7a>
  {
    Error_Handler();
 80022f2:	f7ff fce1 	bl	8001cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f6:	2300      	movs	r3, #0
 80022f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022fa:	2300      	movs	r3, #0
 80022fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80022fe:	463b      	mov	r3, r7
 8002300:	4619      	mov	r1, r3
 8002302:	4806      	ldr	r0, [pc, #24]	; (800231c <MX_TIM15_Init+0xa0>)
 8002304:	f004 fc78 	bl	8006bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM15_Init+0x96>
  {
    Error_Handler();
 800230e:	f7ff fcd3 	bl	8001cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002312:	bf00      	nop
 8002314:	3720      	adds	r7, #32
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	200004d0 	.word	0x200004d0
 8002320:	40014000 	.word	0x40014000

08002324 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b092      	sub	sp, #72	; 0x48
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800232a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	609a      	str	r2, [r3, #8]
 8002336:	60da      	str	r2, [r3, #12]
 8002338:	611a      	str	r2, [r3, #16]
 800233a:	615a      	str	r2, [r3, #20]
 800233c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800233e:	463b      	mov	r3, r7
 8002340:	222c      	movs	r2, #44	; 0x2c
 8002342:	2100      	movs	r1, #0
 8002344:	4618      	mov	r0, r3
 8002346:	f008 fcba 	bl	800acbe <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800234a:	4b31      	ldr	r3, [pc, #196]	; (8002410 <MX_TIM16_Init+0xec>)
 800234c:	4a31      	ldr	r2, [pc, #196]	; (8002414 <MX_TIM16_Init+0xf0>)
 800234e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63;
 8002350:	4b2f      	ldr	r3, [pc, #188]	; (8002410 <MX_TIM16_Init+0xec>)
 8002352:	223f      	movs	r2, #63	; 0x3f
 8002354:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002356:	4b2e      	ldr	r3, [pc, #184]	; (8002410 <MX_TIM16_Init+0xec>)
 8002358:	2200      	movs	r2, #0
 800235a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1999;
 800235c:	4b2c      	ldr	r3, [pc, #176]	; (8002410 <MX_TIM16_Init+0xec>)
 800235e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002362:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002364:	4b2a      	ldr	r3, [pc, #168]	; (8002410 <MX_TIM16_Init+0xec>)
 8002366:	2200      	movs	r2, #0
 8002368:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800236a:	4b29      	ldr	r3, [pc, #164]	; (8002410 <MX_TIM16_Init+0xec>)
 800236c:	2200      	movs	r2, #0
 800236e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002370:	4b27      	ldr	r3, [pc, #156]	; (8002410 <MX_TIM16_Init+0xec>)
 8002372:	2200      	movs	r2, #0
 8002374:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002376:	4826      	ldr	r0, [pc, #152]	; (8002410 <MX_TIM16_Init+0xec>)
 8002378:	f003 fa00 	bl	800577c <HAL_TIM_Base_Init>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002382:	f7ff fc99 	bl	8001cb8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002386:	4822      	ldr	r0, [pc, #136]	; (8002410 <MX_TIM16_Init+0xec>)
 8002388:	f003 faa4 	bl	80058d4 <HAL_TIM_PWM_Init>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002392:	f7ff fc91 	bl	8001cb8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002396:	2360      	movs	r3, #96	; 0x60
 8002398:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 1000;
 800239a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800239e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023a0:	2300      	movs	r3, #0
 80023a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023a4:	2300      	movs	r3, #0
 80023a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023ac:	2300      	movs	r3, #0
 80023ae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023b0:	2300      	movs	r3, #0
 80023b2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023b8:	2200      	movs	r2, #0
 80023ba:	4619      	mov	r1, r3
 80023bc:	4814      	ldr	r0, [pc, #80]	; (8002410 <MX_TIM16_Init+0xec>)
 80023be:	f003 fd61 	bl	8005e84 <HAL_TIM_PWM_ConfigChannel>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 80023c8:	f7ff fc76 	bl	8001cb8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023cc:	2300      	movs	r3, #0
 80023ce:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023d0:	2300      	movs	r3, #0
 80023d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023d4:	2300      	movs	r3, #0
 80023d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023dc:	2300      	movs	r3, #0
 80023de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023ea:	2300      	movs	r3, #0
 80023ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80023ee:	463b      	mov	r3, r7
 80023f0:	4619      	mov	r1, r3
 80023f2:	4807      	ldr	r0, [pc, #28]	; (8002410 <MX_TIM16_Init+0xec>)
 80023f4:	f004 fc66 	bl	8006cc4 <HAL_TIMEx_ConfigBreakDeadTime>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 80023fe:	f7ff fc5b 	bl	8001cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002402:	4803      	ldr	r0, [pc, #12]	; (8002410 <MX_TIM16_Init+0xec>)
 8002404:	f000 f8a6 	bl	8002554 <HAL_TIM_MspPostInit>

}
 8002408:	bf00      	nop
 800240a:	3748      	adds	r7, #72	; 0x48
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	2000051c 	.word	0x2000051c
 8002414:	40014400 	.word	0x40014400

08002418 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b08c      	sub	sp, #48	; 0x30
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002420:	f107 031c 	add.w	r3, r7, #28
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	60da      	str	r2, [r3, #12]
 800242e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a43      	ldr	r2, [pc, #268]	; (8002544 <HAL_TIM_Base_MspInit+0x12c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d13a      	bne.n	80024b0 <HAL_TIM_Base_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800243a:	4b43      	ldr	r3, [pc, #268]	; (8002548 <HAL_TIM_Base_MspInit+0x130>)
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	4a42      	ldr	r2, [pc, #264]	; (8002548 <HAL_TIM_Base_MspInit+0x130>)
 8002440:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002444:	6193      	str	r3, [r2, #24]
 8002446:	4b40      	ldr	r3, [pc, #256]	; (8002548 <HAL_TIM_Base_MspInit+0x130>)
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800244e:	61bb      	str	r3, [r7, #24]
 8002450:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002452:	4b3d      	ldr	r3, [pc, #244]	; (8002548 <HAL_TIM_Base_MspInit+0x130>)
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	4a3c      	ldr	r2, [pc, #240]	; (8002548 <HAL_TIM_Base_MspInit+0x130>)
 8002458:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800245c:	6153      	str	r3, [r2, #20]
 800245e:	4b3a      	ldr	r3, [pc, #232]	; (8002548 <HAL_TIM_Base_MspInit+0x130>)
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002466:	617b      	str	r3, [r7, #20]
 8002468:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA12     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = HORIZONTAL_ROUTES_COUNTER_Pin;
 800246a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800246e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002478:	2300      	movs	r3, #0
 800247a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 800247c:	230b      	movs	r3, #11
 800247e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HORIZONTAL_ROUTES_COUNTER_GPIO_Port, &GPIO_InitStruct);
 8002480:	f107 031c 	add.w	r3, r7, #28
 8002484:	4619      	mov	r1, r3
 8002486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800248a:	f001 fb9b 	bl	8003bc4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 800248e:	2200      	movs	r2, #0
 8002490:	2105      	movs	r1, #5
 8002492:	2018      	movs	r0, #24
 8002494:	f001 f958 	bl	8003748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002498:	2018      	movs	r0, #24
 800249a:	f001 f971 	bl	8003780 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 800249e:	2200      	movs	r2, #0
 80024a0:	2105      	movs	r1, #5
 80024a2:	2019      	movs	r0, #25
 80024a4:	f001 f950 	bl	8003748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80024a8:	2019      	movs	r0, #25
 80024aa:	f001 f969 	bl	8003780 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80024ae:	e044      	b.n	800253a <HAL_TIM_Base_MspInit+0x122>
  else if(tim_baseHandle->Instance==TIM2)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b8:	d10c      	bne.n	80024d4 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024ba:	4b23      	ldr	r3, [pc, #140]	; (8002548 <HAL_TIM_Base_MspInit+0x130>)
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	4a22      	ldr	r2, [pc, #136]	; (8002548 <HAL_TIM_Base_MspInit+0x130>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	61d3      	str	r3, [r2, #28]
 80024c6:	4b20      	ldr	r3, [pc, #128]	; (8002548 <HAL_TIM_Base_MspInit+0x130>)
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	613b      	str	r3, [r7, #16]
 80024d0:	693b      	ldr	r3, [r7, #16]
}
 80024d2:	e032      	b.n	800253a <HAL_TIM_Base_MspInit+0x122>
  else if(tim_baseHandle->Instance==TIM15)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a1c      	ldr	r2, [pc, #112]	; (800254c <HAL_TIM_Base_MspInit+0x134>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d114      	bne.n	8002508 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80024de:	4b1a      	ldr	r3, [pc, #104]	; (8002548 <HAL_TIM_Base_MspInit+0x130>)
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	4a19      	ldr	r2, [pc, #100]	; (8002548 <HAL_TIM_Base_MspInit+0x130>)
 80024e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e8:	6193      	str	r3, [r2, #24]
 80024ea:	4b17      	ldr	r3, [pc, #92]	; (8002548 <HAL_TIM_Base_MspInit+0x130>)
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 80024f6:	2200      	movs	r2, #0
 80024f8:	2105      	movs	r1, #5
 80024fa:	2018      	movs	r0, #24
 80024fc:	f001 f924 	bl	8003748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002500:	2018      	movs	r0, #24
 8002502:	f001 f93d 	bl	8003780 <HAL_NVIC_EnableIRQ>
}
 8002506:	e018      	b.n	800253a <HAL_TIM_Base_MspInit+0x122>
  else if(tim_baseHandle->Instance==TIM16)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a10      	ldr	r2, [pc, #64]	; (8002550 <HAL_TIM_Base_MspInit+0x138>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d113      	bne.n	800253a <HAL_TIM_Base_MspInit+0x122>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002512:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <HAL_TIM_Base_MspInit+0x130>)
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	4a0c      	ldr	r2, [pc, #48]	; (8002548 <HAL_TIM_Base_MspInit+0x130>)
 8002518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800251c:	6193      	str	r3, [r2, #24]
 800251e:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <HAL_TIM_Base_MspInit+0x130>)
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 5, 0);
 800252a:	2200      	movs	r2, #0
 800252c:	2105      	movs	r1, #5
 800252e:	2019      	movs	r0, #25
 8002530:	f001 f90a 	bl	8003748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002534:	2019      	movs	r0, #25
 8002536:	f001 f923 	bl	8003780 <HAL_NVIC_EnableIRQ>
}
 800253a:	bf00      	nop
 800253c:	3730      	adds	r7, #48	; 0x30
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40012c00 	.word	0x40012c00
 8002548:	40021000 	.word	0x40021000
 800254c:	40014000 	.word	0x40014000
 8002550:	40014400 	.word	0x40014400

08002554 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b08a      	sub	sp, #40	; 0x28
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	f107 0314 	add.w	r3, r7, #20
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002574:	d11d      	bne.n	80025b2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002576:	4b22      	ldr	r3, [pc, #136]	; (8002600 <HAL_TIM_MspPostInit+0xac>)
 8002578:	695b      	ldr	r3, [r3, #20]
 800257a:	4a21      	ldr	r2, [pc, #132]	; (8002600 <HAL_TIM_MspPostInit+0xac>)
 800257c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002580:	6153      	str	r3, [r2, #20]
 8002582:	4b1f      	ldr	r3, [pc, #124]	; (8002600 <HAL_TIM_MspPostInit+0xac>)
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = STEP_HORIZONTAL_Pin;
 800258e:	2301      	movs	r3, #1
 8002590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002592:	2302      	movs	r3, #2
 8002594:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002596:	2302      	movs	r3, #2
 8002598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259a:	2300      	movs	r3, #0
 800259c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800259e:	2301      	movs	r3, #1
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP_HORIZONTAL_GPIO_Port, &GPIO_InitStruct);
 80025a2:	f107 0314 	add.w	r3, r7, #20
 80025a6:	4619      	mov	r1, r3
 80025a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ac:	f001 fb0a 	bl	8003bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80025b0:	e021      	b.n	80025f6 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM16)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a13      	ldr	r2, [pc, #76]	; (8002604 <HAL_TIM_MspPostInit+0xb0>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d11c      	bne.n	80025f6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025bc:	4b10      	ldr	r3, [pc, #64]	; (8002600 <HAL_TIM_MspPostInit+0xac>)
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	4a0f      	ldr	r2, [pc, #60]	; (8002600 <HAL_TIM_MspPostInit+0xac>)
 80025c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025c6:	6153      	str	r3, [r2, #20]
 80025c8:	4b0d      	ldr	r3, [pc, #52]	; (8002600 <HAL_TIM_MspPostInit+0xac>)
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_VERTICAL_Pin;
 80025d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025da:	2302      	movs	r3, #2
 80025dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80025de:	2302      	movs	r3, #2
 80025e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e2:	2300      	movs	r3, #0
 80025e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80025e6:	2301      	movs	r3, #1
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(STEP_VERTICAL_GPIO_Port, &GPIO_InitStruct);
 80025ea:	f107 0314 	add.w	r3, r7, #20
 80025ee:	4619      	mov	r1, r3
 80025f0:	4805      	ldr	r0, [pc, #20]	; (8002608 <HAL_TIM_MspPostInit+0xb4>)
 80025f2:	f001 fae7 	bl	8003bc4 <HAL_GPIO_Init>
}
 80025f6:	bf00      	nop
 80025f8:	3728      	adds	r7, #40	; 0x28
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000
 8002604:	40014400 	.word	0x40014400
 8002608:	48000400 	.word	0x48000400

0800260c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002610:	4b14      	ldr	r3, [pc, #80]	; (8002664 <MX_USART1_UART_Init+0x58>)
 8002612:	4a15      	ldr	r2, [pc, #84]	; (8002668 <MX_USART1_UART_Init+0x5c>)
 8002614:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002616:	4b13      	ldr	r3, [pc, #76]	; (8002664 <MX_USART1_UART_Init+0x58>)
 8002618:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800261c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800261e:	4b11      	ldr	r3, [pc, #68]	; (8002664 <MX_USART1_UART_Init+0x58>)
 8002620:	2200      	movs	r2, #0
 8002622:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002624:	4b0f      	ldr	r3, [pc, #60]	; (8002664 <MX_USART1_UART_Init+0x58>)
 8002626:	2200      	movs	r2, #0
 8002628:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800262a:	4b0e      	ldr	r3, [pc, #56]	; (8002664 <MX_USART1_UART_Init+0x58>)
 800262c:	2200      	movs	r2, #0
 800262e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002630:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <MX_USART1_UART_Init+0x58>)
 8002632:	220c      	movs	r2, #12
 8002634:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002636:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <MX_USART1_UART_Init+0x58>)
 8002638:	2200      	movs	r2, #0
 800263a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800263c:	4b09      	ldr	r3, [pc, #36]	; (8002664 <MX_USART1_UART_Init+0x58>)
 800263e:	2200      	movs	r2, #0
 8002640:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002642:	4b08      	ldr	r3, [pc, #32]	; (8002664 <MX_USART1_UART_Init+0x58>)
 8002644:	2200      	movs	r2, #0
 8002646:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <MX_USART1_UART_Init+0x58>)
 800264a:	2200      	movs	r2, #0
 800264c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800264e:	4805      	ldr	r0, [pc, #20]	; (8002664 <MX_USART1_UART_Init+0x58>)
 8002650:	f004 fbce 	bl	8006df0 <HAL_UART_Init>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800265a:	f7ff fb2d 	bl	8001cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800265e:	bf00      	nop
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000568 	.word	0x20000568
 8002668:	40013800 	.word	0x40013800

0800266c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002670:	4b14      	ldr	r3, [pc, #80]	; (80026c4 <MX_USART2_UART_Init+0x58>)
 8002672:	4a15      	ldr	r2, [pc, #84]	; (80026c8 <MX_USART2_UART_Init+0x5c>)
 8002674:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002676:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <MX_USART2_UART_Init+0x58>)
 8002678:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800267c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800267e:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <MX_USART2_UART_Init+0x58>)
 8002680:	2200      	movs	r2, #0
 8002682:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002684:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <MX_USART2_UART_Init+0x58>)
 8002686:	2200      	movs	r2, #0
 8002688:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800268a:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <MX_USART2_UART_Init+0x58>)
 800268c:	2200      	movs	r2, #0
 800268e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002690:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <MX_USART2_UART_Init+0x58>)
 8002692:	220c      	movs	r2, #12
 8002694:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002696:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <MX_USART2_UART_Init+0x58>)
 8002698:	2200      	movs	r2, #0
 800269a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800269c:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <MX_USART2_UART_Init+0x58>)
 800269e:	2200      	movs	r2, #0
 80026a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026a2:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <MX_USART2_UART_Init+0x58>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026a8:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <MX_USART2_UART_Init+0x58>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026ae:	4805      	ldr	r0, [pc, #20]	; (80026c4 <MX_USART2_UART_Init+0x58>)
 80026b0:	f004 fb9e 	bl	8006df0 <HAL_UART_Init>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80026ba:	f7ff fafd 	bl	8001cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026be:	bf00      	nop
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	200005f0 	.word	0x200005f0
 80026c8:	40004400 	.word	0x40004400

080026cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08c      	sub	sp, #48	; 0x30
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d4:	f107 031c 	add.w	r3, r7, #28
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	60da      	str	r2, [r3, #12]
 80026e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a70      	ldr	r2, [pc, #448]	; (80028ac <HAL_UART_MspInit+0x1e0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d17e      	bne.n	80027ec <HAL_UART_MspInit+0x120>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80026ee:	4b70      	ldr	r3, [pc, #448]	; (80028b0 <HAL_UART_MspInit+0x1e4>)
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	4a6f      	ldr	r2, [pc, #444]	; (80028b0 <HAL_UART_MspInit+0x1e4>)
 80026f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026f8:	6193      	str	r3, [r2, #24]
 80026fa:	4b6d      	ldr	r3, [pc, #436]	; (80028b0 <HAL_UART_MspInit+0x1e4>)
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002702:	61bb      	str	r3, [r7, #24]
 8002704:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002706:	4b6a      	ldr	r3, [pc, #424]	; (80028b0 <HAL_UART_MspInit+0x1e4>)
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	4a69      	ldr	r2, [pc, #420]	; (80028b0 <HAL_UART_MspInit+0x1e4>)
 800270c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002710:	6153      	str	r3, [r2, #20]
 8002712:	4b67      	ldr	r3, [pc, #412]	; (80028b0 <HAL_UART_MspInit+0x1e4>)
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800271e:	2330      	movs	r3, #48	; 0x30
 8002720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002722:	2302      	movs	r3, #2
 8002724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800272a:	2303      	movs	r3, #3
 800272c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800272e:	2307      	movs	r3, #7
 8002730:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002732:	f107 031c 	add.w	r3, r7, #28
 8002736:	4619      	mov	r1, r3
 8002738:	485e      	ldr	r0, [pc, #376]	; (80028b4 <HAL_UART_MspInit+0x1e8>)
 800273a:	f001 fa43 	bl	8003bc4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800273e:	4b5e      	ldr	r3, [pc, #376]	; (80028b8 <HAL_UART_MspInit+0x1ec>)
 8002740:	4a5e      	ldr	r2, [pc, #376]	; (80028bc <HAL_UART_MspInit+0x1f0>)
 8002742:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002744:	4b5c      	ldr	r3, [pc, #368]	; (80028b8 <HAL_UART_MspInit+0x1ec>)
 8002746:	2200      	movs	r2, #0
 8002748:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800274a:	4b5b      	ldr	r3, [pc, #364]	; (80028b8 <HAL_UART_MspInit+0x1ec>)
 800274c:	2200      	movs	r2, #0
 800274e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002750:	4b59      	ldr	r3, [pc, #356]	; (80028b8 <HAL_UART_MspInit+0x1ec>)
 8002752:	2280      	movs	r2, #128	; 0x80
 8002754:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002756:	4b58      	ldr	r3, [pc, #352]	; (80028b8 <HAL_UART_MspInit+0x1ec>)
 8002758:	2200      	movs	r2, #0
 800275a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800275c:	4b56      	ldr	r3, [pc, #344]	; (80028b8 <HAL_UART_MspInit+0x1ec>)
 800275e:	2200      	movs	r2, #0
 8002760:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002762:	4b55      	ldr	r3, [pc, #340]	; (80028b8 <HAL_UART_MspInit+0x1ec>)
 8002764:	2200      	movs	r2, #0
 8002766:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002768:	4b53      	ldr	r3, [pc, #332]	; (80028b8 <HAL_UART_MspInit+0x1ec>)
 800276a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800276e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002770:	4851      	ldr	r0, [pc, #324]	; (80028b8 <HAL_UART_MspInit+0x1ec>)
 8002772:	f001 f813 	bl	800379c <HAL_DMA_Init>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 800277c:	f7ff fa9c 	bl	8001cb8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a4d      	ldr	r2, [pc, #308]	; (80028b8 <HAL_UART_MspInit+0x1ec>)
 8002784:	675a      	str	r2, [r3, #116]	; 0x74
 8002786:	4a4c      	ldr	r2, [pc, #304]	; (80028b8 <HAL_UART_MspInit+0x1ec>)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800278c:	4b4c      	ldr	r3, [pc, #304]	; (80028c0 <HAL_UART_MspInit+0x1f4>)
 800278e:	4a4d      	ldr	r2, [pc, #308]	; (80028c4 <HAL_UART_MspInit+0x1f8>)
 8002790:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002792:	4b4b      	ldr	r3, [pc, #300]	; (80028c0 <HAL_UART_MspInit+0x1f4>)
 8002794:	2210      	movs	r2, #16
 8002796:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002798:	4b49      	ldr	r3, [pc, #292]	; (80028c0 <HAL_UART_MspInit+0x1f4>)
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800279e:	4b48      	ldr	r3, [pc, #288]	; (80028c0 <HAL_UART_MspInit+0x1f4>)
 80027a0:	2280      	movs	r2, #128	; 0x80
 80027a2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027a4:	4b46      	ldr	r3, [pc, #280]	; (80028c0 <HAL_UART_MspInit+0x1f4>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027aa:	4b45      	ldr	r3, [pc, #276]	; (80028c0 <HAL_UART_MspInit+0x1f4>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80027b0:	4b43      	ldr	r3, [pc, #268]	; (80028c0 <HAL_UART_MspInit+0x1f4>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80027b6:	4b42      	ldr	r3, [pc, #264]	; (80028c0 <HAL_UART_MspInit+0x1f4>)
 80027b8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80027bc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80027be:	4840      	ldr	r0, [pc, #256]	; (80028c0 <HAL_UART_MspInit+0x1f4>)
 80027c0:	f000 ffec 	bl	800379c <HAL_DMA_Init>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 80027ca:	f7ff fa75 	bl	8001cb8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a3b      	ldr	r2, [pc, #236]	; (80028c0 <HAL_UART_MspInit+0x1f4>)
 80027d2:	671a      	str	r2, [r3, #112]	; 0x70
 80027d4:	4a3a      	ldr	r2, [pc, #232]	; (80028c0 <HAL_UART_MspInit+0x1f4>)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80027da:	2200      	movs	r2, #0
 80027dc:	2105      	movs	r1, #5
 80027de:	2025      	movs	r0, #37	; 0x25
 80027e0:	f000 ffb2 	bl	8003748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027e4:	2025      	movs	r0, #37	; 0x25
 80027e6:	f000 ffcb 	bl	8003780 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80027ea:	e05b      	b.n	80028a4 <HAL_UART_MspInit+0x1d8>
  else if(uartHandle->Instance==USART2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a35      	ldr	r2, [pc, #212]	; (80028c8 <HAL_UART_MspInit+0x1fc>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d156      	bne.n	80028a4 <HAL_UART_MspInit+0x1d8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027f6:	4b2e      	ldr	r3, [pc, #184]	; (80028b0 <HAL_UART_MspInit+0x1e4>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	4a2d      	ldr	r2, [pc, #180]	; (80028b0 <HAL_UART_MspInit+0x1e4>)
 80027fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002800:	61d3      	str	r3, [r2, #28]
 8002802:	4b2b      	ldr	r3, [pc, #172]	; (80028b0 <HAL_UART_MspInit+0x1e4>)
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280e:	4b28      	ldr	r3, [pc, #160]	; (80028b0 <HAL_UART_MspInit+0x1e4>)
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	4a27      	ldr	r2, [pc, #156]	; (80028b0 <HAL_UART_MspInit+0x1e4>)
 8002814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002818:	6153      	str	r3, [r2, #20]
 800281a:	4b25      	ldr	r3, [pc, #148]	; (80028b0 <HAL_UART_MspInit+0x1e4>)
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002826:	230c      	movs	r3, #12
 8002828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282a:	2302      	movs	r3, #2
 800282c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282e:	2300      	movs	r3, #0
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002832:	2300      	movs	r3, #0
 8002834:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002836:	2307      	movs	r3, #7
 8002838:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283a:	f107 031c 	add.w	r3, r7, #28
 800283e:	4619      	mov	r1, r3
 8002840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002844:	f001 f9be 	bl	8003bc4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002848:	4b20      	ldr	r3, [pc, #128]	; (80028cc <HAL_UART_MspInit+0x200>)
 800284a:	4a21      	ldr	r2, [pc, #132]	; (80028d0 <HAL_UART_MspInit+0x204>)
 800284c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800284e:	4b1f      	ldr	r3, [pc, #124]	; (80028cc <HAL_UART_MspInit+0x200>)
 8002850:	2200      	movs	r2, #0
 8002852:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002854:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <HAL_UART_MspInit+0x200>)
 8002856:	2200      	movs	r2, #0
 8002858:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800285a:	4b1c      	ldr	r3, [pc, #112]	; (80028cc <HAL_UART_MspInit+0x200>)
 800285c:	2280      	movs	r2, #128	; 0x80
 800285e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002860:	4b1a      	ldr	r3, [pc, #104]	; (80028cc <HAL_UART_MspInit+0x200>)
 8002862:	2200      	movs	r2, #0
 8002864:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002866:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_UART_MspInit+0x200>)
 8002868:	2200      	movs	r2, #0
 800286a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800286c:	4b17      	ldr	r3, [pc, #92]	; (80028cc <HAL_UART_MspInit+0x200>)
 800286e:	2200      	movs	r2, #0
 8002870:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002872:	4b16      	ldr	r3, [pc, #88]	; (80028cc <HAL_UART_MspInit+0x200>)
 8002874:	2200      	movs	r2, #0
 8002876:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002878:	4814      	ldr	r0, [pc, #80]	; (80028cc <HAL_UART_MspInit+0x200>)
 800287a:	f000 ff8f 	bl	800379c <HAL_DMA_Init>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_UART_MspInit+0x1bc>
      Error_Handler();
 8002884:	f7ff fa18 	bl	8001cb8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a10      	ldr	r2, [pc, #64]	; (80028cc <HAL_UART_MspInit+0x200>)
 800288c:	675a      	str	r2, [r3, #116]	; 0x74
 800288e:	4a0f      	ldr	r2, [pc, #60]	; (80028cc <HAL_UART_MspInit+0x200>)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002894:	2200      	movs	r2, #0
 8002896:	2105      	movs	r1, #5
 8002898:	2026      	movs	r0, #38	; 0x26
 800289a:	f000 ff55 	bl	8003748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800289e:	2026      	movs	r0, #38	; 0x26
 80028a0:	f000 ff6e 	bl	8003780 <HAL_NVIC_EnableIRQ>
}
 80028a4:	bf00      	nop
 80028a6:	3730      	adds	r7, #48	; 0x30
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40013800 	.word	0x40013800
 80028b0:	40021000 	.word	0x40021000
 80028b4:	48000800 	.word	0x48000800
 80028b8:	20000678 	.word	0x20000678
 80028bc:	40020058 	.word	0x40020058
 80028c0:	200006bc 	.word	0x200006bc
 80028c4:	40020044 	.word	0x40020044
 80028c8:	40004400 	.word	0x40004400
 80028cc:	20000700 	.word	0x20000700
 80028d0:	4002006c 	.word	0x4002006c

080028d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80028d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800290c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80028d8:	f7ff fbec 	bl	80020b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028dc:	480c      	ldr	r0, [pc, #48]	; (8002910 <LoopForever+0x6>)
  ldr r1, =_edata
 80028de:	490d      	ldr	r1, [pc, #52]	; (8002914 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028e0:	4a0d      	ldr	r2, [pc, #52]	; (8002918 <LoopForever+0xe>)
  movs r3, #0
 80028e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e4:	e002      	b.n	80028ec <LoopCopyDataInit>

080028e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ea:	3304      	adds	r3, #4

080028ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f0:	d3f9      	bcc.n	80028e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028f2:	4a0a      	ldr	r2, [pc, #40]	; (800291c <LoopForever+0x12>)
  ldr r4, =_ebss
 80028f4:	4c0a      	ldr	r4, [pc, #40]	; (8002920 <LoopForever+0x16>)
  movs r3, #0
 80028f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028f8:	e001      	b.n	80028fe <LoopFillZerobss>

080028fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028fc:	3204      	adds	r2, #4

080028fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002900:	d3fb      	bcc.n	80028fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002902:	f008 fa8d 	bl	800ae20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002906:	f7ff f907 	bl	8001b18 <main>

0800290a <LoopForever>:

LoopForever:
    b LoopForever
 800290a:	e7fe      	b.n	800290a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800290c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002914:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002918:	0800c158 	.word	0x0800c158
  ldr r2, =_sbss
 800291c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002920:	20002150 	.word	0x20002150

08002924 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002924:	e7fe      	b.n	8002924 <ADC1_IRQHandler>
	...

08002928 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800292c:	4b08      	ldr	r3, [pc, #32]	; (8002950 <HAL_Init+0x28>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a07      	ldr	r2, [pc, #28]	; (8002950 <HAL_Init+0x28>)
 8002932:	f043 0310 	orr.w	r3, r3, #16
 8002936:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002938:	2003      	movs	r0, #3
 800293a:	f000 fefa 	bl	8003732 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800293e:	200f      	movs	r0, #15
 8002940:	f7ff f9e8 	bl	8001d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002944:	f7ff f9be 	bl	8001cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40022000 	.word	0x40022000

08002954 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002958:	4b06      	ldr	r3, [pc, #24]	; (8002974 <HAL_IncTick+0x20>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_IncTick+0x24>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4413      	add	r3, r2
 8002964:	4a04      	ldr	r2, [pc, #16]	; (8002978 <HAL_IncTick+0x24>)
 8002966:	6013      	str	r3, [r2, #0]
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	20000014 	.word	0x20000014
 8002978:	20000744 	.word	0x20000744

0800297c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002980:	4b03      	ldr	r3, [pc, #12]	; (8002990 <HAL_GetTick+0x14>)
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	20000744 	.word	0x20000744

08002994 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b09a      	sub	sp, #104	; 0x68
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029d8:	2300      	movs	r3, #0
 80029da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80029de:	2300      	movs	r3, #0
 80029e0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e169      	b.n	8002cc4 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f003 0310 	and.w	r3, r3, #16
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d176      	bne.n	8002af0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d152      	bne.n	8002ab0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7fe fcfb 	bl	8001420 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d13b      	bne.n	8002ab0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 fd67 	bl	800350c <ADC_Disable>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d12f      	bne.n	8002ab0 <HAL_ADC_Init+0xe0>
 8002a50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d12b      	bne.n	8002ab0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a60:	f023 0302 	bic.w	r3, r3, #2
 8002a64:	f043 0202 	orr.w	r2, r3, #2
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a7a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a8a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a8c:	4b8f      	ldr	r3, [pc, #572]	; (8002ccc <HAL_ADC_Init+0x2fc>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a8f      	ldr	r2, [pc, #572]	; (8002cd0 <HAL_ADC_Init+0x300>)
 8002a92:	fba2 2303 	umull	r2, r3, r2, r3
 8002a96:	0c9a      	lsrs	r2, r3, #18
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002aa2:	e002      	b.n	8002aaa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1f9      	bne.n	8002aa4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d007      	beq.n	8002ace <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002ac8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002acc:	d110      	bne.n	8002af0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f023 0312 	bic.w	r3, r3, #18
 8002ad6:	f043 0210 	orr.w	r2, r3, #16
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae2:	f043 0201 	orr.w	r2, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f040 80d6 	bne.w	8002caa <HAL_ADC_Init+0x2da>
 8002afe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f040 80d1 	bne.w	8002caa <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f040 80c9 	bne.w	8002caa <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002b20:	f043 0202 	orr.w	r2, r3, #2
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b28:	4b6a      	ldr	r3, [pc, #424]	; (8002cd4 <HAL_ADC_Init+0x304>)
 8002b2a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d108      	bne.n	8002b50 <HAL_ADC_Init+0x180>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_ADC_Init+0x180>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e000      	b.n	8002b52 <HAL_ADC_Init+0x182>
 8002b50:	2300      	movs	r3, #0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d11c      	bne.n	8002b90 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b56:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d010      	beq.n	8002b7e <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 0303 	and.w	r3, r3, #3
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d107      	bne.n	8002b78 <HAL_ADC_Init+0x1a8>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d101      	bne.n	8002b78 <HAL_ADC_Init+0x1a8>
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <HAL_ADC_Init+0x1aa>
 8002b78:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d108      	bne.n	8002b90 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b8e:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	7e5b      	ldrb	r3, [r3, #25]
 8002b94:	035b      	lsls	r3, r3, #13
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b9a:	2a01      	cmp	r2, #1
 8002b9c:	d002      	beq.n	8002ba4 <HAL_ADC_Init+0x1d4>
 8002b9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ba2:	e000      	b.n	8002ba6 <HAL_ADC_Init+0x1d6>
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	431a      	orrs	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d11b      	bne.n	8002bfc <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	7e5b      	ldrb	r3, [r3, #25]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d109      	bne.n	8002be0 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	045a      	lsls	r2, r3, #17
 8002bd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bdc:	663b      	str	r3, [r7, #96]	; 0x60
 8002bde:	e00d      	b.n	8002bfc <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002be8:	f043 0220 	orr.w	r2, r3, #32
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf4:	f043 0201 	orr.w	r2, r3, #1
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d007      	beq.n	8002c14 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c10:	4313      	orrs	r3, r2
 8002c12:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d114      	bne.n	8002c4c <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6812      	ldr	r2, [r2, #0]
 8002c2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c30:	f023 0302 	bic.w	r3, r3, #2
 8002c34:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	7e1b      	ldrb	r3, [r3, #24]
 8002c3a:	039a      	lsls	r2, r3, #14
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	4313      	orrs	r3, r2
 8002c46:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	4b21      	ldr	r3, [pc, #132]	; (8002cd8 <HAL_ADC_Init+0x308>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d10c      	bne.n	8002c82 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	f023 010f 	bic.w	r1, r3, #15
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	1e5a      	subs	r2, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
 8002c80:	e007      	b.n	8002c92 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f022 020f 	bic.w	r2, r2, #15
 8002c90:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9c:	f023 0303 	bic.w	r3, r3, #3
 8002ca0:	f043 0201 	orr.w	r2, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	641a      	str	r2, [r3, #64]	; 0x40
 8002ca8:	e00a      	b.n	8002cc0 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f023 0312 	bic.w	r3, r3, #18
 8002cb2:	f043 0210 	orr.w	r2, r3, #16
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002cba:	2301      	movs	r3, #1
 8002cbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002cc0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3768      	adds	r7, #104	; 0x68
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	2000000c 	.word	0x2000000c
 8002cd0:	431bde83 	.word	0x431bde83
 8002cd4:	50000300 	.word	0x50000300
 8002cd8:	fff0c007 	.word	0xfff0c007

08002cdc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d17e      	bne.n	8002df8 <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_ADC_Start_DMA+0x2c>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e07a      	b.n	8002dfe <HAL_ADC_Start_DMA+0x122>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 fb97 	bl	8003444 <ADC_Enable>
 8002d16:	4603      	mov	r3, r0
 8002d18:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002d1a:	7dfb      	ldrb	r3, [r7, #23]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d166      	bne.n	8002dee <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d28:	f023 0301 	bic.w	r3, r3, #1
 8002d2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d007      	beq.n	8002d5e <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d56:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d6a:	d106      	bne.n	8002d7a <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d70:	f023 0206 	bic.w	r2, r3, #6
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	645a      	str	r2, [r3, #68]	; 0x44
 8002d78:	e002      	b.n	8002d80 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8c:	4a1e      	ldr	r2, [pc, #120]	; (8002e08 <HAL_ADC_Start_DMA+0x12c>)
 8002d8e:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d94:	4a1d      	ldr	r2, [pc, #116]	; (8002e0c <HAL_ADC_Start_DMA+0x130>)
 8002d96:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9c:	4a1c      	ldr	r2, [pc, #112]	; (8002e10 <HAL_ADC_Start_DMA+0x134>)
 8002d9e:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	221c      	movs	r2, #28
 8002da6:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0210 	orr.w	r2, r2, #16
 8002db6:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0201 	orr.w	r2, r2, #1
 8002dc6:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	3340      	adds	r3, #64	; 0x40
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f000 fd27 	bl	800382a <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0204 	orr.w	r2, r2, #4
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	e006      	b.n	8002dfc <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002df6:	e001      	b.n	8002dfc <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002df8:	2302      	movs	r3, #2
 8002dfa:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	08003379 	.word	0x08003379
 8002e0c:	080033f3 	.word	0x080033f3
 8002e10:	0800340f 	.word	0x0800340f

08002e14 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b09b      	sub	sp, #108	; 0x6c
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d101      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x22>
 8002e32:	2302      	movs	r3, #2
 8002e34:	e295      	b.n	8003362 <HAL_ADC_ConfigChannel+0x54e>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f040 8279 	bne.w	8003340 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d81c      	bhi.n	8002e90 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	4613      	mov	r3, r2
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	4413      	add	r3, r2
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	461a      	mov	r2, r3
 8002e6a:	231f      	movs	r3, #31
 8002e6c:	4093      	lsls	r3, r2
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	4019      	ands	r1, r3
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	6818      	ldr	r0, [r3, #0]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	4413      	add	r3, r2
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	fa00 f203 	lsl.w	r2, r0, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	631a      	str	r2, [r3, #48]	; 0x30
 8002e8e:	e063      	b.n	8002f58 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b09      	cmp	r3, #9
 8002e96:	d81e      	bhi.n	8002ed6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	4413      	add	r3, r2
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	3b1e      	subs	r3, #30
 8002eac:	221f      	movs	r2, #31
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	4019      	ands	r1, r3
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	6818      	ldr	r0, [r3, #0]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	4413      	add	r3, r2
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	3b1e      	subs	r3, #30
 8002ec8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	635a      	str	r2, [r3, #52]	; 0x34
 8002ed4:	e040      	b.n	8002f58 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b0e      	cmp	r3, #14
 8002edc:	d81e      	bhi.n	8002f1c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	4413      	add	r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	3b3c      	subs	r3, #60	; 0x3c
 8002ef2:	221f      	movs	r2, #31
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	4019      	ands	r1, r3
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	6818      	ldr	r0, [r3, #0]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	4413      	add	r3, r2
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	3b3c      	subs	r3, #60	; 0x3c
 8002f0e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	639a      	str	r2, [r3, #56]	; 0x38
 8002f1a:	e01d      	b.n	8002f58 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	4413      	add	r3, r2
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	3b5a      	subs	r3, #90	; 0x5a
 8002f30:	221f      	movs	r2, #31
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43db      	mvns	r3, r3
 8002f38:	4019      	ands	r1, r3
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	6818      	ldr	r0, [r3, #0]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	4413      	add	r3, r2
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	3b5a      	subs	r3, #90	; 0x5a
 8002f4c:	fa00 f203 	lsl.w	r2, r0, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 030c 	and.w	r3, r3, #12
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f040 80e5 	bne.w	8003132 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b09      	cmp	r3, #9
 8002f6e:	d91c      	bls.n	8002faa <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6999      	ldr	r1, [r3, #24]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	4413      	add	r3, r2
 8002f80:	3b1e      	subs	r3, #30
 8002f82:	2207      	movs	r2, #7
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	4019      	ands	r1, r3
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	6898      	ldr	r0, [r3, #8]
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	4613      	mov	r3, r2
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	4413      	add	r3, r2
 8002f9a:	3b1e      	subs	r3, #30
 8002f9c:	fa00 f203 	lsl.w	r2, r0, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	619a      	str	r2, [r3, #24]
 8002fa8:	e019      	b.n	8002fde <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6959      	ldr	r1, [r3, #20]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	4413      	add	r3, r2
 8002fba:	2207      	movs	r2, #7
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	4019      	ands	r1, r3
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	6898      	ldr	r0, [r3, #8]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	4413      	add	r3, r2
 8002fd2:	fa00 f203 	lsl.w	r2, r0, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	08db      	lsrs	r3, r3, #3
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	2b03      	cmp	r3, #3
 8002ffe:	d84f      	bhi.n	80030a0 <HAL_ADC_ConfigChannel+0x28c>
 8003000:	a201      	add	r2, pc, #4	; (adr r2, 8003008 <HAL_ADC_ConfigChannel+0x1f4>)
 8003002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003006:	bf00      	nop
 8003008:	08003019 	.word	0x08003019
 800300c:	0800303b 	.word	0x0800303b
 8003010:	0800305d 	.word	0x0800305d
 8003014:	0800307f 	.word	0x0800307f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800301e:	4b97      	ldr	r3, [pc, #604]	; (800327c <HAL_ADC_ConfigChannel+0x468>)
 8003020:	4013      	ands	r3, r2
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	6812      	ldr	r2, [r2, #0]
 8003026:	0691      	lsls	r1, r2, #26
 8003028:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800302a:	430a      	orrs	r2, r1
 800302c:	431a      	orrs	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003036:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003038:	e07b      	b.n	8003132 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003040:	4b8e      	ldr	r3, [pc, #568]	; (800327c <HAL_ADC_ConfigChannel+0x468>)
 8003042:	4013      	ands	r3, r2
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	6812      	ldr	r2, [r2, #0]
 8003048:	0691      	lsls	r1, r2, #26
 800304a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800304c:	430a      	orrs	r2, r1
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003058:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800305a:	e06a      	b.n	8003132 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003062:	4b86      	ldr	r3, [pc, #536]	; (800327c <HAL_ADC_ConfigChannel+0x468>)
 8003064:	4013      	ands	r3, r2
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	6812      	ldr	r2, [r2, #0]
 800306a:	0691      	lsls	r1, r2, #26
 800306c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800306e:	430a      	orrs	r2, r1
 8003070:	431a      	orrs	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800307a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800307c:	e059      	b.n	8003132 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003084:	4b7d      	ldr	r3, [pc, #500]	; (800327c <HAL_ADC_ConfigChannel+0x468>)
 8003086:	4013      	ands	r3, r2
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	6812      	ldr	r2, [r2, #0]
 800308c:	0691      	lsls	r1, r2, #26
 800308e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003090:	430a      	orrs	r2, r1
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800309c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800309e:	e048      	b.n	8003132 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	069b      	lsls	r3, r3, #26
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d107      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030c2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	069b      	lsls	r3, r3, #26
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d107      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030e6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	069b      	lsls	r3, r3, #26
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d107      	bne.n	800310c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800310a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003112:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	069b      	lsls	r3, r3, #26
 800311c:	429a      	cmp	r2, r3
 800311e:	d107      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800312e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003130:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 0303 	and.w	r3, r3, #3
 800313c:	2b01      	cmp	r3, #1
 800313e:	d108      	bne.n	8003152 <HAL_ADC_ConfigChannel+0x33e>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b01      	cmp	r3, #1
 800314c:	d101      	bne.n	8003152 <HAL_ADC_ConfigChannel+0x33e>
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <HAL_ADC_ConfigChannel+0x340>
 8003152:	2300      	movs	r3, #0
 8003154:	2b00      	cmp	r3, #0
 8003156:	f040 80fe 	bne.w	8003356 <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d00f      	beq.n	8003182 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2201      	movs	r2, #1
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43da      	mvns	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	400a      	ands	r2, r1
 800317c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8003180:	e049      	b.n	8003216 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2201      	movs	r2, #1
 8003190:	409a      	lsls	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b09      	cmp	r3, #9
 80031a2:	d91c      	bls.n	80031de <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6999      	ldr	r1, [r3, #24]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	4613      	mov	r3, r2
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	4413      	add	r3, r2
 80031b4:	3b1b      	subs	r3, #27
 80031b6:	2207      	movs	r2, #7
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	4019      	ands	r1, r3
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	6898      	ldr	r0, [r3, #8]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	4613      	mov	r3, r2
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	4413      	add	r3, r2
 80031ce:	3b1b      	subs	r3, #27
 80031d0:	fa00 f203 	lsl.w	r2, r0, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	619a      	str	r2, [r3, #24]
 80031dc:	e01b      	b.n	8003216 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6959      	ldr	r1, [r3, #20]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	4613      	mov	r3, r2
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	4413      	add	r3, r2
 80031f0:	2207      	movs	r2, #7
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43db      	mvns	r3, r3
 80031f8:	4019      	ands	r1, r3
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	6898      	ldr	r0, [r3, #8]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	4613      	mov	r3, r2
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	4413      	add	r3, r2
 800320a:	fa00 f203 	lsl.w	r2, r0, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003216:	4b1a      	ldr	r3, [pc, #104]	; (8003280 <HAL_ADC_ConfigChannel+0x46c>)
 8003218:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b10      	cmp	r3, #16
 8003220:	d105      	bne.n	800322e <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800322a:	2b00      	cmp	r3, #0
 800322c:	d014      	beq.n	8003258 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003232:	2b11      	cmp	r3, #17
 8003234:	d105      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003246:	2b12      	cmp	r3, #18
 8003248:	f040 8085 	bne.w	8003356 <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800324c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003254:	2b00      	cmp	r3, #0
 8003256:	d17e      	bne.n	8003356 <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003258:	2300      	movs	r3, #0
 800325a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	2b01      	cmp	r3, #1
 8003268:	d10c      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x470>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b01      	cmp	r3, #1
 8003276:	d105      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x470>
 8003278:	2301      	movs	r3, #1
 800327a:	e004      	b.n	8003286 <HAL_ADC_ConfigChannel+0x472>
 800327c:	83fff000 	.word	0x83fff000
 8003280:	50000300 	.word	0x50000300
 8003284:	2300      	movs	r3, #0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d150      	bne.n	800332c <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800328a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800328c:	2b00      	cmp	r3, #0
 800328e:	d010      	beq.n	80032b2 <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	2b01      	cmp	r3, #1
 800329a:	d107      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x498>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d101      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x498>
 80032a8:	2301      	movs	r3, #1
 80032aa:	e000      	b.n	80032ae <HAL_ADC_ConfigChannel+0x49a>
 80032ac:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d13c      	bne.n	800332c <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b10      	cmp	r3, #16
 80032b8:	d11d      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x4e2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032c2:	d118      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80032c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80032cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032ce:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032d0:	4b27      	ldr	r3, [pc, #156]	; (8003370 <HAL_ADC_ConfigChannel+0x55c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a27      	ldr	r2, [pc, #156]	; (8003374 <HAL_ADC_ConfigChannel+0x560>)
 80032d6:	fba2 2303 	umull	r2, r3, r2, r3
 80032da:	0c9a      	lsrs	r2, r3, #18
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032e6:	e002      	b.n	80032ee <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1f9      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80032f4:	e02e      	b.n	8003354 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b11      	cmp	r3, #17
 80032fc:	d10b      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x502>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003306:	d106      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003308:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003312:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003314:	e01e      	b.n	8003354 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b12      	cmp	r3, #18
 800331c:	d11a      	bne.n	8003354 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800331e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003328:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800332a:	e013      	b.n	8003354 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	f043 0220 	orr.w	r2, r3, #32
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800333e:	e00a      	b.n	8003356 <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	f043 0220 	orr.w	r2, r3, #32
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8003352:	e000      	b.n	8003356 <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003354:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800335e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003362:	4618      	mov	r0, r3
 8003364:	376c      	adds	r7, #108	; 0x6c
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	2000000c 	.word	0x2000000c
 8003374:	431bde83 	.word	0x431bde83

08003378 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800338e:	2b00      	cmp	r3, #0
 8003390:	d126      	bne.n	80033e0 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d115      	bne.n	80033d8 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d111      	bne.n	80033d8 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d105      	bne.n	80033d8 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	f043 0201 	orr.w	r2, r3, #1
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f7ff fadb 	bl	8002994 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80033de:	e004      	b.n	80033ea <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	4798      	blx	r3
}
 80033ea:	bf00      	nop
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b084      	sub	sp, #16
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f7ff fad1 	bl	80029a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8003406:	bf00      	nop
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b084      	sub	sp, #16
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342c:	f043 0204 	orr.w	r2, r3, #4
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003434:	68f8      	ldr	r0, [r7, #12]
 8003436:	f7ff fac1 	bl	80029bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800343a:	bf00      	nop
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	2b01      	cmp	r3, #1
 800345c:	d108      	bne.n	8003470 <ADC_Enable+0x2c>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <ADC_Enable+0x2c>
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <ADC_Enable+0x2e>
 8003470:	2300      	movs	r3, #0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d143      	bne.n	80034fe <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	4b22      	ldr	r3, [pc, #136]	; (8003508 <ADC_Enable+0xc4>)
 800347e:	4013      	ands	r3, r2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00d      	beq.n	80034a0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	f043 0210 	orr.w	r2, r3, #16
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003494:	f043 0201 	orr.w	r2, r3, #1
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e02f      	b.n	8003500 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f042 0201 	orr.w	r2, r2, #1
 80034ae:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80034b0:	f7ff fa64 	bl	800297c <HAL_GetTick>
 80034b4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80034b6:	e01b      	b.n	80034f0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034b8:	f7ff fa60 	bl	800297c <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d914      	bls.n	80034f0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d00d      	beq.n	80034f0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	f043 0210 	orr.w	r2, r3, #16
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e4:	f043 0201 	orr.w	r2, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e007      	b.n	8003500 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d1dc      	bne.n	80034b8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	8000003f 	.word	0x8000003f

0800350c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	2b01      	cmp	r3, #1
 8003524:	d108      	bne.n	8003538 <ADC_Disable+0x2c>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	2b01      	cmp	r3, #1
 8003532:	d101      	bne.n	8003538 <ADC_Disable+0x2c>
 8003534:	2301      	movs	r3, #1
 8003536:	e000      	b.n	800353a <ADC_Disable+0x2e>
 8003538:	2300      	movs	r3, #0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d047      	beq.n	80035ce <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 030d 	and.w	r3, r3, #13
 8003548:	2b01      	cmp	r3, #1
 800354a:	d10f      	bne.n	800356c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 0202 	orr.w	r2, r2, #2
 800355a:	609a      	str	r2, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2203      	movs	r2, #3
 8003562:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8003564:	f7ff fa0a 	bl	800297c <HAL_GetTick>
 8003568:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800356a:	e029      	b.n	80035c0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	f043 0210 	orr.w	r2, r3, #16
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357c:	f043 0201 	orr.w	r2, r3, #1
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e023      	b.n	80035d0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003588:	f7ff f9f8 	bl	800297c <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d914      	bls.n	80035c0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d10d      	bne.n	80035c0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a8:	f043 0210 	orr.w	r2, r3, #16
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b4:	f043 0201 	orr.w	r2, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e007      	b.n	80035d0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d0dc      	beq.n	8003588 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035e8:	4b0c      	ldr	r3, [pc, #48]	; (800361c <__NVIC_SetPriorityGrouping+0x44>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035ee:	68ba      	ldr	r2, [r7, #8]
 80035f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035f4:	4013      	ands	r3, r2
 80035f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003600:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800360a:	4a04      	ldr	r2, [pc, #16]	; (800361c <__NVIC_SetPriorityGrouping+0x44>)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	60d3      	str	r3, [r2, #12]
}
 8003610:	bf00      	nop
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	e000ed00 	.word	0xe000ed00

08003620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003624:	4b04      	ldr	r3, [pc, #16]	; (8003638 <__NVIC_GetPriorityGrouping+0x18>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	0a1b      	lsrs	r3, r3, #8
 800362a:	f003 0307 	and.w	r3, r3, #7
}
 800362e:	4618      	mov	r0, r3
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	e000ed00 	.word	0xe000ed00

0800363c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	4603      	mov	r3, r0
 8003644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364a:	2b00      	cmp	r3, #0
 800364c:	db0b      	blt.n	8003666 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	f003 021f 	and.w	r2, r3, #31
 8003654:	4907      	ldr	r1, [pc, #28]	; (8003674 <__NVIC_EnableIRQ+0x38>)
 8003656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365a:	095b      	lsrs	r3, r3, #5
 800365c:	2001      	movs	r0, #1
 800365e:	fa00 f202 	lsl.w	r2, r0, r2
 8003662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	e000e100 	.word	0xe000e100

08003678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	6039      	str	r1, [r7, #0]
 8003682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003688:	2b00      	cmp	r3, #0
 800368a:	db0a      	blt.n	80036a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	b2da      	uxtb	r2, r3
 8003690:	490c      	ldr	r1, [pc, #48]	; (80036c4 <__NVIC_SetPriority+0x4c>)
 8003692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003696:	0112      	lsls	r2, r2, #4
 8003698:	b2d2      	uxtb	r2, r2
 800369a:	440b      	add	r3, r1
 800369c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036a0:	e00a      	b.n	80036b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	4908      	ldr	r1, [pc, #32]	; (80036c8 <__NVIC_SetPriority+0x50>)
 80036a8:	79fb      	ldrb	r3, [r7, #7]
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	3b04      	subs	r3, #4
 80036b0:	0112      	lsls	r2, r2, #4
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	440b      	add	r3, r1
 80036b6:	761a      	strb	r2, [r3, #24]
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	e000e100 	.word	0xe000e100
 80036c8:	e000ed00 	.word	0xe000ed00

080036cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b089      	sub	sp, #36	; 0x24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f1c3 0307 	rsb	r3, r3, #7
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	bf28      	it	cs
 80036ea:	2304      	movcs	r3, #4
 80036ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	3304      	adds	r3, #4
 80036f2:	2b06      	cmp	r3, #6
 80036f4:	d902      	bls.n	80036fc <NVIC_EncodePriority+0x30>
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	3b03      	subs	r3, #3
 80036fa:	e000      	b.n	80036fe <NVIC_EncodePriority+0x32>
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003700:	f04f 32ff 	mov.w	r2, #4294967295
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43da      	mvns	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	401a      	ands	r2, r3
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003714:	f04f 31ff 	mov.w	r1, #4294967295
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	fa01 f303 	lsl.w	r3, r1, r3
 800371e:	43d9      	mvns	r1, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003724:	4313      	orrs	r3, r2
         );
}
 8003726:	4618      	mov	r0, r3
 8003728:	3724      	adds	r7, #36	; 0x24
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff ff4c 	bl	80035d8 <__NVIC_SetPriorityGrouping>
}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	4603      	mov	r3, r0
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003756:	2300      	movs	r3, #0
 8003758:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800375a:	f7ff ff61 	bl	8003620 <__NVIC_GetPriorityGrouping>
 800375e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	68b9      	ldr	r1, [r7, #8]
 8003764:	6978      	ldr	r0, [r7, #20]
 8003766:	f7ff ffb1 	bl	80036cc <NVIC_EncodePriority>
 800376a:	4602      	mov	r2, r0
 800376c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003770:	4611      	mov	r1, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff ff80 	bl	8003678 <__NVIC_SetPriority>
}
 8003778:	bf00      	nop
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	4603      	mov	r3, r0
 8003788:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800378a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff ff54 	bl	800363c <__NVIC_EnableIRQ>
}
 8003794:	bf00      	nop
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e037      	b.n	8003822 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2202      	movs	r2, #2
 80037b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80037c8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80037cc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80037d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 f9bd 	bl	8003b84 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b086      	sub	sp, #24
 800382e:	af00      	add	r7, sp, #0
 8003830:	60f8      	str	r0, [r7, #12]
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	607a      	str	r2, [r7, #4]
 8003836:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d101      	bne.n	800384a <HAL_DMA_Start_IT+0x20>
 8003846:	2302      	movs	r3, #2
 8003848:	e04a      	b.n	80038e0 <HAL_DMA_Start_IT+0xb6>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003858:	2b01      	cmp	r3, #1
 800385a:	d13a      	bne.n	80038d2 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0201 	bic.w	r2, r2, #1
 8003878:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	68b9      	ldr	r1, [r7, #8]
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 f950 	bl	8003b26 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	2b00      	cmp	r3, #0
 800388c:	d008      	beq.n	80038a0 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f042 020e 	orr.w	r2, r2, #14
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	e00f      	b.n	80038c0 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 020a 	orr.w	r2, r2, #10
 80038ae:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0204 	bic.w	r2, r2, #4
 80038be:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0201 	orr.w	r2, r2, #1
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	e005      	b.n	80038de <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80038da:	2302      	movs	r3, #2
 80038dc:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80038de:	7dfb      	ldrb	r3, [r7, #23]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e02e      	b.n	8003958 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003900:	2b02      	cmp	r3, #2
 8003902:	d008      	beq.n	8003916 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2204      	movs	r2, #4
 8003908:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e020      	b.n	8003958 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 020e 	bic.w	r2, r2, #14
 8003924:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0201 	bic.w	r2, r2, #1
 8003934:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393e:	2101      	movs	r1, #1
 8003940:	fa01 f202 	lsl.w	r2, r1, r2
 8003944:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003976:	2b02      	cmp	r3, #2
 8003978:	d005      	beq.n	8003986 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2204      	movs	r2, #4
 800397e:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	73fb      	strb	r3, [r7, #15]
 8003984:	e027      	b.n	80039d6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 020e 	bic.w	r2, r2, #14
 8003994:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0201 	bic.w	r2, r2, #1
 80039a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ae:	2101      	movs	r1, #1
 80039b0:	fa01 f202 	lsl.w	r2, r1, r2
 80039b4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	4798      	blx	r3
    }
  }
  return status;
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	2204      	movs	r2, #4
 80039fe:	409a      	lsls	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4013      	ands	r3, r2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d024      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x72>
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f003 0304 	and.w	r3, r3, #4
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d01f      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0320 	and.w	r3, r3, #32
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d107      	bne.n	8003a30 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0204 	bic.w	r2, r2, #4
 8003a2e:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a38:	2104      	movs	r1, #4
 8003a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a3e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d06a      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003a50:	e065      	b.n	8003b1e <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a56:	2202      	movs	r2, #2
 8003a58:	409a      	lsls	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d02c      	beq.n	8003abc <HAL_DMA_IRQHandler+0xdc>
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d027      	beq.n	8003abc <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0320 	and.w	r3, r3, #32
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10b      	bne.n	8003a92 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 020a 	bic.w	r2, r2, #10
 8003a88:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9a:	2102      	movs	r1, #2
 8003a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003aa0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d035      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003aba:	e030      	b.n	8003b1e <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac0:	2208      	movs	r2, #8
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d028      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x13e>
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d023      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 020e 	bic.w	r2, r2, #14
 8003ae4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aee:	2101      	movs	r1, #1
 8003af0:	fa01 f202 	lsl.w	r2, r1, r2
 8003af4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d004      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	4798      	blx	r3
    }
  }
}
 8003b1c:	e7ff      	b.n	8003b1e <HAL_DMA_IRQHandler+0x13e>
 8003b1e:	bf00      	nop
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b085      	sub	sp, #20
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	60f8      	str	r0, [r7, #12]
 8003b2e:	60b9      	str	r1, [r7, #8]
 8003b30:	607a      	str	r2, [r7, #4]
 8003b32:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b42:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b10      	cmp	r3, #16
 8003b52:	d108      	bne.n	8003b66 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b64:	e007      	b.n	8003b76 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	60da      	str	r2, [r3, #12]
}
 8003b76:	bf00      	nop
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
	...

08003b84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	461a      	mov	r2, r3
 8003b92:	4b09      	ldr	r3, [pc, #36]	; (8003bb8 <DMA_CalcBaseAndBitshift+0x34>)
 8003b94:	4413      	add	r3, r2
 8003b96:	4a09      	ldr	r2, [pc, #36]	; (8003bbc <DMA_CalcBaseAndBitshift+0x38>)
 8003b98:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9c:	091b      	lsrs	r3, r3, #4
 8003b9e:	009a      	lsls	r2, r3, #2
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a06      	ldr	r2, [pc, #24]	; (8003bc0 <DMA_CalcBaseAndBitshift+0x3c>)
 8003ba8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003baa:	bf00      	nop
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	bffdfff8 	.word	0xbffdfff8
 8003bbc:	cccccccd 	.word	0xcccccccd
 8003bc0:	40020000 	.word	0x40020000

08003bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bd2:	e14e      	b.n	8003e72 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	2101      	movs	r1, #1
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003be0:	4013      	ands	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 8140 	beq.w	8003e6c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f003 0303 	and.w	r3, r3, #3
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d005      	beq.n	8003c04 <HAL_GPIO_Init+0x40>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f003 0303 	and.w	r3, r3, #3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d130      	bne.n	8003c66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	2203      	movs	r2, #3
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	43db      	mvns	r3, r3
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	43db      	mvns	r3, r3
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4013      	ands	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	091b      	lsrs	r3, r3, #4
 8003c50:	f003 0201 	and.w	r2, r3, #1
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f003 0303 	and.w	r3, r3, #3
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	d017      	beq.n	8003ca2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	2203      	movs	r2, #3
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	43db      	mvns	r3, r3
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	4013      	ands	r3, r2
 8003c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d123      	bne.n	8003cf6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	08da      	lsrs	r2, r3, #3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	3208      	adds	r2, #8
 8003cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	220f      	movs	r2, #15
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	691a      	ldr	r2, [r3, #16]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	08da      	lsrs	r2, r3, #3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3208      	adds	r2, #8
 8003cf0:	6939      	ldr	r1, [r7, #16]
 8003cf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	2203      	movs	r2, #3
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	43db      	mvns	r3, r3
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f003 0203 	and.w	r2, r3, #3
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 809a 	beq.w	8003e6c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d38:	4b55      	ldr	r3, [pc, #340]	; (8003e90 <HAL_GPIO_Init+0x2cc>)
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	4a54      	ldr	r2, [pc, #336]	; (8003e90 <HAL_GPIO_Init+0x2cc>)
 8003d3e:	f043 0301 	orr.w	r3, r3, #1
 8003d42:	6193      	str	r3, [r2, #24]
 8003d44:	4b52      	ldr	r3, [pc, #328]	; (8003e90 <HAL_GPIO_Init+0x2cc>)
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	60bb      	str	r3, [r7, #8]
 8003d4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d50:	4a50      	ldr	r2, [pc, #320]	; (8003e94 <HAL_GPIO_Init+0x2d0>)
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	089b      	lsrs	r3, r3, #2
 8003d56:	3302      	adds	r3, #2
 8003d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f003 0303 	and.w	r3, r3, #3
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	220f      	movs	r2, #15
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4013      	ands	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003d7a:	d013      	beq.n	8003da4 <HAL_GPIO_Init+0x1e0>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a46      	ldr	r2, [pc, #280]	; (8003e98 <HAL_GPIO_Init+0x2d4>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00d      	beq.n	8003da0 <HAL_GPIO_Init+0x1dc>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a45      	ldr	r2, [pc, #276]	; (8003e9c <HAL_GPIO_Init+0x2d8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d007      	beq.n	8003d9c <HAL_GPIO_Init+0x1d8>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a44      	ldr	r2, [pc, #272]	; (8003ea0 <HAL_GPIO_Init+0x2dc>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d101      	bne.n	8003d98 <HAL_GPIO_Init+0x1d4>
 8003d94:	2303      	movs	r3, #3
 8003d96:	e006      	b.n	8003da6 <HAL_GPIO_Init+0x1e2>
 8003d98:	2305      	movs	r3, #5
 8003d9a:	e004      	b.n	8003da6 <HAL_GPIO_Init+0x1e2>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e002      	b.n	8003da6 <HAL_GPIO_Init+0x1e2>
 8003da0:	2301      	movs	r3, #1
 8003da2:	e000      	b.n	8003da6 <HAL_GPIO_Init+0x1e2>
 8003da4:	2300      	movs	r3, #0
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	f002 0203 	and.w	r2, r2, #3
 8003dac:	0092      	lsls	r2, r2, #2
 8003dae:	4093      	lsls	r3, r2
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003db6:	4937      	ldr	r1, [pc, #220]	; (8003e94 <HAL_GPIO_Init+0x2d0>)
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	089b      	lsrs	r3, r3, #2
 8003dbc:	3302      	adds	r3, #2
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dc4:	4b37      	ldr	r3, [pc, #220]	; (8003ea4 <HAL_GPIO_Init+0x2e0>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003de8:	4a2e      	ldr	r2, [pc, #184]	; (8003ea4 <HAL_GPIO_Init+0x2e0>)
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dee:	4b2d      	ldr	r3, [pc, #180]	; (8003ea4 <HAL_GPIO_Init+0x2e0>)
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	43db      	mvns	r3, r3
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003e12:	4a24      	ldr	r2, [pc, #144]	; (8003ea4 <HAL_GPIO_Init+0x2e0>)
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e18:	4b22      	ldr	r3, [pc, #136]	; (8003ea4 <HAL_GPIO_Init+0x2e0>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	43db      	mvns	r3, r3
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4013      	ands	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003e3c:	4a19      	ldr	r2, [pc, #100]	; (8003ea4 <HAL_GPIO_Init+0x2e0>)
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e42:	4b18      	ldr	r3, [pc, #96]	; (8003ea4 <HAL_GPIO_Init+0x2e0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003e66:	4a0f      	ldr	r2, [pc, #60]	; (8003ea4 <HAL_GPIO_Init+0x2e0>)
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	fa22 f303 	lsr.w	r3, r2, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f47f aea9 	bne.w	8003bd4 <HAL_GPIO_Init+0x10>
  }
}
 8003e82:	bf00      	nop
 8003e84:	bf00      	nop
 8003e86:	371c      	adds	r7, #28
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	40021000 	.word	0x40021000
 8003e94:	40010000 	.word	0x40010000
 8003e98:	48000400 	.word	0x48000400
 8003e9c:	48000800 	.word	0x48000800
 8003ea0:	48000c00 	.word	0x48000c00
 8003ea4:	40010400 	.word	0x40010400

08003ea8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691a      	ldr	r2, [r3, #16]
 8003eb8:	887b      	ldrh	r3, [r7, #2]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	73fb      	strb	r3, [r7, #15]
 8003ec4:	e001      	b.n	8003eca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	807b      	strh	r3, [r7, #2]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ee8:	787b      	ldrb	r3, [r7, #1]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003eee:	887a      	ldrh	r2, [r7, #2]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ef4:	e002      	b.n	8003efc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ef6:	887a      	ldrh	r2, [r7, #2]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003efc:	bf00      	nop
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	4603      	mov	r3, r0
 8003f10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f12:	4b08      	ldr	r3, [pc, #32]	; (8003f34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f14:	695a      	ldr	r2, [r3, #20]
 8003f16:	88fb      	ldrh	r3, [r7, #6]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d006      	beq.n	8003f2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f1e:	4a05      	ldr	r2, [pc, #20]	; (8003f34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f20:	88fb      	ldrh	r3, [r7, #6]
 8003f22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f24:	88fb      	ldrh	r3, [r7, #6]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fd fd64 	bl	80019f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f2c:	bf00      	nop
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40010400 	.word	0x40010400

08003f38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f48:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d102      	bne.n	8003f5e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	f001 b823 	b.w	8004fa4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 817d 	beq.w	800426e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003f74:	4bbc      	ldr	r3, [pc, #752]	; (8004268 <HAL_RCC_OscConfig+0x330>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f003 030c 	and.w	r3, r3, #12
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d00c      	beq.n	8003f9a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f80:	4bb9      	ldr	r3, [pc, #740]	; (8004268 <HAL_RCC_OscConfig+0x330>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f003 030c 	and.w	r3, r3, #12
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d15c      	bne.n	8004046 <HAL_RCC_OscConfig+0x10e>
 8003f8c:	4bb6      	ldr	r3, [pc, #728]	; (8004268 <HAL_RCC_OscConfig+0x330>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f98:	d155      	bne.n	8004046 <HAL_RCC_OscConfig+0x10e>
 8003f9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f9e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003fa6:	fa93 f3a3 	rbit	r3, r3
 8003faa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003fae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb2:	fab3 f383 	clz	r3, r3
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	095b      	lsrs	r3, r3, #5
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	f043 0301 	orr.w	r3, r3, #1
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d102      	bne.n	8003fcc <HAL_RCC_OscConfig+0x94>
 8003fc6:	4ba8      	ldr	r3, [pc, #672]	; (8004268 <HAL_RCC_OscConfig+0x330>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	e015      	b.n	8003ff8 <HAL_RCC_OscConfig+0xc0>
 8003fcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fd0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003fd8:	fa93 f3a3 	rbit	r3, r3
 8003fdc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003fe0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fe4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003fe8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003fec:	fa93 f3a3 	rbit	r3, r3
 8003ff0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003ff4:	4b9c      	ldr	r3, [pc, #624]	; (8004268 <HAL_RCC_OscConfig+0x330>)
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ffc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8004000:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004004:	fa92 f2a2 	rbit	r2, r2
 8004008:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800400c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8004010:	fab2 f282 	clz	r2, r2
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	f042 0220 	orr.w	r2, r2, #32
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	f002 021f 	and.w	r2, r2, #31
 8004020:	2101      	movs	r1, #1
 8004022:	fa01 f202 	lsl.w	r2, r1, r2
 8004026:	4013      	ands	r3, r2
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 811f 	beq.w	800426c <HAL_RCC_OscConfig+0x334>
 800402e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004032:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	f040 8116 	bne.w	800426c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	f000 bfaf 	b.w	8004fa4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800404a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004056:	d106      	bne.n	8004066 <HAL_RCC_OscConfig+0x12e>
 8004058:	4b83      	ldr	r3, [pc, #524]	; (8004268 <HAL_RCC_OscConfig+0x330>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a82      	ldr	r2, [pc, #520]	; (8004268 <HAL_RCC_OscConfig+0x330>)
 800405e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	e036      	b.n	80040d4 <HAL_RCC_OscConfig+0x19c>
 8004066:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800406a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10c      	bne.n	8004090 <HAL_RCC_OscConfig+0x158>
 8004076:	4b7c      	ldr	r3, [pc, #496]	; (8004268 <HAL_RCC_OscConfig+0x330>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a7b      	ldr	r2, [pc, #492]	; (8004268 <HAL_RCC_OscConfig+0x330>)
 800407c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	4b79      	ldr	r3, [pc, #484]	; (8004268 <HAL_RCC_OscConfig+0x330>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a78      	ldr	r2, [pc, #480]	; (8004268 <HAL_RCC_OscConfig+0x330>)
 8004088:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	e021      	b.n	80040d4 <HAL_RCC_OscConfig+0x19c>
 8004090:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004094:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040a0:	d10c      	bne.n	80040bc <HAL_RCC_OscConfig+0x184>
 80040a2:	4b71      	ldr	r3, [pc, #452]	; (8004268 <HAL_RCC_OscConfig+0x330>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a70      	ldr	r2, [pc, #448]	; (8004268 <HAL_RCC_OscConfig+0x330>)
 80040a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	4b6e      	ldr	r3, [pc, #440]	; (8004268 <HAL_RCC_OscConfig+0x330>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a6d      	ldr	r2, [pc, #436]	; (8004268 <HAL_RCC_OscConfig+0x330>)
 80040b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	e00b      	b.n	80040d4 <HAL_RCC_OscConfig+0x19c>
 80040bc:	4b6a      	ldr	r3, [pc, #424]	; (8004268 <HAL_RCC_OscConfig+0x330>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a69      	ldr	r2, [pc, #420]	; (8004268 <HAL_RCC_OscConfig+0x330>)
 80040c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c6:	6013      	str	r3, [r2, #0]
 80040c8:	4b67      	ldr	r3, [pc, #412]	; (8004268 <HAL_RCC_OscConfig+0x330>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a66      	ldr	r2, [pc, #408]	; (8004268 <HAL_RCC_OscConfig+0x330>)
 80040ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040d2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80040d4:	4b64      	ldr	r3, [pc, #400]	; (8004268 <HAL_RCC_OscConfig+0x330>)
 80040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d8:	f023 020f 	bic.w	r2, r3, #15
 80040dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	495f      	ldr	r1, [pc, #380]	; (8004268 <HAL_RCC_OscConfig+0x330>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d059      	beq.n	80041b2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fe:	f7fe fc3d 	bl	800297c <HAL_GetTick>
 8004102:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004106:	e00a      	b.n	800411e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004108:	f7fe fc38 	bl	800297c <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b64      	cmp	r3, #100	; 0x64
 8004116:	d902      	bls.n	800411e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	f000 bf43 	b.w	8004fa4 <HAL_RCC_OscConfig+0x106c>
 800411e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004122:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004126:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800412a:	fa93 f3a3 	rbit	r3, r3
 800412e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8004132:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004136:	fab3 f383 	clz	r3, r3
 800413a:	b2db      	uxtb	r3, r3
 800413c:	095b      	lsrs	r3, r3, #5
 800413e:	b2db      	uxtb	r3, r3
 8004140:	f043 0301 	orr.w	r3, r3, #1
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b01      	cmp	r3, #1
 8004148:	d102      	bne.n	8004150 <HAL_RCC_OscConfig+0x218>
 800414a:	4b47      	ldr	r3, [pc, #284]	; (8004268 <HAL_RCC_OscConfig+0x330>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	e015      	b.n	800417c <HAL_RCC_OscConfig+0x244>
 8004150:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004154:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004158:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800415c:	fa93 f3a3 	rbit	r3, r3
 8004160:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8004164:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004168:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800416c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8004170:	fa93 f3a3 	rbit	r3, r3
 8004174:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8004178:	4b3b      	ldr	r3, [pc, #236]	; (8004268 <HAL_RCC_OscConfig+0x330>)
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004180:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8004184:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004188:	fa92 f2a2 	rbit	r2, r2
 800418c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8004190:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8004194:	fab2 f282 	clz	r2, r2
 8004198:	b2d2      	uxtb	r2, r2
 800419a:	f042 0220 	orr.w	r2, r2, #32
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	f002 021f 	and.w	r2, r2, #31
 80041a4:	2101      	movs	r1, #1
 80041a6:	fa01 f202 	lsl.w	r2, r1, r2
 80041aa:	4013      	ands	r3, r2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0ab      	beq.n	8004108 <HAL_RCC_OscConfig+0x1d0>
 80041b0:	e05d      	b.n	800426e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b2:	f7fe fbe3 	bl	800297c <HAL_GetTick>
 80041b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ba:	e00a      	b.n	80041d2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041bc:	f7fe fbde 	bl	800297c <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041c6:	1ad3      	subs	r3, r2, r3
 80041c8:	2b64      	cmp	r3, #100	; 0x64
 80041ca:	d902      	bls.n	80041d2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	f000 bee9 	b.w	8004fa4 <HAL_RCC_OscConfig+0x106c>
 80041d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041d6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041da:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80041de:	fa93 f3a3 	rbit	r3, r3
 80041e2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80041e6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ea:	fab3 f383 	clz	r3, r3
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	095b      	lsrs	r3, r3, #5
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	f043 0301 	orr.w	r3, r3, #1
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d102      	bne.n	8004204 <HAL_RCC_OscConfig+0x2cc>
 80041fe:	4b1a      	ldr	r3, [pc, #104]	; (8004268 <HAL_RCC_OscConfig+0x330>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	e015      	b.n	8004230 <HAL_RCC_OscConfig+0x2f8>
 8004204:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004208:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8004210:	fa93 f3a3 	rbit	r3, r3
 8004214:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004218:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800421c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8004220:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8004224:	fa93 f3a3 	rbit	r3, r3
 8004228:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800422c:	4b0e      	ldr	r3, [pc, #56]	; (8004268 <HAL_RCC_OscConfig+0x330>)
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004234:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8004238:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800423c:	fa92 f2a2 	rbit	r2, r2
 8004240:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8004244:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8004248:	fab2 f282 	clz	r2, r2
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	f042 0220 	orr.w	r2, r2, #32
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	f002 021f 	and.w	r2, r2, #31
 8004258:	2101      	movs	r1, #1
 800425a:	fa01 f202 	lsl.w	r2, r1, r2
 800425e:	4013      	ands	r3, r2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1ab      	bne.n	80041bc <HAL_RCC_OscConfig+0x284>
 8004264:	e003      	b.n	800426e <HAL_RCC_OscConfig+0x336>
 8004266:	bf00      	nop
 8004268:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800426c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800426e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004272:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 817d 	beq.w	800457e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004284:	4ba6      	ldr	r3, [pc, #664]	; (8004520 <HAL_RCC_OscConfig+0x5e8>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f003 030c 	and.w	r3, r3, #12
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00b      	beq.n	80042a8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004290:	4ba3      	ldr	r3, [pc, #652]	; (8004520 <HAL_RCC_OscConfig+0x5e8>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f003 030c 	and.w	r3, r3, #12
 8004298:	2b08      	cmp	r3, #8
 800429a:	d172      	bne.n	8004382 <HAL_RCC_OscConfig+0x44a>
 800429c:	4ba0      	ldr	r3, [pc, #640]	; (8004520 <HAL_RCC_OscConfig+0x5e8>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d16c      	bne.n	8004382 <HAL_RCC_OscConfig+0x44a>
 80042a8:	2302      	movs	r3, #2
 80042aa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ae:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80042b2:	fa93 f3a3 	rbit	r3, r3
 80042b6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80042ba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042be:	fab3 f383 	clz	r3, r3
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	095b      	lsrs	r3, r3, #5
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	f043 0301 	orr.w	r3, r3, #1
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d102      	bne.n	80042d8 <HAL_RCC_OscConfig+0x3a0>
 80042d2:	4b93      	ldr	r3, [pc, #588]	; (8004520 <HAL_RCC_OscConfig+0x5e8>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	e013      	b.n	8004300 <HAL_RCC_OscConfig+0x3c8>
 80042d8:	2302      	movs	r3, #2
 80042da:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042de:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80042e2:	fa93 f3a3 	rbit	r3, r3
 80042e6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80042ea:	2302      	movs	r3, #2
 80042ec:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80042f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80042f4:	fa93 f3a3 	rbit	r3, r3
 80042f8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80042fc:	4b88      	ldr	r3, [pc, #544]	; (8004520 <HAL_RCC_OscConfig+0x5e8>)
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	2202      	movs	r2, #2
 8004302:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8004306:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800430a:	fa92 f2a2 	rbit	r2, r2
 800430e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8004312:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8004316:	fab2 f282 	clz	r2, r2
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	f042 0220 	orr.w	r2, r2, #32
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	f002 021f 	and.w	r2, r2, #31
 8004326:	2101      	movs	r1, #1
 8004328:	fa01 f202 	lsl.w	r2, r1, r2
 800432c:	4013      	ands	r3, r2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <HAL_RCC_OscConfig+0x410>
 8004332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004336:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d002      	beq.n	8004348 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	f000 be2e 	b.w	8004fa4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004348:	4b75      	ldr	r3, [pc, #468]	; (8004520 <HAL_RCC_OscConfig+0x5e8>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004354:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	21f8      	movs	r1, #248	; 0xf8
 800435e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004362:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004366:	fa91 f1a1 	rbit	r1, r1
 800436a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800436e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8004372:	fab1 f181 	clz	r1, r1
 8004376:	b2c9      	uxtb	r1, r1
 8004378:	408b      	lsls	r3, r1
 800437a:	4969      	ldr	r1, [pc, #420]	; (8004520 <HAL_RCC_OscConfig+0x5e8>)
 800437c:	4313      	orrs	r3, r2
 800437e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004380:	e0fd      	b.n	800457e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004386:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 8088 	beq.w	80044a4 <HAL_RCC_OscConfig+0x56c>
 8004394:	2301      	movs	r3, #1
 8004396:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800439e:	fa93 f3a3 	rbit	r3, r3
 80043a2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80043a6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043aa:	fab3 f383 	clz	r3, r3
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80043b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	461a      	mov	r2, r3
 80043bc:	2301      	movs	r3, #1
 80043be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c0:	f7fe fadc 	bl	800297c <HAL_GetTick>
 80043c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c8:	e00a      	b.n	80043e0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043ca:	f7fe fad7 	bl	800297c <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d902      	bls.n	80043e0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	f000 bde2 	b.w	8004fa4 <HAL_RCC_OscConfig+0x106c>
 80043e0:	2302      	movs	r3, #2
 80043e2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80043ea:	fa93 f3a3 	rbit	r3, r3
 80043ee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80043f2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f6:	fab3 f383 	clz	r3, r3
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	095b      	lsrs	r3, r3, #5
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	f043 0301 	orr.w	r3, r3, #1
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b01      	cmp	r3, #1
 8004408:	d102      	bne.n	8004410 <HAL_RCC_OscConfig+0x4d8>
 800440a:	4b45      	ldr	r3, [pc, #276]	; (8004520 <HAL_RCC_OscConfig+0x5e8>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	e013      	b.n	8004438 <HAL_RCC_OscConfig+0x500>
 8004410:	2302      	movs	r3, #2
 8004412:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004416:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800441a:	fa93 f3a3 	rbit	r3, r3
 800441e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004422:	2302      	movs	r3, #2
 8004424:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004428:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800442c:	fa93 f3a3 	rbit	r3, r3
 8004430:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8004434:	4b3a      	ldr	r3, [pc, #232]	; (8004520 <HAL_RCC_OscConfig+0x5e8>)
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	2202      	movs	r2, #2
 800443a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800443e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004442:	fa92 f2a2 	rbit	r2, r2
 8004446:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800444a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800444e:	fab2 f282 	clz	r2, r2
 8004452:	b2d2      	uxtb	r2, r2
 8004454:	f042 0220 	orr.w	r2, r2, #32
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	f002 021f 	and.w	r2, r2, #31
 800445e:	2101      	movs	r1, #1
 8004460:	fa01 f202 	lsl.w	r2, r1, r2
 8004464:	4013      	ands	r3, r2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0af      	beq.n	80043ca <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800446a:	4b2d      	ldr	r3, [pc, #180]	; (8004520 <HAL_RCC_OscConfig+0x5e8>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004472:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004476:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	21f8      	movs	r1, #248	; 0xf8
 8004480:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004484:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004488:	fa91 f1a1 	rbit	r1, r1
 800448c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8004490:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8004494:	fab1 f181 	clz	r1, r1
 8004498:	b2c9      	uxtb	r1, r1
 800449a:	408b      	lsls	r3, r1
 800449c:	4920      	ldr	r1, [pc, #128]	; (8004520 <HAL_RCC_OscConfig+0x5e8>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	600b      	str	r3, [r1, #0]
 80044a2:	e06c      	b.n	800457e <HAL_RCC_OscConfig+0x646>
 80044a4:	2301      	movs	r3, #1
 80044a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80044ae:	fa93 f3a3 	rbit	r3, r3
 80044b2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80044b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ba:	fab3 f383 	clz	r3, r3
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	461a      	mov	r2, r3
 80044cc:	2300      	movs	r3, #0
 80044ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d0:	f7fe fa54 	bl	800297c <HAL_GetTick>
 80044d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044d8:	e00a      	b.n	80044f0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044da:	f7fe fa4f 	bl	800297c <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d902      	bls.n	80044f0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	f000 bd5a 	b.w	8004fa4 <HAL_RCC_OscConfig+0x106c>
 80044f0:	2302      	movs	r3, #2
 80044f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80044fa:	fa93 f3a3 	rbit	r3, r3
 80044fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8004502:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004506:	fab3 f383 	clz	r3, r3
 800450a:	b2db      	uxtb	r3, r3
 800450c:	095b      	lsrs	r3, r3, #5
 800450e:	b2db      	uxtb	r3, r3
 8004510:	f043 0301 	orr.w	r3, r3, #1
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b01      	cmp	r3, #1
 8004518:	d104      	bne.n	8004524 <HAL_RCC_OscConfig+0x5ec>
 800451a:	4b01      	ldr	r3, [pc, #4]	; (8004520 <HAL_RCC_OscConfig+0x5e8>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	e015      	b.n	800454c <HAL_RCC_OscConfig+0x614>
 8004520:	40021000 	.word	0x40021000
 8004524:	2302      	movs	r3, #2
 8004526:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800452e:	fa93 f3a3 	rbit	r3, r3
 8004532:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004536:	2302      	movs	r3, #2
 8004538:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800453c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004540:	fa93 f3a3 	rbit	r3, r3
 8004544:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004548:	4bc8      	ldr	r3, [pc, #800]	; (800486c <HAL_RCC_OscConfig+0x934>)
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	2202      	movs	r2, #2
 800454e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8004552:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004556:	fa92 f2a2 	rbit	r2, r2
 800455a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800455e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004562:	fab2 f282 	clz	r2, r2
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	f042 0220 	orr.w	r2, r2, #32
 800456c:	b2d2      	uxtb	r2, r2
 800456e:	f002 021f 	and.w	r2, r2, #31
 8004572:	2101      	movs	r1, #1
 8004574:	fa01 f202 	lsl.w	r2, r1, r2
 8004578:	4013      	ands	r3, r2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1ad      	bne.n	80044da <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800457e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004582:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 8110 	beq.w	80047b4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004598:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d079      	beq.n	8004698 <HAL_RCC_OscConfig+0x760>
 80045a4:	2301      	movs	r3, #1
 80045a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80045ae:	fa93 f3a3 	rbit	r3, r3
 80045b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80045b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045ba:	fab3 f383 	clz	r3, r3
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	461a      	mov	r2, r3
 80045c2:	4bab      	ldr	r3, [pc, #684]	; (8004870 <HAL_RCC_OscConfig+0x938>)
 80045c4:	4413      	add	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	461a      	mov	r2, r3
 80045ca:	2301      	movs	r3, #1
 80045cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ce:	f7fe f9d5 	bl	800297c <HAL_GetTick>
 80045d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045d6:	e00a      	b.n	80045ee <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045d8:	f7fe f9d0 	bl	800297c <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d902      	bls.n	80045ee <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	f000 bcdb 	b.w	8004fa4 <HAL_RCC_OscConfig+0x106c>
 80045ee:	2302      	movs	r3, #2
 80045f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80045f8:	fa93 f3a3 	rbit	r3, r3
 80045fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004604:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004608:	2202      	movs	r2, #2
 800460a:	601a      	str	r2, [r3, #0]
 800460c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004610:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	fa93 f2a3 	rbit	r2, r3
 800461a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800461e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004622:	601a      	str	r2, [r3, #0]
 8004624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004628:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800462c:	2202      	movs	r2, #2
 800462e:	601a      	str	r2, [r3, #0]
 8004630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004634:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	fa93 f2a3 	rbit	r2, r3
 800463e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004642:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004646:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004648:	4b88      	ldr	r3, [pc, #544]	; (800486c <HAL_RCC_OscConfig+0x934>)
 800464a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800464c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004650:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004654:	2102      	movs	r1, #2
 8004656:	6019      	str	r1, [r3, #0]
 8004658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800465c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	fa93 f1a3 	rbit	r1, r3
 8004666:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800466a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800466e:	6019      	str	r1, [r3, #0]
  return result;
 8004670:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004674:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	fab3 f383 	clz	r3, r3
 800467e:	b2db      	uxtb	r3, r3
 8004680:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004684:	b2db      	uxtb	r3, r3
 8004686:	f003 031f 	and.w	r3, r3, #31
 800468a:	2101      	movs	r1, #1
 800468c:	fa01 f303 	lsl.w	r3, r1, r3
 8004690:	4013      	ands	r3, r2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0a0      	beq.n	80045d8 <HAL_RCC_OscConfig+0x6a0>
 8004696:	e08d      	b.n	80047b4 <HAL_RCC_OscConfig+0x87c>
 8004698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800469c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80046a0:	2201      	movs	r2, #1
 80046a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	fa93 f2a3 	rbit	r2, r3
 80046b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046b6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80046ba:	601a      	str	r2, [r3, #0]
  return result;
 80046bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046c0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80046c4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046c6:	fab3 f383 	clz	r3, r3
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	461a      	mov	r2, r3
 80046ce:	4b68      	ldr	r3, [pc, #416]	; (8004870 <HAL_RCC_OscConfig+0x938>)
 80046d0:	4413      	add	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	461a      	mov	r2, r3
 80046d6:	2300      	movs	r3, #0
 80046d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046da:	f7fe f94f 	bl	800297c <HAL_GetTick>
 80046de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e2:	e00a      	b.n	80046fa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046e4:	f7fe f94a 	bl	800297c <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d902      	bls.n	80046fa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	f000 bc55 	b.w	8004fa4 <HAL_RCC_OscConfig+0x106c>
 80046fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046fe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004702:	2202      	movs	r2, #2
 8004704:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800470a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	fa93 f2a3 	rbit	r2, r3
 8004714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004718:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004722:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004726:	2202      	movs	r2, #2
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800472e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	fa93 f2a3 	rbit	r2, r3
 8004738:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800473c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004746:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800474a:	2202      	movs	r2, #2
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004752:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	fa93 f2a3 	rbit	r2, r3
 800475c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004760:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004764:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004766:	4b41      	ldr	r3, [pc, #260]	; (800486c <HAL_RCC_OscConfig+0x934>)
 8004768:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800476a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800476e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004772:	2102      	movs	r1, #2
 8004774:	6019      	str	r1, [r3, #0]
 8004776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800477a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	fa93 f1a3 	rbit	r1, r3
 8004784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004788:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800478c:	6019      	str	r1, [r3, #0]
  return result;
 800478e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004792:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	fab3 f383 	clz	r3, r3
 800479c:	b2db      	uxtb	r3, r3
 800479e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	f003 031f 	and.w	r3, r3, #31
 80047a8:	2101      	movs	r1, #1
 80047aa:	fa01 f303 	lsl.w	r3, r1, r3
 80047ae:	4013      	ands	r3, r2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d197      	bne.n	80046e4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 81a1 	beq.w	8004b0c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ca:	2300      	movs	r3, #0
 80047cc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047d0:	4b26      	ldr	r3, [pc, #152]	; (800486c <HAL_RCC_OscConfig+0x934>)
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d116      	bne.n	800480a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047dc:	4b23      	ldr	r3, [pc, #140]	; (800486c <HAL_RCC_OscConfig+0x934>)
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	4a22      	ldr	r2, [pc, #136]	; (800486c <HAL_RCC_OscConfig+0x934>)
 80047e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e6:	61d3      	str	r3, [r2, #28]
 80047e8:	4b20      	ldr	r3, [pc, #128]	; (800486c <HAL_RCC_OscConfig+0x934>)
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80047f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047f4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047fe:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004802:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004804:	2301      	movs	r3, #1
 8004806:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800480a:	4b1a      	ldr	r3, [pc, #104]	; (8004874 <HAL_RCC_OscConfig+0x93c>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004812:	2b00      	cmp	r3, #0
 8004814:	d11a      	bne.n	800484c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004816:	4b17      	ldr	r3, [pc, #92]	; (8004874 <HAL_RCC_OscConfig+0x93c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a16      	ldr	r2, [pc, #88]	; (8004874 <HAL_RCC_OscConfig+0x93c>)
 800481c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004820:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004822:	f7fe f8ab 	bl	800297c <HAL_GetTick>
 8004826:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800482a:	e009      	b.n	8004840 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800482c:	f7fe f8a6 	bl	800297c <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b64      	cmp	r3, #100	; 0x64
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e3b1      	b.n	8004fa4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004840:	4b0c      	ldr	r3, [pc, #48]	; (8004874 <HAL_RCC_OscConfig+0x93c>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0ef      	beq.n	800482c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800484c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004850:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d10d      	bne.n	8004878 <HAL_RCC_OscConfig+0x940>
 800485c:	4b03      	ldr	r3, [pc, #12]	; (800486c <HAL_RCC_OscConfig+0x934>)
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	4a02      	ldr	r2, [pc, #8]	; (800486c <HAL_RCC_OscConfig+0x934>)
 8004862:	f043 0301 	orr.w	r3, r3, #1
 8004866:	6213      	str	r3, [r2, #32]
 8004868:	e03c      	b.n	80048e4 <HAL_RCC_OscConfig+0x9ac>
 800486a:	bf00      	nop
 800486c:	40021000 	.word	0x40021000
 8004870:	10908120 	.word	0x10908120
 8004874:	40007000 	.word	0x40007000
 8004878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800487c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10c      	bne.n	80048a2 <HAL_RCC_OscConfig+0x96a>
 8004888:	4bc1      	ldr	r3, [pc, #772]	; (8004b90 <HAL_RCC_OscConfig+0xc58>)
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	4ac0      	ldr	r2, [pc, #768]	; (8004b90 <HAL_RCC_OscConfig+0xc58>)
 800488e:	f023 0301 	bic.w	r3, r3, #1
 8004892:	6213      	str	r3, [r2, #32]
 8004894:	4bbe      	ldr	r3, [pc, #760]	; (8004b90 <HAL_RCC_OscConfig+0xc58>)
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	4abd      	ldr	r2, [pc, #756]	; (8004b90 <HAL_RCC_OscConfig+0xc58>)
 800489a:	f023 0304 	bic.w	r3, r3, #4
 800489e:	6213      	str	r3, [r2, #32]
 80048a0:	e020      	b.n	80048e4 <HAL_RCC_OscConfig+0x9ac>
 80048a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	2b05      	cmp	r3, #5
 80048b0:	d10c      	bne.n	80048cc <HAL_RCC_OscConfig+0x994>
 80048b2:	4bb7      	ldr	r3, [pc, #732]	; (8004b90 <HAL_RCC_OscConfig+0xc58>)
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	4ab6      	ldr	r2, [pc, #728]	; (8004b90 <HAL_RCC_OscConfig+0xc58>)
 80048b8:	f043 0304 	orr.w	r3, r3, #4
 80048bc:	6213      	str	r3, [r2, #32]
 80048be:	4bb4      	ldr	r3, [pc, #720]	; (8004b90 <HAL_RCC_OscConfig+0xc58>)
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	4ab3      	ldr	r2, [pc, #716]	; (8004b90 <HAL_RCC_OscConfig+0xc58>)
 80048c4:	f043 0301 	orr.w	r3, r3, #1
 80048c8:	6213      	str	r3, [r2, #32]
 80048ca:	e00b      	b.n	80048e4 <HAL_RCC_OscConfig+0x9ac>
 80048cc:	4bb0      	ldr	r3, [pc, #704]	; (8004b90 <HAL_RCC_OscConfig+0xc58>)
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	4aaf      	ldr	r2, [pc, #700]	; (8004b90 <HAL_RCC_OscConfig+0xc58>)
 80048d2:	f023 0301 	bic.w	r3, r3, #1
 80048d6:	6213      	str	r3, [r2, #32]
 80048d8:	4bad      	ldr	r3, [pc, #692]	; (8004b90 <HAL_RCC_OscConfig+0xc58>)
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	4aac      	ldr	r2, [pc, #688]	; (8004b90 <HAL_RCC_OscConfig+0xc58>)
 80048de:	f023 0304 	bic.w	r3, r3, #4
 80048e2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 8081 	beq.w	80049f8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f6:	f7fe f841 	bl	800297c <HAL_GetTick>
 80048fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048fe:	e00b      	b.n	8004918 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004900:	f7fe f83c 	bl	800297c <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004910:	4293      	cmp	r3, r2
 8004912:	d901      	bls.n	8004918 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e345      	b.n	8004fa4 <HAL_RCC_OscConfig+0x106c>
 8004918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800491c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004920:	2202      	movs	r2, #2
 8004922:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004924:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004928:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	fa93 f2a3 	rbit	r2, r3
 8004932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004936:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004940:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004944:	2202      	movs	r2, #2
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800494c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	fa93 f2a3 	rbit	r2, r3
 8004956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800495a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800495e:	601a      	str	r2, [r3, #0]
  return result;
 8004960:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004964:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004968:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800496a:	fab3 f383 	clz	r3, r3
 800496e:	b2db      	uxtb	r3, r3
 8004970:	095b      	lsrs	r3, r3, #5
 8004972:	b2db      	uxtb	r3, r3
 8004974:	f043 0302 	orr.w	r3, r3, #2
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d102      	bne.n	8004984 <HAL_RCC_OscConfig+0xa4c>
 800497e:	4b84      	ldr	r3, [pc, #528]	; (8004b90 <HAL_RCC_OscConfig+0xc58>)
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	e013      	b.n	80049ac <HAL_RCC_OscConfig+0xa74>
 8004984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004988:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800498c:	2202      	movs	r2, #2
 800498e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004994:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	fa93 f2a3 	rbit	r2, r3
 800499e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049a2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	4b79      	ldr	r3, [pc, #484]	; (8004b90 <HAL_RCC_OscConfig+0xc58>)
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049b0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80049b4:	2102      	movs	r1, #2
 80049b6:	6011      	str	r1, [r2, #0]
 80049b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049bc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80049c0:	6812      	ldr	r2, [r2, #0]
 80049c2:	fa92 f1a2 	rbit	r1, r2
 80049c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049ca:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80049ce:	6011      	str	r1, [r2, #0]
  return result;
 80049d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049d4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80049d8:	6812      	ldr	r2, [r2, #0]
 80049da:	fab2 f282 	clz	r2, r2
 80049de:	b2d2      	uxtb	r2, r2
 80049e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049e4:	b2d2      	uxtb	r2, r2
 80049e6:	f002 021f 	and.w	r2, r2, #31
 80049ea:	2101      	movs	r1, #1
 80049ec:	fa01 f202 	lsl.w	r2, r1, r2
 80049f0:	4013      	ands	r3, r2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d084      	beq.n	8004900 <HAL_RCC_OscConfig+0x9c8>
 80049f6:	e07f      	b.n	8004af8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049f8:	f7fd ffc0 	bl	800297c <HAL_GetTick>
 80049fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a00:	e00b      	b.n	8004a1a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a02:	f7fd ffbb 	bl	800297c <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e2c4      	b.n	8004fa4 <HAL_RCC_OscConfig+0x106c>
 8004a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a1e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004a22:	2202      	movs	r2, #2
 8004a24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a2a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	fa93 f2a3 	rbit	r2, r3
 8004a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a38:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a42:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004a46:	2202      	movs	r2, #2
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a4e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	fa93 f2a3 	rbit	r2, r3
 8004a58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a5c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004a60:	601a      	str	r2, [r3, #0]
  return result;
 8004a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a66:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004a6a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a6c:	fab3 f383 	clz	r3, r3
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	095b      	lsrs	r3, r3, #5
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	f043 0302 	orr.w	r3, r3, #2
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d102      	bne.n	8004a86 <HAL_RCC_OscConfig+0xb4e>
 8004a80:	4b43      	ldr	r3, [pc, #268]	; (8004b90 <HAL_RCC_OscConfig+0xc58>)
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	e013      	b.n	8004aae <HAL_RCC_OscConfig+0xb76>
 8004a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a8a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004a8e:	2202      	movs	r2, #2
 8004a90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a96:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	fa93 f2a3 	rbit	r2, r3
 8004aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004aa4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004aa8:	601a      	str	r2, [r3, #0]
 8004aaa:	4b39      	ldr	r3, [pc, #228]	; (8004b90 <HAL_RCC_OscConfig+0xc58>)
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ab2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004ab6:	2102      	movs	r1, #2
 8004ab8:	6011      	str	r1, [r2, #0]
 8004aba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004abe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004ac2:	6812      	ldr	r2, [r2, #0]
 8004ac4:	fa92 f1a2 	rbit	r1, r2
 8004ac8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004acc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004ad0:	6011      	str	r1, [r2, #0]
  return result;
 8004ad2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004ad6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004ada:	6812      	ldr	r2, [r2, #0]
 8004adc:	fab2 f282 	clz	r2, r2
 8004ae0:	b2d2      	uxtb	r2, r2
 8004ae2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ae6:	b2d2      	uxtb	r2, r2
 8004ae8:	f002 021f 	and.w	r2, r2, #31
 8004aec:	2101      	movs	r1, #1
 8004aee:	fa01 f202 	lsl.w	r2, r1, r2
 8004af2:	4013      	ands	r3, r2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d184      	bne.n	8004a02 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004af8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d105      	bne.n	8004b0c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b00:	4b23      	ldr	r3, [pc, #140]	; (8004b90 <HAL_RCC_OscConfig+0xc58>)
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	4a22      	ldr	r2, [pc, #136]	; (8004b90 <HAL_RCC_OscConfig+0xc58>)
 8004b06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b0a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	69db      	ldr	r3, [r3, #28]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 8242 	beq.w	8004fa2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b1e:	4b1c      	ldr	r3, [pc, #112]	; (8004b90 <HAL_RCC_OscConfig+0xc58>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f003 030c 	and.w	r3, r3, #12
 8004b26:	2b08      	cmp	r3, #8
 8004b28:	f000 8213 	beq.w	8004f52 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69db      	ldr	r3, [r3, #28]
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	f040 8162 	bne.w	8004e02 <HAL_RCC_OscConfig+0xeca>
 8004b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b42:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004b46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b50:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	fa93 f2a3 	rbit	r2, r3
 8004b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b5e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004b62:	601a      	str	r2, [r3, #0]
  return result;
 8004b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004b68:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004b6c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b6e:	fab3 f383 	clz	r3, r3
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004b78:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	461a      	mov	r2, r3
 8004b80:	2300      	movs	r3, #0
 8004b82:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b84:	f7fd fefa 	bl	800297c <HAL_GetTick>
 8004b88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b8c:	e00c      	b.n	8004ba8 <HAL_RCC_OscConfig+0xc70>
 8004b8e:	bf00      	nop
 8004b90:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b94:	f7fd fef2 	bl	800297c <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e1fd      	b.n	8004fa4 <HAL_RCC_OscConfig+0x106c>
 8004ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bac:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004bb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bba:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	fa93 f2a3 	rbit	r2, r3
 8004bc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bc8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004bcc:	601a      	str	r2, [r3, #0]
  return result;
 8004bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bd2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004bd6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bd8:	fab3 f383 	clz	r3, r3
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	095b      	lsrs	r3, r3, #5
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	f043 0301 	orr.w	r3, r3, #1
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d102      	bne.n	8004bf2 <HAL_RCC_OscConfig+0xcba>
 8004bec:	4bb0      	ldr	r3, [pc, #704]	; (8004eb0 <HAL_RCC_OscConfig+0xf78>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	e027      	b.n	8004c42 <HAL_RCC_OscConfig+0xd0a>
 8004bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004bf6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004bfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c04:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	fa93 f2a3 	rbit	r2, r3
 8004c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c12:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c1c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004c20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c2a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	fa93 f2a3 	rbit	r2, r3
 8004c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c38:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	4b9c      	ldr	r3, [pc, #624]	; (8004eb0 <HAL_RCC_OscConfig+0xf78>)
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c46:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004c4a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004c4e:	6011      	str	r1, [r2, #0]
 8004c50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c54:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004c58:	6812      	ldr	r2, [r2, #0]
 8004c5a:	fa92 f1a2 	rbit	r1, r2
 8004c5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c62:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004c66:	6011      	str	r1, [r2, #0]
  return result;
 8004c68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004c6c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004c70:	6812      	ldr	r2, [r2, #0]
 8004c72:	fab2 f282 	clz	r2, r2
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	f042 0220 	orr.w	r2, r2, #32
 8004c7c:	b2d2      	uxtb	r2, r2
 8004c7e:	f002 021f 	and.w	r2, r2, #31
 8004c82:	2101      	movs	r1, #1
 8004c84:	fa01 f202 	lsl.w	r2, r1, r2
 8004c88:	4013      	ands	r3, r2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d182      	bne.n	8004b94 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c8e:	4b88      	ldr	r3, [pc, #544]	; (8004eb0 <HAL_RCC_OscConfig+0xf78>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004c96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004c9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ca6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	430b      	orrs	r3, r1
 8004cb0:	497f      	ldr	r1, [pc, #508]	; (8004eb0 <HAL_RCC_OscConfig+0xf78>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	604b      	str	r3, [r1, #4]
 8004cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cba:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004cbe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004cc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cc8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	fa93 f2a3 	rbit	r2, r3
 8004cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004cd6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004cda:	601a      	str	r2, [r3, #0]
  return result;
 8004cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ce0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004ce4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ce6:	fab3 f383 	clz	r3, r3
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004cf0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cfc:	f7fd fe3e 	bl	800297c <HAL_GetTick>
 8004d00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d04:	e009      	b.n	8004d1a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d06:	f7fd fe39 	bl	800297c <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e144      	b.n	8004fa4 <HAL_RCC_OscConfig+0x106c>
 8004d1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d1e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004d22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d2c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	fa93 f2a3 	rbit	r2, r3
 8004d36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d3a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004d3e:	601a      	str	r2, [r3, #0]
  return result;
 8004d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d44:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004d48:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d4a:	fab3 f383 	clz	r3, r3
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	095b      	lsrs	r3, r3, #5
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	f043 0301 	orr.w	r3, r3, #1
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d102      	bne.n	8004d64 <HAL_RCC_OscConfig+0xe2c>
 8004d5e:	4b54      	ldr	r3, [pc, #336]	; (8004eb0 <HAL_RCC_OscConfig+0xf78>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	e027      	b.n	8004db4 <HAL_RCC_OscConfig+0xe7c>
 8004d64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d68:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004d6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d76:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	fa93 f2a3 	rbit	r2, r3
 8004d80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d84:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d8e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004d92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004d9c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	fa93 f2a3 	rbit	r2, r3
 8004da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004daa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	4b3f      	ldr	r3, [pc, #252]	; (8004eb0 <HAL_RCC_OscConfig+0xf78>)
 8004db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004db8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004dbc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004dc0:	6011      	str	r1, [r2, #0]
 8004dc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004dc6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004dca:	6812      	ldr	r2, [r2, #0]
 8004dcc:	fa92 f1a2 	rbit	r1, r2
 8004dd0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004dd4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004dd8:	6011      	str	r1, [r2, #0]
  return result;
 8004dda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004dde:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004de2:	6812      	ldr	r2, [r2, #0]
 8004de4:	fab2 f282 	clz	r2, r2
 8004de8:	b2d2      	uxtb	r2, r2
 8004dea:	f042 0220 	orr.w	r2, r2, #32
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	f002 021f 	and.w	r2, r2, #31
 8004df4:	2101      	movs	r1, #1
 8004df6:	fa01 f202 	lsl.w	r2, r1, r2
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d082      	beq.n	8004d06 <HAL_RCC_OscConfig+0xdce>
 8004e00:	e0cf      	b.n	8004fa2 <HAL_RCC_OscConfig+0x106a>
 8004e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e06:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004e0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e14:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	fa93 f2a3 	rbit	r2, r3
 8004e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e22:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004e26:	601a      	str	r2, [r3, #0]
  return result;
 8004e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e2c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004e30:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e32:	fab3 f383 	clz	r3, r3
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004e3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	461a      	mov	r2, r3
 8004e44:	2300      	movs	r3, #0
 8004e46:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e48:	f7fd fd98 	bl	800297c <HAL_GetTick>
 8004e4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e50:	e009      	b.n	8004e66 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e52:	f7fd fd93 	bl	800297c <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e09e      	b.n	8004fa4 <HAL_RCC_OscConfig+0x106c>
 8004e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e6a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004e6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004e72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e78:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	fa93 f2a3 	rbit	r2, r3
 8004e82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e86:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004e8a:	601a      	str	r2, [r3, #0]
  return result;
 8004e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004e90:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004e94:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e96:	fab3 f383 	clz	r3, r3
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	095b      	lsrs	r3, r3, #5
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	f043 0301 	orr.w	r3, r3, #1
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d104      	bne.n	8004eb4 <HAL_RCC_OscConfig+0xf7c>
 8004eaa:	4b01      	ldr	r3, [pc, #4]	; (8004eb0 <HAL_RCC_OscConfig+0xf78>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	e029      	b.n	8004f04 <HAL_RCC_OscConfig+0xfcc>
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eb8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004ebc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ec0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ec6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	fa93 f2a3 	rbit	r2, r3
 8004ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ed4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004ede:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004ee2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004eec:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	fa93 f2a3 	rbit	r2, r3
 8004ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004efa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	4b2b      	ldr	r3, [pc, #172]	; (8004fb0 <HAL_RCC_OscConfig+0x1078>)
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f08:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004f0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004f10:	6011      	str	r1, [r2, #0]
 8004f12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f16:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004f1a:	6812      	ldr	r2, [r2, #0]
 8004f1c:	fa92 f1a2 	rbit	r1, r2
 8004f20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f24:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004f28:	6011      	str	r1, [r2, #0]
  return result;
 8004f2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004f2e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004f32:	6812      	ldr	r2, [r2, #0]
 8004f34:	fab2 f282 	clz	r2, r2
 8004f38:	b2d2      	uxtb	r2, r2
 8004f3a:	f042 0220 	orr.w	r2, r2, #32
 8004f3e:	b2d2      	uxtb	r2, r2
 8004f40:	f002 021f 	and.w	r2, r2, #31
 8004f44:	2101      	movs	r1, #1
 8004f46:	fa01 f202 	lsl.w	r2, r1, r2
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d180      	bne.n	8004e52 <HAL_RCC_OscConfig+0xf1a>
 8004f50:	e027      	b.n	8004fa2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e01e      	b.n	8004fa4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f66:	4b12      	ldr	r3, [pc, #72]	; (8004fb0 <HAL_RCC_OscConfig+0x1078>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004f6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004f72:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d10b      	bne.n	8004f9e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004f86:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004f8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004f92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d001      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e000      	b.n	8004fa4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	40021000 	.word	0x40021000

08004fb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b09e      	sub	sp, #120	; 0x78
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e162      	b.n	8005292 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fcc:	4b90      	ldr	r3, [pc, #576]	; (8005210 <HAL_RCC_ClockConfig+0x25c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	683a      	ldr	r2, [r7, #0]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d910      	bls.n	8004ffc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fda:	4b8d      	ldr	r3, [pc, #564]	; (8005210 <HAL_RCC_ClockConfig+0x25c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f023 0207 	bic.w	r2, r3, #7
 8004fe2:	498b      	ldr	r1, [pc, #556]	; (8005210 <HAL_RCC_ClockConfig+0x25c>)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fea:	4b89      	ldr	r3, [pc, #548]	; (8005210 <HAL_RCC_ClockConfig+0x25c>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0307 	and.w	r3, r3, #7
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d001      	beq.n	8004ffc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e14a      	b.n	8005292 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d008      	beq.n	800501a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005008:	4b82      	ldr	r3, [pc, #520]	; (8005214 <HAL_RCC_ClockConfig+0x260>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	497f      	ldr	r1, [pc, #508]	; (8005214 <HAL_RCC_ClockConfig+0x260>)
 8005016:	4313      	orrs	r3, r2
 8005018:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 80dc 	beq.w	80051e0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	2b01      	cmp	r3, #1
 800502e:	d13c      	bne.n	80050aa <HAL_RCC_ClockConfig+0xf6>
 8005030:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005034:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005036:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005038:	fa93 f3a3 	rbit	r3, r3
 800503c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800503e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005040:	fab3 f383 	clz	r3, r3
 8005044:	b2db      	uxtb	r3, r3
 8005046:	095b      	lsrs	r3, r3, #5
 8005048:	b2db      	uxtb	r3, r3
 800504a:	f043 0301 	orr.w	r3, r3, #1
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b01      	cmp	r3, #1
 8005052:	d102      	bne.n	800505a <HAL_RCC_ClockConfig+0xa6>
 8005054:	4b6f      	ldr	r3, [pc, #444]	; (8005214 <HAL_RCC_ClockConfig+0x260>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	e00f      	b.n	800507a <HAL_RCC_ClockConfig+0xc6>
 800505a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800505e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005060:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005062:	fa93 f3a3 	rbit	r3, r3
 8005066:	667b      	str	r3, [r7, #100]	; 0x64
 8005068:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800506c:	663b      	str	r3, [r7, #96]	; 0x60
 800506e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005070:	fa93 f3a3 	rbit	r3, r3
 8005074:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005076:	4b67      	ldr	r3, [pc, #412]	; (8005214 <HAL_RCC_ClockConfig+0x260>)
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800507e:	65ba      	str	r2, [r7, #88]	; 0x58
 8005080:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005082:	fa92 f2a2 	rbit	r2, r2
 8005086:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8005088:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800508a:	fab2 f282 	clz	r2, r2
 800508e:	b2d2      	uxtb	r2, r2
 8005090:	f042 0220 	orr.w	r2, r2, #32
 8005094:	b2d2      	uxtb	r2, r2
 8005096:	f002 021f 	and.w	r2, r2, #31
 800509a:	2101      	movs	r1, #1
 800509c:	fa01 f202 	lsl.w	r2, r1, r2
 80050a0:	4013      	ands	r3, r2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d17b      	bne.n	800519e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e0f3      	b.n	8005292 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d13c      	bne.n	800512c <HAL_RCC_ClockConfig+0x178>
 80050b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050b6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050ba:	fa93 f3a3 	rbit	r3, r3
 80050be:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80050c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050c2:	fab3 f383 	clz	r3, r3
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	095b      	lsrs	r3, r3, #5
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	f043 0301 	orr.w	r3, r3, #1
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d102      	bne.n	80050dc <HAL_RCC_ClockConfig+0x128>
 80050d6:	4b4f      	ldr	r3, [pc, #316]	; (8005214 <HAL_RCC_ClockConfig+0x260>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	e00f      	b.n	80050fc <HAL_RCC_ClockConfig+0x148>
 80050dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050e0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050e4:	fa93 f3a3 	rbit	r3, r3
 80050e8:	647b      	str	r3, [r7, #68]	; 0x44
 80050ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80050ee:	643b      	str	r3, [r7, #64]	; 0x40
 80050f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050f2:	fa93 f3a3 	rbit	r3, r3
 80050f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050f8:	4b46      	ldr	r3, [pc, #280]	; (8005214 <HAL_RCC_ClockConfig+0x260>)
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005100:	63ba      	str	r2, [r7, #56]	; 0x38
 8005102:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005104:	fa92 f2a2 	rbit	r2, r2
 8005108:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800510a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800510c:	fab2 f282 	clz	r2, r2
 8005110:	b2d2      	uxtb	r2, r2
 8005112:	f042 0220 	orr.w	r2, r2, #32
 8005116:	b2d2      	uxtb	r2, r2
 8005118:	f002 021f 	and.w	r2, r2, #31
 800511c:	2101      	movs	r1, #1
 800511e:	fa01 f202 	lsl.w	r2, r1, r2
 8005122:	4013      	ands	r3, r2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d13a      	bne.n	800519e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e0b2      	b.n	8005292 <HAL_RCC_ClockConfig+0x2de>
 800512c:	2302      	movs	r3, #2
 800512e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005132:	fa93 f3a3 	rbit	r3, r3
 8005136:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800513a:	fab3 f383 	clz	r3, r3
 800513e:	b2db      	uxtb	r3, r3
 8005140:	095b      	lsrs	r3, r3, #5
 8005142:	b2db      	uxtb	r3, r3
 8005144:	f043 0301 	orr.w	r3, r3, #1
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b01      	cmp	r3, #1
 800514c:	d102      	bne.n	8005154 <HAL_RCC_ClockConfig+0x1a0>
 800514e:	4b31      	ldr	r3, [pc, #196]	; (8005214 <HAL_RCC_ClockConfig+0x260>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	e00d      	b.n	8005170 <HAL_RCC_ClockConfig+0x1bc>
 8005154:	2302      	movs	r3, #2
 8005156:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515a:	fa93 f3a3 	rbit	r3, r3
 800515e:	627b      	str	r3, [r7, #36]	; 0x24
 8005160:	2302      	movs	r3, #2
 8005162:	623b      	str	r3, [r7, #32]
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	fa93 f3a3 	rbit	r3, r3
 800516a:	61fb      	str	r3, [r7, #28]
 800516c:	4b29      	ldr	r3, [pc, #164]	; (8005214 <HAL_RCC_ClockConfig+0x260>)
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	2202      	movs	r2, #2
 8005172:	61ba      	str	r2, [r7, #24]
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	fa92 f2a2 	rbit	r2, r2
 800517a:	617a      	str	r2, [r7, #20]
  return result;
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	fab2 f282 	clz	r2, r2
 8005182:	b2d2      	uxtb	r2, r2
 8005184:	f042 0220 	orr.w	r2, r2, #32
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	f002 021f 	and.w	r2, r2, #31
 800518e:	2101      	movs	r1, #1
 8005190:	fa01 f202 	lsl.w	r2, r1, r2
 8005194:	4013      	ands	r3, r2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e079      	b.n	8005292 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800519e:	4b1d      	ldr	r3, [pc, #116]	; (8005214 <HAL_RCC_ClockConfig+0x260>)
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f023 0203 	bic.w	r2, r3, #3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	491a      	ldr	r1, [pc, #104]	; (8005214 <HAL_RCC_ClockConfig+0x260>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051b0:	f7fd fbe4 	bl	800297c <HAL_GetTick>
 80051b4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051b6:	e00a      	b.n	80051ce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051b8:	f7fd fbe0 	bl	800297c <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e061      	b.n	8005292 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ce:	4b11      	ldr	r3, [pc, #68]	; (8005214 <HAL_RCC_ClockConfig+0x260>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f003 020c 	and.w	r2, r3, #12
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	429a      	cmp	r2, r3
 80051de:	d1eb      	bne.n	80051b8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051e0:	4b0b      	ldr	r3, [pc, #44]	; (8005210 <HAL_RCC_ClockConfig+0x25c>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0307 	and.w	r3, r3, #7
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d214      	bcs.n	8005218 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ee:	4b08      	ldr	r3, [pc, #32]	; (8005210 <HAL_RCC_ClockConfig+0x25c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f023 0207 	bic.w	r2, r3, #7
 80051f6:	4906      	ldr	r1, [pc, #24]	; (8005210 <HAL_RCC_ClockConfig+0x25c>)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051fe:	4b04      	ldr	r3, [pc, #16]	; (8005210 <HAL_RCC_ClockConfig+0x25c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0307 	and.w	r3, r3, #7
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	429a      	cmp	r2, r3
 800520a:	d005      	beq.n	8005218 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e040      	b.n	8005292 <HAL_RCC_ClockConfig+0x2de>
 8005210:	40022000 	.word	0x40022000
 8005214:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b00      	cmp	r3, #0
 8005222:	d008      	beq.n	8005236 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005224:	4b1d      	ldr	r3, [pc, #116]	; (800529c <HAL_RCC_ClockConfig+0x2e8>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	491a      	ldr	r1, [pc, #104]	; (800529c <HAL_RCC_ClockConfig+0x2e8>)
 8005232:	4313      	orrs	r3, r2
 8005234:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0308 	and.w	r3, r3, #8
 800523e:	2b00      	cmp	r3, #0
 8005240:	d009      	beq.n	8005256 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005242:	4b16      	ldr	r3, [pc, #88]	; (800529c <HAL_RCC_ClockConfig+0x2e8>)
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	00db      	lsls	r3, r3, #3
 8005250:	4912      	ldr	r1, [pc, #72]	; (800529c <HAL_RCC_ClockConfig+0x2e8>)
 8005252:	4313      	orrs	r3, r2
 8005254:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005256:	f000 f829 	bl	80052ac <HAL_RCC_GetSysClockFreq>
 800525a:	4601      	mov	r1, r0
 800525c:	4b0f      	ldr	r3, [pc, #60]	; (800529c <HAL_RCC_ClockConfig+0x2e8>)
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005264:	22f0      	movs	r2, #240	; 0xf0
 8005266:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	fa92 f2a2 	rbit	r2, r2
 800526e:	60fa      	str	r2, [r7, #12]
  return result;
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	fab2 f282 	clz	r2, r2
 8005276:	b2d2      	uxtb	r2, r2
 8005278:	40d3      	lsrs	r3, r2
 800527a:	4a09      	ldr	r2, [pc, #36]	; (80052a0 <HAL_RCC_ClockConfig+0x2ec>)
 800527c:	5cd3      	ldrb	r3, [r2, r3]
 800527e:	fa21 f303 	lsr.w	r3, r1, r3
 8005282:	4a08      	ldr	r2, [pc, #32]	; (80052a4 <HAL_RCC_ClockConfig+0x2f0>)
 8005284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005286:	4b08      	ldr	r3, [pc, #32]	; (80052a8 <HAL_RCC_ClockConfig+0x2f4>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4618      	mov	r0, r3
 800528c:	f7fc fd42 	bl	8001d14 <HAL_InitTick>
  
  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3778      	adds	r7, #120	; 0x78
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	40021000 	.word	0x40021000
 80052a0:	0800bf34 	.word	0x0800bf34
 80052a4:	2000000c 	.word	0x2000000c
 80052a8:	20000010 	.word	0x20000010

080052ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	2300      	movs	r3, #0
 80052b8:	60bb      	str	r3, [r7, #8]
 80052ba:	2300      	movs	r3, #0
 80052bc:	617b      	str	r3, [r7, #20]
 80052be:	2300      	movs	r3, #0
 80052c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80052c6:	4b1e      	ldr	r3, [pc, #120]	; (8005340 <HAL_RCC_GetSysClockFreq+0x94>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f003 030c 	and.w	r3, r3, #12
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	d002      	beq.n	80052dc <HAL_RCC_GetSysClockFreq+0x30>
 80052d6:	2b08      	cmp	r3, #8
 80052d8:	d003      	beq.n	80052e2 <HAL_RCC_GetSysClockFreq+0x36>
 80052da:	e026      	b.n	800532a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80052dc:	4b19      	ldr	r3, [pc, #100]	; (8005344 <HAL_RCC_GetSysClockFreq+0x98>)
 80052de:	613b      	str	r3, [r7, #16]
      break;
 80052e0:	e026      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	0c9b      	lsrs	r3, r3, #18
 80052e6:	f003 030f 	and.w	r3, r3, #15
 80052ea:	4a17      	ldr	r2, [pc, #92]	; (8005348 <HAL_RCC_GetSysClockFreq+0x9c>)
 80052ec:	5cd3      	ldrb	r3, [r2, r3]
 80052ee:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80052f0:	4b13      	ldr	r3, [pc, #76]	; (8005340 <HAL_RCC_GetSysClockFreq+0x94>)
 80052f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f4:	f003 030f 	and.w	r3, r3, #15
 80052f8:	4a14      	ldr	r2, [pc, #80]	; (800534c <HAL_RCC_GetSysClockFreq+0xa0>)
 80052fa:	5cd3      	ldrb	r3, [r2, r3]
 80052fc:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d008      	beq.n	800531a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005308:	4a0e      	ldr	r2, [pc, #56]	; (8005344 <HAL_RCC_GetSysClockFreq+0x98>)
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	fb02 f303 	mul.w	r3, r2, r3
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	e004      	b.n	8005324 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a0c      	ldr	r2, [pc, #48]	; (8005350 <HAL_RCC_GetSysClockFreq+0xa4>)
 800531e:	fb02 f303 	mul.w	r3, r2, r3
 8005322:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	613b      	str	r3, [r7, #16]
      break;
 8005328:	e002      	b.n	8005330 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800532a:	4b06      	ldr	r3, [pc, #24]	; (8005344 <HAL_RCC_GetSysClockFreq+0x98>)
 800532c:	613b      	str	r3, [r7, #16]
      break;
 800532e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005330:	693b      	ldr	r3, [r7, #16]
}
 8005332:	4618      	mov	r0, r3
 8005334:	371c      	adds	r7, #28
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40021000 	.word	0x40021000
 8005344:	007a1200 	.word	0x007a1200
 8005348:	0800bf4c 	.word	0x0800bf4c
 800534c:	0800bf5c 	.word	0x0800bf5c
 8005350:	003d0900 	.word	0x003d0900

08005354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005354:	b480      	push	{r7}
 8005356:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005358:	4b03      	ldr	r3, [pc, #12]	; (8005368 <HAL_RCC_GetHCLKFreq+0x14>)
 800535a:	681b      	ldr	r3, [r3, #0]
}
 800535c:	4618      	mov	r0, r3
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	2000000c 	.word	0x2000000c

0800536c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005372:	f7ff ffef 	bl	8005354 <HAL_RCC_GetHCLKFreq>
 8005376:	4601      	mov	r1, r0
 8005378:	4b0b      	ldr	r3, [pc, #44]	; (80053a8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005380:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005384:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	fa92 f2a2 	rbit	r2, r2
 800538c:	603a      	str	r2, [r7, #0]
  return result;
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	fab2 f282 	clz	r2, r2
 8005394:	b2d2      	uxtb	r2, r2
 8005396:	40d3      	lsrs	r3, r2
 8005398:	4a04      	ldr	r2, [pc, #16]	; (80053ac <HAL_RCC_GetPCLK1Freq+0x40>)
 800539a:	5cd3      	ldrb	r3, [r2, r3]
 800539c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80053a0:	4618      	mov	r0, r3
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40021000 	.word	0x40021000
 80053ac:	0800bf44 	.word	0x0800bf44

080053b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80053b6:	f7ff ffcd 	bl	8005354 <HAL_RCC_GetHCLKFreq>
 80053ba:	4601      	mov	r1, r0
 80053bc:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <HAL_RCC_GetPCLK2Freq+0x3c>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80053c4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80053c8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	fa92 f2a2 	rbit	r2, r2
 80053d0:	603a      	str	r2, [r7, #0]
  return result;
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	fab2 f282 	clz	r2, r2
 80053d8:	b2d2      	uxtb	r2, r2
 80053da:	40d3      	lsrs	r3, r2
 80053dc:	4a04      	ldr	r2, [pc, #16]	; (80053f0 <HAL_RCC_GetPCLK2Freq+0x40>)
 80053de:	5cd3      	ldrb	r3, [r2, r3]
 80053e0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80053e4:	4618      	mov	r0, r3
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	40021000 	.word	0x40021000
 80053f0:	0800bf44 	.word	0x0800bf44

080053f4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	220f      	movs	r2, #15
 8005402:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005404:	4b12      	ldr	r3, [pc, #72]	; (8005450 <HAL_RCC_GetClockConfig+0x5c>)
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f003 0203 	and.w	r2, r3, #3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005410:	4b0f      	ldr	r3, [pc, #60]	; (8005450 <HAL_RCC_GetClockConfig+0x5c>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800541c:	4b0c      	ldr	r3, [pc, #48]	; (8005450 <HAL_RCC_GetClockConfig+0x5c>)
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005428:	4b09      	ldr	r3, [pc, #36]	; (8005450 <HAL_RCC_GetClockConfig+0x5c>)
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	08db      	lsrs	r3, r3, #3
 800542e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8005436:	4b07      	ldr	r3, [pc, #28]	; (8005454 <HAL_RCC_GetClockConfig+0x60>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0207 	and.w	r2, r3, #7
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	601a      	str	r2, [r3, #0]
}
 8005442:	bf00      	nop
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	40021000 	.word	0x40021000
 8005454:	40022000 	.word	0x40022000

08005458 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b092      	sub	sp, #72	; 0x48
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005460:	2300      	movs	r3, #0
 8005462:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005468:	2300      	movs	r3, #0
 800546a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005476:	2b00      	cmp	r3, #0
 8005478:	f000 80d4 	beq.w	8005624 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800547c:	4b4e      	ldr	r3, [pc, #312]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10e      	bne.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005488:	4b4b      	ldr	r3, [pc, #300]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	4a4a      	ldr	r2, [pc, #296]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800548e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005492:	61d3      	str	r3, [r2, #28]
 8005494:	4b48      	ldr	r3, [pc, #288]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005496:	69db      	ldr	r3, [r3, #28]
 8005498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800549c:	60bb      	str	r3, [r7, #8]
 800549e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054a0:	2301      	movs	r3, #1
 80054a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a6:	4b45      	ldr	r3, [pc, #276]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d118      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054b2:	4b42      	ldr	r3, [pc, #264]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a41      	ldr	r2, [pc, #260]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054be:	f7fd fa5d 	bl	800297c <HAL_GetTick>
 80054c2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054c4:	e008      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054c6:	f7fd fa59 	bl	800297c <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	2b64      	cmp	r3, #100	; 0x64
 80054d2:	d901      	bls.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e14b      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054d8:	4b38      	ldr	r3, [pc, #224]	; (80055bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d0f0      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054e4:	4b34      	ldr	r3, [pc, #208]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f000 8084 	beq.w	80055fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005500:	429a      	cmp	r2, r3
 8005502:	d07c      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005504:	4b2c      	ldr	r3, [pc, #176]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800550c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800550e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005512:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005516:	fa93 f3a3 	rbit	r3, r3
 800551a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800551c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800551e:	fab3 f383 	clz	r3, r3
 8005522:	b2db      	uxtb	r3, r3
 8005524:	461a      	mov	r2, r3
 8005526:	4b26      	ldr	r3, [pc, #152]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005528:	4413      	add	r3, r2
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	461a      	mov	r2, r3
 800552e:	2301      	movs	r3, #1
 8005530:	6013      	str	r3, [r2, #0]
 8005532:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005536:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553a:	fa93 f3a3 	rbit	r3, r3
 800553e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005542:	fab3 f383 	clz	r3, r3
 8005546:	b2db      	uxtb	r3, r3
 8005548:	461a      	mov	r2, r3
 800554a:	4b1d      	ldr	r3, [pc, #116]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800554c:	4413      	add	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	461a      	mov	r2, r3
 8005552:	2300      	movs	r3, #0
 8005554:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005556:	4a18      	ldr	r2, [pc, #96]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800555a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800555c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d04b      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005566:	f7fd fa09 	bl	800297c <HAL_GetTick>
 800556a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800556c:	e00a      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800556e:	f7fd fa05 	bl	800297c <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	f241 3288 	movw	r2, #5000	; 0x1388
 800557c:	4293      	cmp	r3, r2
 800557e:	d901      	bls.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e0f5      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8005584:	2302      	movs	r3, #2
 8005586:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558a:	fa93 f3a3 	rbit	r3, r3
 800558e:	627b      	str	r3, [r7, #36]	; 0x24
 8005590:	2302      	movs	r3, #2
 8005592:	623b      	str	r3, [r7, #32]
 8005594:	6a3b      	ldr	r3, [r7, #32]
 8005596:	fa93 f3a3 	rbit	r3, r3
 800559a:	61fb      	str	r3, [r7, #28]
  return result;
 800559c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800559e:	fab3 f383 	clz	r3, r3
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	095b      	lsrs	r3, r3, #5
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	f043 0302 	orr.w	r3, r3, #2
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d108      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80055b2:	4b01      	ldr	r3, [pc, #4]	; (80055b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055b4:	6a1b      	ldr	r3, [r3, #32]
 80055b6:	e00d      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80055b8:	40021000 	.word	0x40021000
 80055bc:	40007000 	.word	0x40007000
 80055c0:	10908100 	.word	0x10908100
 80055c4:	2302      	movs	r3, #2
 80055c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	fa93 f3a3 	rbit	r3, r3
 80055ce:	617b      	str	r3, [r7, #20]
 80055d0:	4b69      	ldr	r3, [pc, #420]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80055d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d4:	2202      	movs	r2, #2
 80055d6:	613a      	str	r2, [r7, #16]
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	fa92 f2a2 	rbit	r2, r2
 80055de:	60fa      	str	r2, [r7, #12]
  return result;
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	fab2 f282 	clz	r2, r2
 80055e6:	b2d2      	uxtb	r2, r2
 80055e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055ec:	b2d2      	uxtb	r2, r2
 80055ee:	f002 021f 	and.w	r2, r2, #31
 80055f2:	2101      	movs	r1, #1
 80055f4:	fa01 f202 	lsl.w	r2, r1, r2
 80055f8:	4013      	ands	r3, r2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0b7      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80055fe:	4b5e      	ldr	r3, [pc, #376]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	495b      	ldr	r1, [pc, #364]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800560c:	4313      	orrs	r3, r2
 800560e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005610:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005614:	2b01      	cmp	r3, #1
 8005616:	d105      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005618:	4b57      	ldr	r3, [pc, #348]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800561a:	69db      	ldr	r3, [r3, #28]
 800561c:	4a56      	ldr	r2, [pc, #344]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800561e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005622:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	d008      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005630:	4b51      	ldr	r3, [pc, #324]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005634:	f023 0203 	bic.w	r2, r3, #3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	494e      	ldr	r1, [pc, #312]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800563e:	4313      	orrs	r3, r2
 8005640:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0320 	and.w	r3, r3, #32
 800564a:	2b00      	cmp	r3, #0
 800564c:	d008      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800564e:	4b4a      	ldr	r3, [pc, #296]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005652:	f023 0210 	bic.w	r2, r3, #16
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	4947      	ldr	r1, [pc, #284]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800565c:	4313      	orrs	r3, r2
 800565e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d008      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800566c:	4b42      	ldr	r3, [pc, #264]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005678:	493f      	ldr	r1, [pc, #252]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800567a:	4313      	orrs	r3, r2
 800567c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005686:	2b00      	cmp	r3, #0
 8005688:	d008      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800568a:	4b3b      	ldr	r3, [pc, #236]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800568c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568e:	f023 0220 	bic.w	r2, r3, #32
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	4938      	ldr	r1, [pc, #224]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005698:	4313      	orrs	r3, r2
 800569a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d008      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056a8:	4b33      	ldr	r3, [pc, #204]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ac:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	4930      	ldr	r1, [pc, #192]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d008      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80056c6:	4b2c      	ldr	r3, [pc, #176]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	4929      	ldr	r1, [pc, #164]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d008      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80056e4:	4b24      	ldr	r3, [pc, #144]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	4921      	ldr	r1, [pc, #132]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80056f2:	4313      	orrs	r3, r2
 80056f4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d008      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005702:	4b1d      	ldr	r3, [pc, #116]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005706:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	491a      	ldr	r1, [pc, #104]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005710:	4313      	orrs	r3, r2
 8005712:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d008      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005720:	4b15      	ldr	r3, [pc, #84]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005724:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	4912      	ldr	r1, [pc, #72]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800572e:	4313      	orrs	r3, r2
 8005730:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d008      	beq.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800573e:	4b0e      	ldr	r3, [pc, #56]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005742:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800574a:	490b      	ldr	r1, [pc, #44]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800574c:	4313      	orrs	r3, r2
 800574e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d008      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800575c:	4b06      	ldr	r3, [pc, #24]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800575e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005760:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005768:	4903      	ldr	r1, [pc, #12]	; (8005778 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800576a:	4313      	orrs	r3, r2
 800576c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3748      	adds	r7, #72	; 0x48
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	40021000 	.word	0x40021000

0800577c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e049      	b.n	8005822 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d106      	bne.n	80057a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7fc fe38 	bl	8002418 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	3304      	adds	r3, #4
 80057b8:	4619      	mov	r1, r3
 80057ba:	4610      	mov	r0, r2
 80057bc:	f000 fdaa 	bl	8006314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
	...

0800582c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b01      	cmp	r3, #1
 800583e:	d001      	beq.n	8005844 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e03b      	b.n	80058bc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2202      	movs	r2, #2
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0201 	orr.w	r2, r2, #1
 800585a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a19      	ldr	r2, [pc, #100]	; (80058c8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d009      	beq.n	800587a <HAL_TIM_Base_Start_IT+0x4e>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800586e:	d004      	beq.n	800587a <HAL_TIM_Base_Start_IT+0x4e>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a15      	ldr	r2, [pc, #84]	; (80058cc <HAL_TIM_Base_Start_IT+0xa0>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d115      	bne.n	80058a6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	4b13      	ldr	r3, [pc, #76]	; (80058d0 <HAL_TIM_Base_Start_IT+0xa4>)
 8005882:	4013      	ands	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2b06      	cmp	r3, #6
 800588a:	d015      	beq.n	80058b8 <HAL_TIM_Base_Start_IT+0x8c>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005892:	d011      	beq.n	80058b8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f042 0201 	orr.w	r2, r2, #1
 80058a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a4:	e008      	b.n	80058b8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f042 0201 	orr.w	r2, r2, #1
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	e000      	b.n	80058ba <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3714      	adds	r7, #20
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	40012c00 	.word	0x40012c00
 80058cc:	40014000 	.word	0x40014000
 80058d0:	00010007 	.word	0x00010007

080058d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e049      	b.n	800597a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d106      	bne.n	8005900 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f841 	bl	8005982 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	3304      	adds	r3, #4
 8005910:	4619      	mov	r1, r3
 8005912:	4610      	mov	r0, r2
 8005914:	f000 fcfe 	bl	8006314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005982:	b480      	push	{r7}
 8005984:	b083      	sub	sp, #12
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800598a:	bf00      	nop
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
	...

08005998 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b084      	sub	sp, #16
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d109      	bne.n	80059bc <HAL_TIM_PWM_Start+0x24>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	bf14      	ite	ne
 80059b4:	2301      	movne	r3, #1
 80059b6:	2300      	moveq	r3, #0
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	e03c      	b.n	8005a36 <HAL_TIM_PWM_Start+0x9e>
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	2b04      	cmp	r3, #4
 80059c0:	d109      	bne.n	80059d6 <HAL_TIM_PWM_Start+0x3e>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	bf14      	ite	ne
 80059ce:	2301      	movne	r3, #1
 80059d0:	2300      	moveq	r3, #0
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	e02f      	b.n	8005a36 <HAL_TIM_PWM_Start+0x9e>
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b08      	cmp	r3, #8
 80059da:	d109      	bne.n	80059f0 <HAL_TIM_PWM_Start+0x58>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	bf14      	ite	ne
 80059e8:	2301      	movne	r3, #1
 80059ea:	2300      	moveq	r3, #0
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	e022      	b.n	8005a36 <HAL_TIM_PWM_Start+0x9e>
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2b0c      	cmp	r3, #12
 80059f4:	d109      	bne.n	8005a0a <HAL_TIM_PWM_Start+0x72>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	bf14      	ite	ne
 8005a02:	2301      	movne	r3, #1
 8005a04:	2300      	moveq	r3, #0
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	e015      	b.n	8005a36 <HAL_TIM_PWM_Start+0x9e>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b10      	cmp	r3, #16
 8005a0e:	d109      	bne.n	8005a24 <HAL_TIM_PWM_Start+0x8c>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	bf14      	ite	ne
 8005a1c:	2301      	movne	r3, #1
 8005a1e:	2300      	moveq	r3, #0
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	e008      	b.n	8005a36 <HAL_TIM_PWM_Start+0x9e>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	bf14      	ite	ne
 8005a30:	2301      	movne	r3, #1
 8005a32:	2300      	moveq	r3, #0
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e083      	b.n	8005b46 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d104      	bne.n	8005a4e <HAL_TIM_PWM_Start+0xb6>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2202      	movs	r2, #2
 8005a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a4c:	e023      	b.n	8005a96 <HAL_TIM_PWM_Start+0xfe>
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	2b04      	cmp	r3, #4
 8005a52:	d104      	bne.n	8005a5e <HAL_TIM_PWM_Start+0xc6>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2202      	movs	r2, #2
 8005a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a5c:	e01b      	b.n	8005a96 <HAL_TIM_PWM_Start+0xfe>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	d104      	bne.n	8005a6e <HAL_TIM_PWM_Start+0xd6>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2202      	movs	r2, #2
 8005a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a6c:	e013      	b.n	8005a96 <HAL_TIM_PWM_Start+0xfe>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b0c      	cmp	r3, #12
 8005a72:	d104      	bne.n	8005a7e <HAL_TIM_PWM_Start+0xe6>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2202      	movs	r2, #2
 8005a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a7c:	e00b      	b.n	8005a96 <HAL_TIM_PWM_Start+0xfe>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b10      	cmp	r3, #16
 8005a82:	d104      	bne.n	8005a8e <HAL_TIM_PWM_Start+0xf6>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a8c:	e003      	b.n	8005a96 <HAL_TIM_PWM_Start+0xfe>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2202      	movs	r2, #2
 8005a92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	6839      	ldr	r1, [r7, #0]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f001 f885 	bl	8006bae <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a29      	ldr	r2, [pc, #164]	; (8005b50 <HAL_TIM_PWM_Start+0x1b8>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d00e      	beq.n	8005acc <HAL_TIM_PWM_Start+0x134>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a28      	ldr	r2, [pc, #160]	; (8005b54 <HAL_TIM_PWM_Start+0x1bc>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d009      	beq.n	8005acc <HAL_TIM_PWM_Start+0x134>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a26      	ldr	r2, [pc, #152]	; (8005b58 <HAL_TIM_PWM_Start+0x1c0>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d004      	beq.n	8005acc <HAL_TIM_PWM_Start+0x134>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a25      	ldr	r2, [pc, #148]	; (8005b5c <HAL_TIM_PWM_Start+0x1c4>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d101      	bne.n	8005ad0 <HAL_TIM_PWM_Start+0x138>
 8005acc:	2301      	movs	r3, #1
 8005ace:	e000      	b.n	8005ad2 <HAL_TIM_PWM_Start+0x13a>
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d007      	beq.n	8005ae6 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ae4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a19      	ldr	r2, [pc, #100]	; (8005b50 <HAL_TIM_PWM_Start+0x1b8>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d009      	beq.n	8005b04 <HAL_TIM_PWM_Start+0x16c>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af8:	d004      	beq.n	8005b04 <HAL_TIM_PWM_Start+0x16c>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a15      	ldr	r2, [pc, #84]	; (8005b54 <HAL_TIM_PWM_Start+0x1bc>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d115      	bne.n	8005b30 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689a      	ldr	r2, [r3, #8]
 8005b0a:	4b15      	ldr	r3, [pc, #84]	; (8005b60 <HAL_TIM_PWM_Start+0x1c8>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2b06      	cmp	r3, #6
 8005b14:	d015      	beq.n	8005b42 <HAL_TIM_PWM_Start+0x1aa>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b1c:	d011      	beq.n	8005b42 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f042 0201 	orr.w	r2, r2, #1
 8005b2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b2e:	e008      	b.n	8005b42 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f042 0201 	orr.w	r2, r2, #1
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	e000      	b.n	8005b44 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	40012c00 	.word	0x40012c00
 8005b54:	40014000 	.word	0x40014000
 8005b58:	40014400 	.word	0x40014400
 8005b5c:	40014800 	.word	0x40014800
 8005b60:	00010007 	.word	0x00010007

08005b64 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2200      	movs	r2, #0
 8005b74:	6839      	ldr	r1, [r7, #0]
 8005b76:	4618      	mov	r0, r3
 8005b78:	f001 f819 	bl	8006bae <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a3b      	ldr	r2, [pc, #236]	; (8005c70 <HAL_TIM_PWM_Stop+0x10c>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d00e      	beq.n	8005ba4 <HAL_TIM_PWM_Stop+0x40>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a3a      	ldr	r2, [pc, #232]	; (8005c74 <HAL_TIM_PWM_Stop+0x110>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d009      	beq.n	8005ba4 <HAL_TIM_PWM_Stop+0x40>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a38      	ldr	r2, [pc, #224]	; (8005c78 <HAL_TIM_PWM_Stop+0x114>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d004      	beq.n	8005ba4 <HAL_TIM_PWM_Stop+0x40>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a37      	ldr	r2, [pc, #220]	; (8005c7c <HAL_TIM_PWM_Stop+0x118>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d101      	bne.n	8005ba8 <HAL_TIM_PWM_Stop+0x44>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e000      	b.n	8005baa <HAL_TIM_PWM_Stop+0x46>
 8005ba8:	2300      	movs	r3, #0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d017      	beq.n	8005bde <HAL_TIM_PWM_Stop+0x7a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6a1a      	ldr	r2, [r3, #32]
 8005bb4:	f241 1311 	movw	r3, #4369	; 0x1111
 8005bb8:	4013      	ands	r3, r2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10f      	bne.n	8005bde <HAL_TIM_PWM_Stop+0x7a>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6a1a      	ldr	r2, [r3, #32]
 8005bc4:	f240 4344 	movw	r3, #1092	; 0x444
 8005bc8:	4013      	ands	r3, r2
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d107      	bne.n	8005bde <HAL_TIM_PWM_Stop+0x7a>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005bdc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6a1a      	ldr	r2, [r3, #32]
 8005be4:	f241 1311 	movw	r3, #4369	; 0x1111
 8005be8:	4013      	ands	r3, r2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10f      	bne.n	8005c0e <HAL_TIM_PWM_Stop+0xaa>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6a1a      	ldr	r2, [r3, #32]
 8005bf4:	f240 4344 	movw	r3, #1092	; 0x444
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d107      	bne.n	8005c0e <HAL_TIM_PWM_Stop+0xaa>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0201 	bic.w	r2, r2, #1
 8005c0c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d104      	bne.n	8005c1e <HAL_TIM_PWM_Stop+0xba>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c1c:	e023      	b.n	8005c66 <HAL_TIM_PWM_Stop+0x102>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b04      	cmp	r3, #4
 8005c22:	d104      	bne.n	8005c2e <HAL_TIM_PWM_Stop+0xca>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c2c:	e01b      	b.n	8005c66 <HAL_TIM_PWM_Stop+0x102>
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	2b08      	cmp	r3, #8
 8005c32:	d104      	bne.n	8005c3e <HAL_TIM_PWM_Stop+0xda>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c3c:	e013      	b.n	8005c66 <HAL_TIM_PWM_Stop+0x102>
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b0c      	cmp	r3, #12
 8005c42:	d104      	bne.n	8005c4e <HAL_TIM_PWM_Stop+0xea>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c4c:	e00b      	b.n	8005c66 <HAL_TIM_PWM_Stop+0x102>
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	2b10      	cmp	r3, #16
 8005c52:	d104      	bne.n	8005c5e <HAL_TIM_PWM_Stop+0xfa>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c5c:	e003      	b.n	8005c66 <HAL_TIM_PWM_Stop+0x102>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3708      	adds	r7, #8
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	40012c00 	.word	0x40012c00
 8005c74:	40014000 	.word	0x40014000
 8005c78:	40014400 	.word	0x40014400
 8005c7c:	40014800 	.word	0x40014800

08005c80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d020      	beq.n	8005ce4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d01b      	beq.n	8005ce4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f06f 0202 	mvn.w	r2, #2
 8005cb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	f003 0303 	and.w	r3, r3, #3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 fb03 	bl	80062d6 <HAL_TIM_IC_CaptureCallback>
 8005cd0:	e005      	b.n	8005cde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 faf5 	bl	80062c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 fb06 	bl	80062ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f003 0304 	and.w	r3, r3, #4
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d020      	beq.n	8005d30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f003 0304 	and.w	r3, r3, #4
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01b      	beq.n	8005d30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f06f 0204 	mvn.w	r2, #4
 8005d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2202      	movs	r2, #2
 8005d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fadd 	bl	80062d6 <HAL_TIM_IC_CaptureCallback>
 8005d1c:	e005      	b.n	8005d2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 facf 	bl	80062c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fae0 	bl	80062ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	f003 0308 	and.w	r3, r3, #8
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d020      	beq.n	8005d7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f003 0308 	and.w	r3, r3, #8
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d01b      	beq.n	8005d7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f06f 0208 	mvn.w	r2, #8
 8005d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2204      	movs	r2, #4
 8005d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	f003 0303 	and.w	r3, r3, #3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fab7 	bl	80062d6 <HAL_TIM_IC_CaptureCallback>
 8005d68:	e005      	b.n	8005d76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 faa9 	bl	80062c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 faba 	bl	80062ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	f003 0310 	and.w	r3, r3, #16
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d020      	beq.n	8005dc8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f003 0310 	and.w	r3, r3, #16
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d01b      	beq.n	8005dc8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f06f 0210 	mvn.w	r2, #16
 8005d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2208      	movs	r2, #8
 8005d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fa91 	bl	80062d6 <HAL_TIM_IC_CaptureCallback>
 8005db4:	e005      	b.n	8005dc2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fa83 	bl	80062c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 fa94 	bl	80062ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00c      	beq.n	8005dec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d007      	beq.n	8005dec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f06f 0201 	mvn.w	r2, #1
 8005de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7fb ff38 	bl	8001c5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00c      	beq.n	8005e10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d007      	beq.n	8005e10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 ffdc 	bl	8006dc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00c      	beq.n	8005e34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d007      	beq.n	8005e34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 ffd4 	bl	8006ddc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00c      	beq.n	8005e58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d007      	beq.n	8005e58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fa53 	bl	80062fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f003 0320 	and.w	r3, r3, #32
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00c      	beq.n	8005e7c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f003 0320 	and.w	r3, r3, #32
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d007      	beq.n	8005e7c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f06f 0220 	mvn.w	r2, #32
 8005e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 ff9c 	bl	8006db4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e7c:	bf00      	nop
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e90:	2300      	movs	r3, #0
 8005e92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d101      	bne.n	8005ea2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	e0ff      	b.n	80060a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b14      	cmp	r3, #20
 8005eae:	f200 80f0 	bhi.w	8006092 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005eb2:	a201      	add	r2, pc, #4	; (adr r2, 8005eb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb8:	08005f0d 	.word	0x08005f0d
 8005ebc:	08006093 	.word	0x08006093
 8005ec0:	08006093 	.word	0x08006093
 8005ec4:	08006093 	.word	0x08006093
 8005ec8:	08005f4d 	.word	0x08005f4d
 8005ecc:	08006093 	.word	0x08006093
 8005ed0:	08006093 	.word	0x08006093
 8005ed4:	08006093 	.word	0x08006093
 8005ed8:	08005f8f 	.word	0x08005f8f
 8005edc:	08006093 	.word	0x08006093
 8005ee0:	08006093 	.word	0x08006093
 8005ee4:	08006093 	.word	0x08006093
 8005ee8:	08005fcf 	.word	0x08005fcf
 8005eec:	08006093 	.word	0x08006093
 8005ef0:	08006093 	.word	0x08006093
 8005ef4:	08006093 	.word	0x08006093
 8005ef8:	08006011 	.word	0x08006011
 8005efc:	08006093 	.word	0x08006093
 8005f00:	08006093 	.word	0x08006093
 8005f04:	08006093 	.word	0x08006093
 8005f08:	08006051 	.word	0x08006051
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	68b9      	ldr	r1, [r7, #8]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 fa78 	bl	8006408 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	699a      	ldr	r2, [r3, #24]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f042 0208 	orr.w	r2, r2, #8
 8005f26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699a      	ldr	r2, [r3, #24]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 0204 	bic.w	r2, r2, #4
 8005f36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	6999      	ldr	r1, [r3, #24]
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	691a      	ldr	r2, [r3, #16]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	619a      	str	r2, [r3, #24]
      break;
 8005f4a:	e0a5      	b.n	8006098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68b9      	ldr	r1, [r7, #8]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 fade 	bl	8006514 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	699a      	ldr	r2, [r3, #24]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	699a      	ldr	r2, [r3, #24]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6999      	ldr	r1, [r3, #24]
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	021a      	lsls	r2, r3, #8
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	619a      	str	r2, [r3, #24]
      break;
 8005f8c:	e084      	b.n	8006098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68b9      	ldr	r1, [r7, #8]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f000 fb3d 	bl	8006614 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	69da      	ldr	r2, [r3, #28]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f042 0208 	orr.w	r2, r2, #8
 8005fa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	69da      	ldr	r2, [r3, #28]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 0204 	bic.w	r2, r2, #4
 8005fb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69d9      	ldr	r1, [r3, #28]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	691a      	ldr	r2, [r3, #16]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	61da      	str	r2, [r3, #28]
      break;
 8005fcc:	e064      	b.n	8006098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68b9      	ldr	r1, [r7, #8]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f000 fb9b 	bl	8006710 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	69da      	ldr	r2, [r3, #28]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69da      	ldr	r2, [r3, #28]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ff8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	69d9      	ldr	r1, [r3, #28]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	021a      	lsls	r2, r3, #8
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	430a      	orrs	r2, r1
 800600c:	61da      	str	r2, [r3, #28]
      break;
 800600e:	e043      	b.n	8006098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68b9      	ldr	r1, [r7, #8]
 8006016:	4618      	mov	r0, r3
 8006018:	f000 fbde 	bl	80067d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0208 	orr.w	r2, r2, #8
 800602a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0204 	bic.w	r2, r2, #4
 800603a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	691a      	ldr	r2, [r3, #16]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	430a      	orrs	r2, r1
 800604c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800604e:	e023      	b.n	8006098 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68b9      	ldr	r1, [r7, #8]
 8006056:	4618      	mov	r0, r3
 8006058:	f000 fc1c 	bl	8006894 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800606a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800607a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	021a      	lsls	r2, r3, #8
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006090:	e002      	b.n	8006098 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	75fb      	strb	r3, [r7, #23]
      break;
 8006096:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3718      	adds	r7, #24
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop

080060ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060b6:	2300      	movs	r3, #0
 80060b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d101      	bne.n	80060c8 <HAL_TIM_ConfigClockSource+0x1c>
 80060c4:	2302      	movs	r3, #2
 80060c6:	e0b6      	b.n	8006236 <HAL_TIM_ConfigClockSource+0x18a>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006104:	d03e      	beq.n	8006184 <HAL_TIM_ConfigClockSource+0xd8>
 8006106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800610a:	f200 8087 	bhi.w	800621c <HAL_TIM_ConfigClockSource+0x170>
 800610e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006112:	f000 8086 	beq.w	8006222 <HAL_TIM_ConfigClockSource+0x176>
 8006116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800611a:	d87f      	bhi.n	800621c <HAL_TIM_ConfigClockSource+0x170>
 800611c:	2b70      	cmp	r3, #112	; 0x70
 800611e:	d01a      	beq.n	8006156 <HAL_TIM_ConfigClockSource+0xaa>
 8006120:	2b70      	cmp	r3, #112	; 0x70
 8006122:	d87b      	bhi.n	800621c <HAL_TIM_ConfigClockSource+0x170>
 8006124:	2b60      	cmp	r3, #96	; 0x60
 8006126:	d050      	beq.n	80061ca <HAL_TIM_ConfigClockSource+0x11e>
 8006128:	2b60      	cmp	r3, #96	; 0x60
 800612a:	d877      	bhi.n	800621c <HAL_TIM_ConfigClockSource+0x170>
 800612c:	2b50      	cmp	r3, #80	; 0x50
 800612e:	d03c      	beq.n	80061aa <HAL_TIM_ConfigClockSource+0xfe>
 8006130:	2b50      	cmp	r3, #80	; 0x50
 8006132:	d873      	bhi.n	800621c <HAL_TIM_ConfigClockSource+0x170>
 8006134:	2b40      	cmp	r3, #64	; 0x40
 8006136:	d058      	beq.n	80061ea <HAL_TIM_ConfigClockSource+0x13e>
 8006138:	2b40      	cmp	r3, #64	; 0x40
 800613a:	d86f      	bhi.n	800621c <HAL_TIM_ConfigClockSource+0x170>
 800613c:	2b30      	cmp	r3, #48	; 0x30
 800613e:	d064      	beq.n	800620a <HAL_TIM_ConfigClockSource+0x15e>
 8006140:	2b30      	cmp	r3, #48	; 0x30
 8006142:	d86b      	bhi.n	800621c <HAL_TIM_ConfigClockSource+0x170>
 8006144:	2b20      	cmp	r3, #32
 8006146:	d060      	beq.n	800620a <HAL_TIM_ConfigClockSource+0x15e>
 8006148:	2b20      	cmp	r3, #32
 800614a:	d867      	bhi.n	800621c <HAL_TIM_ConfigClockSource+0x170>
 800614c:	2b00      	cmp	r3, #0
 800614e:	d05c      	beq.n	800620a <HAL_TIM_ConfigClockSource+0x15e>
 8006150:	2b10      	cmp	r3, #16
 8006152:	d05a      	beq.n	800620a <HAL_TIM_ConfigClockSource+0x15e>
 8006154:	e062      	b.n	800621c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006166:	f000 fd02 	bl	8006b6e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006178:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	609a      	str	r2, [r3, #8]
      break;
 8006182:	e04f      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006194:	f000 fceb 	bl	8006b6e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689a      	ldr	r2, [r3, #8]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061a6:	609a      	str	r2, [r3, #8]
      break;
 80061a8:	e03c      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061b6:	461a      	mov	r2, r3
 80061b8:	f000 fc5f 	bl	8006a7a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2150      	movs	r1, #80	; 0x50
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 fcb8 	bl	8006b38 <TIM_ITRx_SetConfig>
      break;
 80061c8:	e02c      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061d6:	461a      	mov	r2, r3
 80061d8:	f000 fc7e 	bl	8006ad8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2160      	movs	r1, #96	; 0x60
 80061e2:	4618      	mov	r0, r3
 80061e4:	f000 fca8 	bl	8006b38 <TIM_ITRx_SetConfig>
      break;
 80061e8:	e01c      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061f6:	461a      	mov	r2, r3
 80061f8:	f000 fc3f 	bl	8006a7a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2140      	movs	r1, #64	; 0x40
 8006202:	4618      	mov	r0, r3
 8006204:	f000 fc98 	bl	8006b38 <TIM_ITRx_SetConfig>
      break;
 8006208:	e00c      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4619      	mov	r1, r3
 8006214:	4610      	mov	r0, r2
 8006216:	f000 fc8f 	bl	8006b38 <TIM_ITRx_SetConfig>
      break;
 800621a:	e003      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	73fb      	strb	r3, [r7, #15]
      break;
 8006220:	e000      	b.n	8006224 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006222:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006234:	7bfb      	ldrb	r3, [r7, #15]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b082      	sub	sp, #8
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
 8006246:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800624e:	2b01      	cmp	r3, #1
 8006250:	d101      	bne.n	8006256 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006252:	2302      	movs	r3, #2
 8006254:	e031      	b.n	80062ba <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2202      	movs	r2, #2
 8006262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006266:	6839      	ldr	r1, [r7, #0]
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 fb73 	bl	8006954 <TIM_SlaveTimer_SetConfig>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d009      	beq.n	8006288 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e018      	b.n	80062ba <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68da      	ldr	r2, [r3, #12]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006296:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68da      	ldr	r2, [r3, #12]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80062a6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b083      	sub	sp, #12
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062ca:	bf00      	nop
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b083      	sub	sp, #12
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062de:	bf00      	nop
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b083      	sub	sp, #12
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062f2:	bf00      	nop
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062fe:	b480      	push	{r7}
 8006300:	b083      	sub	sp, #12
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006306:	bf00      	nop
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
	...

08006314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a34      	ldr	r2, [pc, #208]	; (80063f8 <TIM_Base_SetConfig+0xe4>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d003      	beq.n	8006334 <TIM_Base_SetConfig+0x20>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006332:	d108      	bne.n	8006346 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800633a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	4313      	orrs	r3, r2
 8006344:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a2b      	ldr	r2, [pc, #172]	; (80063f8 <TIM_Base_SetConfig+0xe4>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d00f      	beq.n	800636e <TIM_Base_SetConfig+0x5a>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006354:	d00b      	beq.n	800636e <TIM_Base_SetConfig+0x5a>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a28      	ldr	r2, [pc, #160]	; (80063fc <TIM_Base_SetConfig+0xe8>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d007      	beq.n	800636e <TIM_Base_SetConfig+0x5a>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a27      	ldr	r2, [pc, #156]	; (8006400 <TIM_Base_SetConfig+0xec>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d003      	beq.n	800636e <TIM_Base_SetConfig+0x5a>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a26      	ldr	r2, [pc, #152]	; (8006404 <TIM_Base_SetConfig+0xf0>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d108      	bne.n	8006380 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	4313      	orrs	r3, r2
 800637e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	4313      	orrs	r3, r2
 800638c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	689a      	ldr	r2, [r3, #8]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a14      	ldr	r2, [pc, #80]	; (80063f8 <TIM_Base_SetConfig+0xe4>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d00b      	beq.n	80063c4 <TIM_Base_SetConfig+0xb0>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a13      	ldr	r2, [pc, #76]	; (80063fc <TIM_Base_SetConfig+0xe8>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d007      	beq.n	80063c4 <TIM_Base_SetConfig+0xb0>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a12      	ldr	r2, [pc, #72]	; (8006400 <TIM_Base_SetConfig+0xec>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d003      	beq.n	80063c4 <TIM_Base_SetConfig+0xb0>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a11      	ldr	r2, [pc, #68]	; (8006404 <TIM_Base_SetConfig+0xf0>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d103      	bne.n	80063cc <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	691a      	ldr	r2, [r3, #16]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d105      	bne.n	80063ea <TIM_Base_SetConfig+0xd6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	f023 0201 	bic.w	r2, r3, #1
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	611a      	str	r2, [r3, #16]
  }
}
 80063ea:	bf00      	nop
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	40012c00 	.word	0x40012c00
 80063fc:	40014000 	.word	0x40014000
 8006400:	40014400 	.word	0x40014400
 8006404:	40014800 	.word	0x40014800

08006408 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	f023 0201 	bic.w	r2, r3, #1
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800643a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f023 0303 	bic.w	r3, r3, #3
 8006442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	4313      	orrs	r3, r2
 800644c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f023 0302 	bic.w	r3, r3, #2
 8006454:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	4313      	orrs	r3, r2
 800645e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a28      	ldr	r2, [pc, #160]	; (8006504 <TIM_OC1_SetConfig+0xfc>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00b      	beq.n	8006480 <TIM_OC1_SetConfig+0x78>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a27      	ldr	r2, [pc, #156]	; (8006508 <TIM_OC1_SetConfig+0x100>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d007      	beq.n	8006480 <TIM_OC1_SetConfig+0x78>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a26      	ldr	r2, [pc, #152]	; (800650c <TIM_OC1_SetConfig+0x104>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d003      	beq.n	8006480 <TIM_OC1_SetConfig+0x78>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a25      	ldr	r2, [pc, #148]	; (8006510 <TIM_OC1_SetConfig+0x108>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d10c      	bne.n	800649a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	f023 0308 	bic.w	r3, r3, #8
 8006486:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	4313      	orrs	r3, r2
 8006490:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f023 0304 	bic.w	r3, r3, #4
 8006498:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a19      	ldr	r2, [pc, #100]	; (8006504 <TIM_OC1_SetConfig+0xfc>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d00b      	beq.n	80064ba <TIM_OC1_SetConfig+0xb2>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a18      	ldr	r2, [pc, #96]	; (8006508 <TIM_OC1_SetConfig+0x100>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d007      	beq.n	80064ba <TIM_OC1_SetConfig+0xb2>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a17      	ldr	r2, [pc, #92]	; (800650c <TIM_OC1_SetConfig+0x104>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d003      	beq.n	80064ba <TIM_OC1_SetConfig+0xb2>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a16      	ldr	r2, [pc, #88]	; (8006510 <TIM_OC1_SetConfig+0x108>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d111      	bne.n	80064de <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	4313      	orrs	r3, r2
 80064dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	685a      	ldr	r2, [r3, #4]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	621a      	str	r2, [r3, #32]
}
 80064f8:	bf00      	nop
 80064fa:	371c      	adds	r7, #28
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr
 8006504:	40012c00 	.word	0x40012c00
 8006508:	40014000 	.word	0x40014000
 800650c:	40014400 	.word	0x40014400
 8006510:	40014800 	.word	0x40014800

08006514 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006514:	b480      	push	{r7}
 8006516:	b087      	sub	sp, #28
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a1b      	ldr	r3, [r3, #32]
 8006522:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	f023 0210 	bic.w	r2, r3, #16
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800654e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	021b      	lsls	r3, r3, #8
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	4313      	orrs	r3, r2
 800655a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f023 0320 	bic.w	r3, r3, #32
 8006562:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	011b      	lsls	r3, r3, #4
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	4313      	orrs	r3, r2
 800656e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a24      	ldr	r2, [pc, #144]	; (8006604 <TIM_OC2_SetConfig+0xf0>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d10d      	bne.n	8006594 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800657e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	011b      	lsls	r3, r3, #4
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	4313      	orrs	r3, r2
 800658a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006592:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a1b      	ldr	r2, [pc, #108]	; (8006604 <TIM_OC2_SetConfig+0xf0>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d00b      	beq.n	80065b4 <TIM_OC2_SetConfig+0xa0>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a1a      	ldr	r2, [pc, #104]	; (8006608 <TIM_OC2_SetConfig+0xf4>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d007      	beq.n	80065b4 <TIM_OC2_SetConfig+0xa0>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a19      	ldr	r2, [pc, #100]	; (800660c <TIM_OC2_SetConfig+0xf8>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d003      	beq.n	80065b4 <TIM_OC2_SetConfig+0xa0>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a18      	ldr	r2, [pc, #96]	; (8006610 <TIM_OC2_SetConfig+0xfc>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d113      	bne.n	80065dc <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065ba:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065c2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	695b      	ldr	r3, [r3, #20]
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	4313      	orrs	r3, r2
 80065da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685a      	ldr	r2, [r3, #4]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	621a      	str	r2, [r3, #32]
}
 80065f6:	bf00      	nop
 80065f8:	371c      	adds	r7, #28
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	40012c00 	.word	0x40012c00
 8006608:	40014000 	.word	0x40014000
 800660c:	40014400 	.word	0x40014400
 8006610:	40014800 	.word	0x40014800

08006614 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006614:	b480      	push	{r7}
 8006616:	b087      	sub	sp, #28
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a1b      	ldr	r3, [r3, #32]
 8006628:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	69db      	ldr	r3, [r3, #28]
 800663a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006642:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f023 0303 	bic.w	r3, r3, #3
 800664e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	68fa      	ldr	r2, [r7, #12]
 8006656:	4313      	orrs	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006660:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	021b      	lsls	r3, r3, #8
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	4313      	orrs	r3, r2
 800666c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a23      	ldr	r2, [pc, #140]	; (8006700 <TIM_OC3_SetConfig+0xec>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d10d      	bne.n	8006692 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800667c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	021b      	lsls	r3, r3, #8
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	4313      	orrs	r3, r2
 8006688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006690:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a1a      	ldr	r2, [pc, #104]	; (8006700 <TIM_OC3_SetConfig+0xec>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d00b      	beq.n	80066b2 <TIM_OC3_SetConfig+0x9e>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a19      	ldr	r2, [pc, #100]	; (8006704 <TIM_OC3_SetConfig+0xf0>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d007      	beq.n	80066b2 <TIM_OC3_SetConfig+0x9e>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a18      	ldr	r2, [pc, #96]	; (8006708 <TIM_OC3_SetConfig+0xf4>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d003      	beq.n	80066b2 <TIM_OC3_SetConfig+0x9e>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a17      	ldr	r2, [pc, #92]	; (800670c <TIM_OC3_SetConfig+0xf8>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d113      	bne.n	80066da <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	011b      	lsls	r3, r3, #4
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	685a      	ldr	r2, [r3, #4]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	621a      	str	r2, [r3, #32]
}
 80066f4:	bf00      	nop
 80066f6:	371c      	adds	r7, #28
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr
 8006700:	40012c00 	.word	0x40012c00
 8006704:	40014000 	.word	0x40014000
 8006708:	40014400 	.word	0x40014400
 800670c:	40014800 	.word	0x40014800

08006710 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006710:	b480      	push	{r7}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a1b      	ldr	r3, [r3, #32]
 800671e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800673e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800674a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	021b      	lsls	r3, r3, #8
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	4313      	orrs	r3, r2
 8006756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800675e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	031b      	lsls	r3, r3, #12
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	4313      	orrs	r3, r2
 800676a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a16      	ldr	r2, [pc, #88]	; (80067c8 <TIM_OC4_SetConfig+0xb8>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d00b      	beq.n	800678c <TIM_OC4_SetConfig+0x7c>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a15      	ldr	r2, [pc, #84]	; (80067cc <TIM_OC4_SetConfig+0xbc>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d007      	beq.n	800678c <TIM_OC4_SetConfig+0x7c>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a14      	ldr	r2, [pc, #80]	; (80067d0 <TIM_OC4_SetConfig+0xc0>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d003      	beq.n	800678c <TIM_OC4_SetConfig+0x7c>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a13      	ldr	r2, [pc, #76]	; (80067d4 <TIM_OC4_SetConfig+0xc4>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d109      	bne.n	80067a0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006792:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	019b      	lsls	r3, r3, #6
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	4313      	orrs	r3, r2
 800679e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	621a      	str	r2, [r3, #32]
}
 80067ba:	bf00      	nop
 80067bc:	371c      	adds	r7, #28
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	40012c00 	.word	0x40012c00
 80067cc:	40014000 	.word	0x40014000
 80067d0:	40014400 	.word	0x40014400
 80067d4:	40014800 	.word	0x40014800

080067d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067d8:	b480      	push	{r7}
 80067da:	b087      	sub	sp, #28
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800680a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	4313      	orrs	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800681c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	041b      	lsls	r3, r3, #16
 8006824:	693a      	ldr	r2, [r7, #16]
 8006826:	4313      	orrs	r3, r2
 8006828:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a15      	ldr	r2, [pc, #84]	; (8006884 <TIM_OC5_SetConfig+0xac>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d00b      	beq.n	800684a <TIM_OC5_SetConfig+0x72>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a14      	ldr	r2, [pc, #80]	; (8006888 <TIM_OC5_SetConfig+0xb0>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d007      	beq.n	800684a <TIM_OC5_SetConfig+0x72>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a13      	ldr	r2, [pc, #76]	; (800688c <TIM_OC5_SetConfig+0xb4>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d003      	beq.n	800684a <TIM_OC5_SetConfig+0x72>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a12      	ldr	r2, [pc, #72]	; (8006890 <TIM_OC5_SetConfig+0xb8>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d109      	bne.n	800685e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006850:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	021b      	lsls	r3, r3, #8
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	4313      	orrs	r3, r2
 800685c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	685a      	ldr	r2, [r3, #4]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	693a      	ldr	r2, [r7, #16]
 8006876:	621a      	str	r2, [r3, #32]
}
 8006878:	bf00      	nop
 800687a:	371c      	adds	r7, #28
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr
 8006884:	40012c00 	.word	0x40012c00
 8006888:	40014000 	.word	0x40014000
 800688c:	40014400 	.word	0x40014400
 8006890:	40014800 	.word	0x40014800

08006894 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006894:	b480      	push	{r7}
 8006896:	b087      	sub	sp, #28
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a1b      	ldr	r3, [r3, #32]
 80068a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6a1b      	ldr	r3, [r3, #32]
 80068a8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	021b      	lsls	r3, r3, #8
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	051b      	lsls	r3, r3, #20
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a16      	ldr	r2, [pc, #88]	; (8006944 <TIM_OC6_SetConfig+0xb0>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d00b      	beq.n	8006908 <TIM_OC6_SetConfig+0x74>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a15      	ldr	r2, [pc, #84]	; (8006948 <TIM_OC6_SetConfig+0xb4>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d007      	beq.n	8006908 <TIM_OC6_SetConfig+0x74>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a14      	ldr	r2, [pc, #80]	; (800694c <TIM_OC6_SetConfig+0xb8>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d003      	beq.n	8006908 <TIM_OC6_SetConfig+0x74>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a13      	ldr	r2, [pc, #76]	; (8006950 <TIM_OC6_SetConfig+0xbc>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d109      	bne.n	800691c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800690e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	029b      	lsls	r3, r3, #10
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	4313      	orrs	r3, r2
 800691a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	621a      	str	r2, [r3, #32]
}
 8006936:	bf00      	nop
 8006938:	371c      	adds	r7, #28
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	40012c00 	.word	0x40012c00
 8006948:	40014000 	.word	0x40014000
 800694c:	40014400 	.word	0x40014400
 8006950:	40014800 	.word	0x40014800

08006954 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b086      	sub	sp, #24
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800695e:	2300      	movs	r3, #0
 8006960:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006970:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	4313      	orrs	r3, r2
 800697a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006982:	f023 0307 	bic.w	r3, r3, #7
 8006986:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	4313      	orrs	r3, r2
 8006990:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	2b70      	cmp	r3, #112	; 0x70
 80069a0:	d01a      	beq.n	80069d8 <TIM_SlaveTimer_SetConfig+0x84>
 80069a2:	2b70      	cmp	r3, #112	; 0x70
 80069a4:	d860      	bhi.n	8006a68 <TIM_SlaveTimer_SetConfig+0x114>
 80069a6:	2b60      	cmp	r3, #96	; 0x60
 80069a8:	d054      	beq.n	8006a54 <TIM_SlaveTimer_SetConfig+0x100>
 80069aa:	2b60      	cmp	r3, #96	; 0x60
 80069ac:	d85c      	bhi.n	8006a68 <TIM_SlaveTimer_SetConfig+0x114>
 80069ae:	2b50      	cmp	r3, #80	; 0x50
 80069b0:	d046      	beq.n	8006a40 <TIM_SlaveTimer_SetConfig+0xec>
 80069b2:	2b50      	cmp	r3, #80	; 0x50
 80069b4:	d858      	bhi.n	8006a68 <TIM_SlaveTimer_SetConfig+0x114>
 80069b6:	2b40      	cmp	r3, #64	; 0x40
 80069b8:	d019      	beq.n	80069ee <TIM_SlaveTimer_SetConfig+0x9a>
 80069ba:	2b40      	cmp	r3, #64	; 0x40
 80069bc:	d854      	bhi.n	8006a68 <TIM_SlaveTimer_SetConfig+0x114>
 80069be:	2b30      	cmp	r3, #48	; 0x30
 80069c0:	d055      	beq.n	8006a6e <TIM_SlaveTimer_SetConfig+0x11a>
 80069c2:	2b30      	cmp	r3, #48	; 0x30
 80069c4:	d850      	bhi.n	8006a68 <TIM_SlaveTimer_SetConfig+0x114>
 80069c6:	2b20      	cmp	r3, #32
 80069c8:	d051      	beq.n	8006a6e <TIM_SlaveTimer_SetConfig+0x11a>
 80069ca:	2b20      	cmp	r3, #32
 80069cc:	d84c      	bhi.n	8006a68 <TIM_SlaveTimer_SetConfig+0x114>
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d04d      	beq.n	8006a6e <TIM_SlaveTimer_SetConfig+0x11a>
 80069d2:	2b10      	cmp	r3, #16
 80069d4:	d04b      	beq.n	8006a6e <TIM_SlaveTimer_SetConfig+0x11a>
 80069d6:	e047      	b.n	8006a68 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80069e8:	f000 f8c1 	bl	8006b6e <TIM_ETR_SetConfig>
      break;
 80069ec:	e040      	b.n	8006a70 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2b05      	cmp	r3, #5
 80069f4:	d101      	bne.n	80069fa <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e03b      	b.n	8006a72 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6a1b      	ldr	r3, [r3, #32]
 8006a00:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6a1a      	ldr	r2, [r3, #32]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 0201 	bic.w	r2, r2, #1
 8006a10:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a20:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	011b      	lsls	r3, r3, #4
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	621a      	str	r2, [r3, #32]
      break;
 8006a3e:	e017      	b.n	8006a70 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	f000 f814 	bl	8006a7a <TIM_TI1_ConfigInputStage>
      break;
 8006a52:	e00d      	b.n	8006a70 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a60:	461a      	mov	r2, r3
 8006a62:	f000 f839 	bl	8006ad8 <TIM_TI2_ConfigInputStage>
      break;
 8006a66:	e003      	b.n	8006a70 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a6c:	e000      	b.n	8006a70 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8006a6e:	bf00      	nop
  }

  return status;
 8006a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3718      	adds	r7, #24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b087      	sub	sp, #28
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	60f8      	str	r0, [r7, #12]
 8006a82:	60b9      	str	r1, [r7, #8]
 8006a84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	f023 0201 	bic.w	r2, r3, #1
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006aa4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	011b      	lsls	r3, r3, #4
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	f023 030a 	bic.w	r3, r3, #10
 8006ab6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	621a      	str	r2, [r3, #32]
}
 8006acc:	bf00      	nop
 8006ace:	371c      	adds	r7, #28
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b087      	sub	sp, #28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	f023 0210 	bic.w	r2, r3, #16
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	031b      	lsls	r3, r3, #12
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b14:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	011b      	lsls	r3, r3, #4
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	621a      	str	r2, [r3, #32]
}
 8006b2c:	bf00      	nop
 8006b2e:	371c      	adds	r7, #28
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b50:	683a      	ldr	r2, [r7, #0]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	f043 0307 	orr.w	r3, r3, #7
 8006b5a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	609a      	str	r2, [r3, #8]
}
 8006b62:	bf00      	nop
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b087      	sub	sp, #28
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	60f8      	str	r0, [r7, #12]
 8006b76:	60b9      	str	r1, [r7, #8]
 8006b78:	607a      	str	r2, [r7, #4]
 8006b7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	021a      	lsls	r2, r3, #8
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	431a      	orrs	r2, r3
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	697a      	ldr	r2, [r7, #20]
 8006ba0:	609a      	str	r2, [r3, #8]
}
 8006ba2:	bf00      	nop
 8006ba4:	371c      	adds	r7, #28
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b087      	sub	sp, #28
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	60f8      	str	r0, [r7, #12]
 8006bb6:	60b9      	str	r1, [r7, #8]
 8006bb8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	f003 031f 	and.w	r3, r3, #31
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6a1a      	ldr	r2, [r3, #32]
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	43db      	mvns	r3, r3
 8006bd0:	401a      	ands	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6a1a      	ldr	r2, [r3, #32]
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	f003 031f 	and.w	r3, r3, #31
 8006be0:	6879      	ldr	r1, [r7, #4]
 8006be2:	fa01 f303 	lsl.w	r3, r1, r3
 8006be6:	431a      	orrs	r2, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	621a      	str	r2, [r3, #32]
}
 8006bec:	bf00      	nop
 8006bee:	371c      	adds	r7, #28
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d101      	bne.n	8006c10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	e04f      	b.n	8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a21      	ldr	r2, [pc, #132]	; (8006cbc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d108      	bne.n	8006c4c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c40:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a14      	ldr	r2, [pc, #80]	; (8006cbc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d009      	beq.n	8006c84 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c78:	d004      	beq.n	8006c84 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a10      	ldr	r2, [pc, #64]	; (8006cc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d10c      	bne.n	8006c9e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3714      	adds	r7, #20
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr
 8006cbc:	40012c00 	.word	0x40012c00
 8006cc0:	40014000 	.word	0x40014000

08006cc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d101      	bne.n	8006ce0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006cdc:	2302      	movs	r3, #2
 8006cde:	e060      	b.n	8006da2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	041b      	lsls	r3, r3, #16
 8006d56:	4313      	orrs	r3, r2
 8006d58:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a14      	ldr	r2, [pc, #80]	; (8006db0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d115      	bne.n	8006d90 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6e:	051b      	lsls	r3, r3, #20
 8006d70:	4313      	orrs	r3, r2
 8006d72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	69db      	ldr	r3, [r3, #28]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3714      	adds	r7, #20
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	40012c00 	.word	0x40012c00

08006db4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e040      	b.n	8006e84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d106      	bne.n	8006e18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f7fb fc5a 	bl	80026cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2224      	movs	r2, #36	; 0x24
 8006e1c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f022 0201 	bic.w	r2, r2, #1
 8006e2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d002      	beq.n	8006e3c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fd38 	bl	80078ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 fbff 	bl	8007640 <UART_SetConfig>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d101      	bne.n	8006e4c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e01b      	b.n	8006e84 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	685a      	ldr	r2, [r3, #4]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	689a      	ldr	r2, [r3, #8]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f042 0201 	orr.w	r2, r2, #1
 8006e7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fdb7 	bl	80079f0 <UART_CheckIdleState>
 8006e82:	4603      	mov	r3, r0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b08a      	sub	sp, #40	; 0x28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	4613      	mov	r3, r2
 8006e98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e9e:	2b20      	cmp	r3, #32
 8006ea0:	d165      	bne.n	8006f6e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d002      	beq.n	8006eae <HAL_UART_Transmit_DMA+0x22>
 8006ea8:	88fb      	ldrh	r3, [r7, #6]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d101      	bne.n	8006eb2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e05e      	b.n	8006f70 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	88fa      	ldrh	r2, [r7, #6]
 8006ebc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	88fa      	ldrh	r2, [r7, #6]
 8006ec4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2221      	movs	r2, #33	; 0x21
 8006ed4:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d027      	beq.n	8006f2e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee2:	4a25      	ldr	r2, [pc, #148]	; (8006f78 <HAL_UART_Transmit_DMA+0xec>)
 8006ee4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eea:	4a24      	ldr	r2, [pc, #144]	; (8006f7c <HAL_UART_Transmit_DMA+0xf0>)
 8006eec:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef2:	4a23      	ldr	r2, [pc, #140]	; (8006f80 <HAL_UART_Transmit_DMA+0xf4>)
 8006ef4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006efa:	2200      	movs	r2, #0
 8006efc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f06:	4619      	mov	r1, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3328      	adds	r3, #40	; 0x28
 8006f0e:	461a      	mov	r2, r3
 8006f10:	88fb      	ldrh	r3, [r7, #6]
 8006f12:	f7fc fc8a 	bl	800382a <HAL_DMA_Start_IT>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d008      	beq.n	8006f2e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2210      	movs	r2, #16
 8006f20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2220      	movs	r2, #32
 8006f28:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e020      	b.n	8006f70 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2240      	movs	r2, #64	; 0x40
 8006f34:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	3308      	adds	r3, #8
 8006f3c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	e853 3f00 	ldrex	r3, [r3]
 8006f44:	613b      	str	r3, [r7, #16]
   return(result);
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	3308      	adds	r3, #8
 8006f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f56:	623a      	str	r2, [r7, #32]
 8006f58:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5a:	69f9      	ldr	r1, [r7, #28]
 8006f5c:	6a3a      	ldr	r2, [r7, #32]
 8006f5e:	e841 2300 	strex	r3, r2, [r1]
 8006f62:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1e5      	bne.n	8006f36 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	e000      	b.n	8006f70 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8006f6e:	2302      	movs	r3, #2
  }
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3728      	adds	r7, #40	; 0x28
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	08007e71 	.word	0x08007e71
 8006f7c:	08007f05 	.word	0x08007f05
 8006f80:	08008085 	.word	0x08008085

08006f84 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b08a      	sub	sp, #40	; 0x28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	4613      	mov	r3, r2
 8006f90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f98:	2b20      	cmp	r3, #32
 8006f9a:	d132      	bne.n	8007002 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d002      	beq.n	8006fa8 <HAL_UART_Receive_DMA+0x24>
 8006fa2:	88fb      	ldrh	r3, [r7, #6]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d101      	bne.n	8006fac <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e02b      	b.n	8007004 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d018      	beq.n	8006ff2 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	e853 3f00 	ldrex	r3, [r3]
 8006fcc:	613b      	str	r3, [r7, #16]
   return(result);
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fde:	623b      	str	r3, [r7, #32]
 8006fe0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe2:	69f9      	ldr	r1, [r7, #28]
 8006fe4:	6a3a      	ldr	r2, [r7, #32]
 8006fe6:	e841 2300 	strex	r3, r2, [r1]
 8006fea:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1e6      	bne.n	8006fc0 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006ff2:	88fb      	ldrh	r3, [r7, #6]
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	68b9      	ldr	r1, [r7, #8]
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f000 fe0f 	bl	8007c1c <UART_Start_Receive_DMA>
 8006ffe:	4603      	mov	r3, r0
 8007000:	e000      	b.n	8007004 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007002:	2302      	movs	r3, #2
  }
}
 8007004:	4618      	mov	r0, r3
 8007006:	3728      	adds	r7, #40	; 0x28
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b0ba      	sub	sp, #232	; 0xe8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007032:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007036:	f640 030f 	movw	r3, #2063	; 0x80f
 800703a:	4013      	ands	r3, r2
 800703c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007040:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007044:	2b00      	cmp	r3, #0
 8007046:	d115      	bne.n	8007074 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800704c:	f003 0320 	and.w	r3, r3, #32
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00f      	beq.n	8007074 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007058:	f003 0320 	and.w	r3, r3, #32
 800705c:	2b00      	cmp	r3, #0
 800705e:	d009      	beq.n	8007074 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007064:	2b00      	cmp	r3, #0
 8007066:	f000 82ab 	beq.w	80075c0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	4798      	blx	r3
      }
      return;
 8007072:	e2a5      	b.n	80075c0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007074:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 8117 	beq.w	80072ac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800707e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b00      	cmp	r3, #0
 8007088:	d106      	bne.n	8007098 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800708a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800708e:	4b85      	ldr	r3, [pc, #532]	; (80072a4 <HAL_UART_IRQHandler+0x298>)
 8007090:	4013      	ands	r3, r2
 8007092:	2b00      	cmp	r3, #0
 8007094:	f000 810a 	beq.w	80072ac <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800709c:	f003 0301 	and.w	r3, r3, #1
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d011      	beq.n	80070c8 <HAL_UART_IRQHandler+0xbc>
 80070a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00b      	beq.n	80070c8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2201      	movs	r2, #1
 80070b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070be:	f043 0201 	orr.w	r2, r3, #1
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070cc:	f003 0302 	and.w	r3, r3, #2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d011      	beq.n	80070f8 <HAL_UART_IRQHandler+0xec>
 80070d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00b      	beq.n	80070f8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2202      	movs	r2, #2
 80070e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070ee:	f043 0204 	orr.w	r2, r3, #4
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070fc:	f003 0304 	and.w	r3, r3, #4
 8007100:	2b00      	cmp	r3, #0
 8007102:	d011      	beq.n	8007128 <HAL_UART_IRQHandler+0x11c>
 8007104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007108:	f003 0301 	and.w	r3, r3, #1
 800710c:	2b00      	cmp	r3, #0
 800710e:	d00b      	beq.n	8007128 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2204      	movs	r2, #4
 8007116:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800711e:	f043 0202 	orr.w	r2, r3, #2
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800712c:	f003 0308 	and.w	r3, r3, #8
 8007130:	2b00      	cmp	r3, #0
 8007132:	d017      	beq.n	8007164 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007138:	f003 0320 	and.w	r3, r3, #32
 800713c:	2b00      	cmp	r3, #0
 800713e:	d105      	bne.n	800714c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007140:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007144:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00b      	beq.n	8007164 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2208      	movs	r2, #8
 8007152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800715a:	f043 0208 	orr.w	r2, r3, #8
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800716c:	2b00      	cmp	r3, #0
 800716e:	d012      	beq.n	8007196 <HAL_UART_IRQHandler+0x18a>
 8007170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007174:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00c      	beq.n	8007196 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007184:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800718c:	f043 0220 	orr.w	r2, r3, #32
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800719c:	2b00      	cmp	r3, #0
 800719e:	f000 8211 	beq.w	80075c4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80071a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a6:	f003 0320 	and.w	r3, r3, #32
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00d      	beq.n	80071ca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80071ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071b2:	f003 0320 	and.w	r3, r3, #32
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d007      	beq.n	80071ca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d003      	beq.n	80071ca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071de:	2b40      	cmp	r3, #64	; 0x40
 80071e0:	d005      	beq.n	80071ee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80071e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d04f      	beq.n	800728e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fdda 	bl	8007da8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071fe:	2b40      	cmp	r3, #64	; 0x40
 8007200:	d141      	bne.n	8007286 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	3308      	adds	r3, #8
 8007208:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007210:	e853 3f00 	ldrex	r3, [r3]
 8007214:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007218:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800721c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007220:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	3308      	adds	r3, #8
 800722a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800722e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007232:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007236:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800723a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800723e:	e841 2300 	strex	r3, r2, [r1]
 8007242:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007246:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1d9      	bne.n	8007202 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007252:	2b00      	cmp	r3, #0
 8007254:	d013      	beq.n	800727e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800725a:	4a13      	ldr	r2, [pc, #76]	; (80072a8 <HAL_UART_IRQHandler+0x29c>)
 800725c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007262:	4618      	mov	r0, r3
 8007264:	f7fc fb7e 	bl	8003964 <HAL_DMA_Abort_IT>
 8007268:	4603      	mov	r3, r0
 800726a:	2b00      	cmp	r3, #0
 800726c:	d017      	beq.n	800729e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007278:	4610      	mov	r0, r2
 800727a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800727c:	e00f      	b.n	800729e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f9c8 	bl	8007614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007284:	e00b      	b.n	800729e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 f9c4 	bl	8007614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800728c:	e007      	b.n	800729e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f9c0 	bl	8007614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800729c:	e192      	b.n	80075c4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800729e:	bf00      	nop
    return;
 80072a0:	e190      	b.n	80075c4 <HAL_UART_IRQHandler+0x5b8>
 80072a2:	bf00      	nop
 80072a4:	04000120 	.word	0x04000120
 80072a8:	08008103 	.word	0x08008103

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	f040 814b 	bne.w	800754c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80072b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072ba:	f003 0310 	and.w	r3, r3, #16
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f000 8144 	beq.w	800754c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80072c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072c8:	f003 0310 	and.w	r3, r3, #16
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 813d 	beq.w	800754c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2210      	movs	r2, #16
 80072d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e4:	2b40      	cmp	r3, #64	; 0x40
 80072e6:	f040 80b5 	bne.w	8007454 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80072f6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f000 8164 	beq.w	80075c8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007306:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800730a:	429a      	cmp	r2, r3
 800730c:	f080 815c 	bcs.w	80075c8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007316:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	2b20      	cmp	r3, #32
 8007322:	f000 8086 	beq.w	8007432 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007332:	e853 3f00 	ldrex	r3, [r3]
 8007336:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800733a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800733e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007342:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	461a      	mov	r2, r3
 800734c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007350:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007354:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007358:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800735c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007360:	e841 2300 	strex	r3, r2, [r1]
 8007364:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007368:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800736c:	2b00      	cmp	r3, #0
 800736e:	d1da      	bne.n	8007326 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	3308      	adds	r3, #8
 8007376:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007378:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800737a:	e853 3f00 	ldrex	r3, [r3]
 800737e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007380:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007382:	f023 0301 	bic.w	r3, r3, #1
 8007386:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	3308      	adds	r3, #8
 8007390:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007394:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007398:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800739c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80073a0:	e841 2300 	strex	r3, r2, [r1]
 80073a4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80073a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1e1      	bne.n	8007370 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	3308      	adds	r3, #8
 80073b2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073b6:	e853 3f00 	ldrex	r3, [r3]
 80073ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80073bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	3308      	adds	r3, #8
 80073cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80073d0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80073d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80073d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80073d8:	e841 2300 	strex	r3, r2, [r1]
 80073dc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80073de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1e3      	bne.n	80073ac <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2220      	movs	r2, #32
 80073e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073fa:	e853 3f00 	ldrex	r3, [r3]
 80073fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007402:	f023 0310 	bic.w	r3, r3, #16
 8007406:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	461a      	mov	r2, r3
 8007410:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007414:	65bb      	str	r3, [r7, #88]	; 0x58
 8007416:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007418:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800741a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800741c:	e841 2300 	strex	r3, r2, [r1]
 8007420:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1e4      	bne.n	80073f2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800742c:	4618      	mov	r0, r3
 800742e:	f7fc fa5b 	bl	80038e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2202      	movs	r2, #2
 8007436:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007444:	b29b      	uxth	r3, r3
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	b29b      	uxth	r3, r3
 800744a:	4619      	mov	r1, r3
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f000 f8eb 	bl	8007628 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007452:	e0b9      	b.n	80075c8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007460:	b29b      	uxth	r3, r3
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800746e:	b29b      	uxth	r3, r3
 8007470:	2b00      	cmp	r3, #0
 8007472:	f000 80ab 	beq.w	80075cc <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8007476:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800747a:	2b00      	cmp	r3, #0
 800747c:	f000 80a6 	beq.w	80075cc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007488:	e853 3f00 	ldrex	r3, [r3]
 800748c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800748e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007490:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007494:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	461a      	mov	r2, r3
 800749e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80074a2:	647b      	str	r3, [r7, #68]	; 0x44
 80074a4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80074a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074aa:	e841 2300 	strex	r3, r2, [r1]
 80074ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80074b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d1e4      	bne.n	8007480 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	3308      	adds	r3, #8
 80074bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c0:	e853 3f00 	ldrex	r3, [r3]
 80074c4:	623b      	str	r3, [r7, #32]
   return(result);
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	f023 0301 	bic.w	r3, r3, #1
 80074cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	3308      	adds	r3, #8
 80074d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80074da:	633a      	str	r2, [r7, #48]	; 0x30
 80074dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074e2:	e841 2300 	strex	r3, r2, [r1]
 80074e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1e3      	bne.n	80074b6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2220      	movs	r2, #32
 80074f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	e853 3f00 	ldrex	r3, [r3]
 800750e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f023 0310 	bic.w	r3, r3, #16
 8007516:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	461a      	mov	r2, r3
 8007520:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007524:	61fb      	str	r3, [r7, #28]
 8007526:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007528:	69b9      	ldr	r1, [r7, #24]
 800752a:	69fa      	ldr	r2, [r7, #28]
 800752c:	e841 2300 	strex	r3, r2, [r1]
 8007530:	617b      	str	r3, [r7, #20]
   return(result);
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1e4      	bne.n	8007502 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2202      	movs	r2, #2
 800753c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800753e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007542:	4619      	mov	r1, r3
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 f86f 	bl	8007628 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800754a:	e03f      	b.n	80075cc <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800754c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00e      	beq.n	8007576 <HAL_UART_IRQHandler+0x56a>
 8007558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800755c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007560:	2b00      	cmp	r3, #0
 8007562:	d008      	beq.n	8007576 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800756c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fe07 	bl	8008182 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007574:	e02d      	b.n	80075d2 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800757a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00e      	beq.n	80075a0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800758a:	2b00      	cmp	r3, #0
 800758c:	d008      	beq.n	80075a0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007592:	2b00      	cmp	r3, #0
 8007594:	d01c      	beq.n	80075d0 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	4798      	blx	r3
    }
    return;
 800759e:	e017      	b.n	80075d0 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80075a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d012      	beq.n	80075d2 <HAL_UART_IRQHandler+0x5c6>
 80075ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00c      	beq.n	80075d2 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fdb8 	bl	800812e <UART_EndTransmit_IT>
    return;
 80075be:	e008      	b.n	80075d2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80075c0:	bf00      	nop
 80075c2:	e006      	b.n	80075d2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80075c4:	bf00      	nop
 80075c6:	e004      	b.n	80075d2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80075c8:	bf00      	nop
 80075ca:	e002      	b.n	80075d2 <HAL_UART_IRQHandler+0x5c6>
      return;
 80075cc:	bf00      	nop
 80075ce:	e000      	b.n	80075d2 <HAL_UART_IRQHandler+0x5c6>
    return;
 80075d0:	bf00      	nop
  }

}
 80075d2:	37e8      	adds	r7, #232	; 0xe8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80075f4:	bf00      	nop
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	460b      	mov	r3, r1
 8007632:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b088      	sub	sp, #32
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007648:	2300      	movs	r3, #0
 800764a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	689a      	ldr	r2, [r3, #8]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	431a      	orrs	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	431a      	orrs	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	69db      	ldr	r3, [r3, #28]
 8007660:	4313      	orrs	r3, r2
 8007662:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	4b8a      	ldr	r3, [pc, #552]	; (8007894 <UART_SetConfig+0x254>)
 800766c:	4013      	ands	r3, r2
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	6812      	ldr	r2, [r2, #0]
 8007672:	6979      	ldr	r1, [r7, #20]
 8007674:	430b      	orrs	r3, r1
 8007676:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	68da      	ldr	r2, [r3, #12]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	430a      	orrs	r2, r1
 800768c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a1b      	ldr	r3, [r3, #32]
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	4313      	orrs	r3, r2
 800769c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	697a      	ldr	r2, [r7, #20]
 80076ae:	430a      	orrs	r2, r1
 80076b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a78      	ldr	r2, [pc, #480]	; (8007898 <UART_SetConfig+0x258>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d120      	bne.n	80076fe <UART_SetConfig+0xbe>
 80076bc:	4b77      	ldr	r3, [pc, #476]	; (800789c <UART_SetConfig+0x25c>)
 80076be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c0:	f003 0303 	and.w	r3, r3, #3
 80076c4:	2b03      	cmp	r3, #3
 80076c6:	d817      	bhi.n	80076f8 <UART_SetConfig+0xb8>
 80076c8:	a201      	add	r2, pc, #4	; (adr r2, 80076d0 <UART_SetConfig+0x90>)
 80076ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ce:	bf00      	nop
 80076d0:	080076e1 	.word	0x080076e1
 80076d4:	080076ed 	.word	0x080076ed
 80076d8:	080076f3 	.word	0x080076f3
 80076dc:	080076e7 	.word	0x080076e7
 80076e0:	2300      	movs	r3, #0
 80076e2:	77fb      	strb	r3, [r7, #31]
 80076e4:	e01d      	b.n	8007722 <UART_SetConfig+0xe2>
 80076e6:	2302      	movs	r3, #2
 80076e8:	77fb      	strb	r3, [r7, #31]
 80076ea:	e01a      	b.n	8007722 <UART_SetConfig+0xe2>
 80076ec:	2304      	movs	r3, #4
 80076ee:	77fb      	strb	r3, [r7, #31]
 80076f0:	e017      	b.n	8007722 <UART_SetConfig+0xe2>
 80076f2:	2308      	movs	r3, #8
 80076f4:	77fb      	strb	r3, [r7, #31]
 80076f6:	e014      	b.n	8007722 <UART_SetConfig+0xe2>
 80076f8:	2310      	movs	r3, #16
 80076fa:	77fb      	strb	r3, [r7, #31]
 80076fc:	e011      	b.n	8007722 <UART_SetConfig+0xe2>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a67      	ldr	r2, [pc, #412]	; (80078a0 <UART_SetConfig+0x260>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d102      	bne.n	800770e <UART_SetConfig+0xce>
 8007708:	2300      	movs	r3, #0
 800770a:	77fb      	strb	r3, [r7, #31]
 800770c:	e009      	b.n	8007722 <UART_SetConfig+0xe2>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a64      	ldr	r2, [pc, #400]	; (80078a4 <UART_SetConfig+0x264>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d102      	bne.n	800771e <UART_SetConfig+0xde>
 8007718:	2300      	movs	r3, #0
 800771a:	77fb      	strb	r3, [r7, #31]
 800771c:	e001      	b.n	8007722 <UART_SetConfig+0xe2>
 800771e:	2310      	movs	r3, #16
 8007720:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	69db      	ldr	r3, [r3, #28]
 8007726:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800772a:	d15a      	bne.n	80077e2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800772c:	7ffb      	ldrb	r3, [r7, #31]
 800772e:	2b08      	cmp	r3, #8
 8007730:	d827      	bhi.n	8007782 <UART_SetConfig+0x142>
 8007732:	a201      	add	r2, pc, #4	; (adr r2, 8007738 <UART_SetConfig+0xf8>)
 8007734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007738:	0800775d 	.word	0x0800775d
 800773c:	08007765 	.word	0x08007765
 8007740:	0800776d 	.word	0x0800776d
 8007744:	08007783 	.word	0x08007783
 8007748:	08007773 	.word	0x08007773
 800774c:	08007783 	.word	0x08007783
 8007750:	08007783 	.word	0x08007783
 8007754:	08007783 	.word	0x08007783
 8007758:	0800777b 	.word	0x0800777b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800775c:	f7fd fe06 	bl	800536c <HAL_RCC_GetPCLK1Freq>
 8007760:	61b8      	str	r0, [r7, #24]
        break;
 8007762:	e013      	b.n	800778c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007764:	f7fd fe24 	bl	80053b0 <HAL_RCC_GetPCLK2Freq>
 8007768:	61b8      	str	r0, [r7, #24]
        break;
 800776a:	e00f      	b.n	800778c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800776c:	4b4e      	ldr	r3, [pc, #312]	; (80078a8 <UART_SetConfig+0x268>)
 800776e:	61bb      	str	r3, [r7, #24]
        break;
 8007770:	e00c      	b.n	800778c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007772:	f7fd fd9b 	bl	80052ac <HAL_RCC_GetSysClockFreq>
 8007776:	61b8      	str	r0, [r7, #24]
        break;
 8007778:	e008      	b.n	800778c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800777a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800777e:	61bb      	str	r3, [r7, #24]
        break;
 8007780:	e004      	b.n	800778c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8007782:	2300      	movs	r3, #0
 8007784:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	77bb      	strb	r3, [r7, #30]
        break;
 800778a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d074      	beq.n	800787c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	005a      	lsls	r2, r3, #1
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	085b      	lsrs	r3, r3, #1
 800779c:	441a      	add	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	2b0f      	cmp	r3, #15
 80077ac:	d916      	bls.n	80077dc <UART_SetConfig+0x19c>
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077b4:	d212      	bcs.n	80077dc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	f023 030f 	bic.w	r3, r3, #15
 80077be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	085b      	lsrs	r3, r3, #1
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	f003 0307 	and.w	r3, r3, #7
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	89fb      	ldrh	r3, [r7, #14]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	89fa      	ldrh	r2, [r7, #14]
 80077d8:	60da      	str	r2, [r3, #12]
 80077da:	e04f      	b.n	800787c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	77bb      	strb	r3, [r7, #30]
 80077e0:	e04c      	b.n	800787c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077e2:	7ffb      	ldrb	r3, [r7, #31]
 80077e4:	2b08      	cmp	r3, #8
 80077e6:	d828      	bhi.n	800783a <UART_SetConfig+0x1fa>
 80077e8:	a201      	add	r2, pc, #4	; (adr r2, 80077f0 <UART_SetConfig+0x1b0>)
 80077ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ee:	bf00      	nop
 80077f0:	08007815 	.word	0x08007815
 80077f4:	0800781d 	.word	0x0800781d
 80077f8:	08007825 	.word	0x08007825
 80077fc:	0800783b 	.word	0x0800783b
 8007800:	0800782b 	.word	0x0800782b
 8007804:	0800783b 	.word	0x0800783b
 8007808:	0800783b 	.word	0x0800783b
 800780c:	0800783b 	.word	0x0800783b
 8007810:	08007833 	.word	0x08007833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007814:	f7fd fdaa 	bl	800536c <HAL_RCC_GetPCLK1Freq>
 8007818:	61b8      	str	r0, [r7, #24]
        break;
 800781a:	e013      	b.n	8007844 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800781c:	f7fd fdc8 	bl	80053b0 <HAL_RCC_GetPCLK2Freq>
 8007820:	61b8      	str	r0, [r7, #24]
        break;
 8007822:	e00f      	b.n	8007844 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007824:	4b20      	ldr	r3, [pc, #128]	; (80078a8 <UART_SetConfig+0x268>)
 8007826:	61bb      	str	r3, [r7, #24]
        break;
 8007828:	e00c      	b.n	8007844 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800782a:	f7fd fd3f 	bl	80052ac <HAL_RCC_GetSysClockFreq>
 800782e:	61b8      	str	r0, [r7, #24]
        break;
 8007830:	e008      	b.n	8007844 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007832:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007836:	61bb      	str	r3, [r7, #24]
        break;
 8007838:	e004      	b.n	8007844 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800783a:	2300      	movs	r3, #0
 800783c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	77bb      	strb	r3, [r7, #30]
        break;
 8007842:	bf00      	nop
    }

    if (pclk != 0U)
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d018      	beq.n	800787c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	085a      	lsrs	r2, r3, #1
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	441a      	add	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	fbb2 f3f3 	udiv	r3, r2, r3
 800785c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	2b0f      	cmp	r3, #15
 8007862:	d909      	bls.n	8007878 <UART_SetConfig+0x238>
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800786a:	d205      	bcs.n	8007878 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	b29a      	uxth	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	60da      	str	r2, [r3, #12]
 8007876:	e001      	b.n	800787c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007888:	7fbb      	ldrb	r3, [r7, #30]
}
 800788a:	4618      	mov	r0, r3
 800788c:	3720      	adds	r7, #32
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	efff69f3 	.word	0xefff69f3
 8007898:	40013800 	.word	0x40013800
 800789c:	40021000 	.word	0x40021000
 80078a0:	40004400 	.word	0x40004400
 80078a4:	40004800 	.word	0x40004800
 80078a8:	007a1200 	.word	0x007a1200

080078ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b8:	f003 0308 	and.w	r3, r3, #8
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00a      	beq.n	80078d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	430a      	orrs	r2, r1
 80078d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078da:	f003 0301 	and.w	r3, r3, #1
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00a      	beq.n	80078f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	430a      	orrs	r2, r1
 80078f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fc:	f003 0302 	and.w	r3, r3, #2
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00a      	beq.n	800791a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	430a      	orrs	r2, r1
 8007918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791e:	f003 0304 	and.w	r3, r3, #4
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00a      	beq.n	800793c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	430a      	orrs	r2, r1
 800793a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007940:	f003 0310 	and.w	r3, r3, #16
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00a      	beq.n	800795e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	430a      	orrs	r2, r1
 800795c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007962:	f003 0320 	and.w	r3, r3, #32
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00a      	beq.n	8007980 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	430a      	orrs	r2, r1
 800797e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007988:	2b00      	cmp	r3, #0
 800798a:	d01a      	beq.n	80079c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	430a      	orrs	r2, r1
 80079a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079aa:	d10a      	bne.n	80079c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	430a      	orrs	r2, r1
 80079c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00a      	beq.n	80079e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	430a      	orrs	r2, r1
 80079e2:	605a      	str	r2, [r3, #4]
  }
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b098      	sub	sp, #96	; 0x60
 80079f4:	af02      	add	r7, sp, #8
 80079f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a00:	f7fa ffbc 	bl	800297c <HAL_GetTick>
 8007a04:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 0308 	and.w	r3, r3, #8
 8007a10:	2b08      	cmp	r3, #8
 8007a12:	d12e      	bne.n	8007a72 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f88c 	bl	8007b40 <UART_WaitOnFlagUntilTimeout>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d021      	beq.n	8007a72 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a36:	e853 3f00 	ldrex	r3, [r3]
 8007a3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a42:	653b      	str	r3, [r7, #80]	; 0x50
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	461a      	mov	r2, r3
 8007a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a4c:	647b      	str	r3, [r7, #68]	; 0x44
 8007a4e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a54:	e841 2300 	strex	r3, r2, [r1]
 8007a58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1e6      	bne.n	8007a2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2220      	movs	r2, #32
 8007a64:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	e062      	b.n	8007b38 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0304 	and.w	r3, r3, #4
 8007a7c:	2b04      	cmp	r3, #4
 8007a7e:	d149      	bne.n	8007b14 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a84:	9300      	str	r3, [sp, #0]
 8007a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 f856 	bl	8007b40 <UART_WaitOnFlagUntilTimeout>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d03c      	beq.n	8007b14 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa2:	e853 3f00 	ldrex	r3, [r3]
 8007aa6:	623b      	str	r3, [r7, #32]
   return(result);
 8007aa8:	6a3b      	ldr	r3, [r7, #32]
 8007aaa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ab8:	633b      	str	r3, [r7, #48]	; 0x30
 8007aba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ac0:	e841 2300 	strex	r3, r2, [r1]
 8007ac4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1e6      	bne.n	8007a9a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	3308      	adds	r3, #8
 8007ad2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	e853 3f00 	ldrex	r3, [r3]
 8007ada:	60fb      	str	r3, [r7, #12]
   return(result);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f023 0301 	bic.w	r3, r3, #1
 8007ae2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3308      	adds	r3, #8
 8007aea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007aec:	61fa      	str	r2, [r7, #28]
 8007aee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af0:	69b9      	ldr	r1, [r7, #24]
 8007af2:	69fa      	ldr	r2, [r7, #28]
 8007af4:	e841 2300 	strex	r3, r2, [r1]
 8007af8:	617b      	str	r3, [r7, #20]
   return(result);
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1e5      	bne.n	8007acc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2220      	movs	r2, #32
 8007b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e011      	b.n	8007b38 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2220      	movs	r2, #32
 8007b18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2220      	movs	r2, #32
 8007b1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3758      	adds	r7, #88	; 0x58
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	603b      	str	r3, [r7, #0]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b50:	e04f      	b.n	8007bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b58:	d04b      	beq.n	8007bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b5a:	f7fa ff0f 	bl	800297c <HAL_GetTick>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	69ba      	ldr	r2, [r7, #24]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d302      	bcc.n	8007b70 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d101      	bne.n	8007b74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b70:	2303      	movs	r3, #3
 8007b72:	e04e      	b.n	8007c12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 0304 	and.w	r3, r3, #4
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d037      	beq.n	8007bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	2b80      	cmp	r3, #128	; 0x80
 8007b86:	d034      	beq.n	8007bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	2b40      	cmp	r3, #64	; 0x40
 8007b8c:	d031      	beq.n	8007bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	69db      	ldr	r3, [r3, #28]
 8007b94:	f003 0308 	and.w	r3, r3, #8
 8007b98:	2b08      	cmp	r3, #8
 8007b9a:	d110      	bne.n	8007bbe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2208      	movs	r2, #8
 8007ba2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f000 f8ff 	bl	8007da8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2208      	movs	r2, #8
 8007bae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e029      	b.n	8007c12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	69db      	ldr	r3, [r3, #28]
 8007bc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bcc:	d111      	bne.n	8007bf2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007bd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f000 f8e5 	bl	8007da8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2220      	movs	r2, #32
 8007be2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	e00f      	b.n	8007c12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	69da      	ldr	r2, [r3, #28]
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	68ba      	ldr	r2, [r7, #8]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	bf0c      	ite	eq
 8007c02:	2301      	moveq	r3, #1
 8007c04:	2300      	movne	r3, #0
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	461a      	mov	r2, r3
 8007c0a:	79fb      	ldrb	r3, [r7, #7]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d0a0      	beq.n	8007b52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
	...

08007c1c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b096      	sub	sp, #88	; 0x58
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	4613      	mov	r3, r2
 8007c28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	68ba      	ldr	r2, [r7, #8]
 8007c2e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	88fa      	ldrh	r2, [r7, #6]
 8007c34:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2222      	movs	r2, #34	; 0x22
 8007c44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d028      	beq.n	8007ca2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c54:	4a3e      	ldr	r2, [pc, #248]	; (8007d50 <UART_Start_Receive_DMA+0x134>)
 8007c56:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c5c:	4a3d      	ldr	r2, [pc, #244]	; (8007d54 <UART_Start_Receive_DMA+0x138>)
 8007c5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c64:	4a3c      	ldr	r2, [pc, #240]	; (8007d58 <UART_Start_Receive_DMA+0x13c>)
 8007c66:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3324      	adds	r3, #36	; 0x24
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c80:	461a      	mov	r2, r3
 8007c82:	88fb      	ldrh	r3, [r7, #6]
 8007c84:	f7fb fdd1 	bl	800382a <HAL_DMA_Start_IT>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d009      	beq.n	8007ca2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2210      	movs	r2, #16
 8007c92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2220      	movs	r2, #32
 8007c9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e051      	b.n	8007d46 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d018      	beq.n	8007cdc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cb2:	e853 3f00 	ldrex	r3, [r3]
 8007cb6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cbe:	657b      	str	r3, [r7, #84]	; 0x54
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cca:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ccc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007cce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cd0:	e841 2300 	strex	r3, r2, [r1]
 8007cd4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1e6      	bne.n	8007caa <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3308      	adds	r3, #8
 8007ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce6:	e853 3f00 	ldrex	r3, [r3]
 8007cea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cee:	f043 0301 	orr.w	r3, r3, #1
 8007cf2:	653b      	str	r3, [r7, #80]	; 0x50
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3308      	adds	r3, #8
 8007cfa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007cfc:	637a      	str	r2, [r7, #52]	; 0x34
 8007cfe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d04:	e841 2300 	strex	r3, r2, [r1]
 8007d08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1e5      	bne.n	8007cdc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	3308      	adds	r3, #8
 8007d16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	e853 3f00 	ldrex	r3, [r3]
 8007d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	3308      	adds	r3, #8
 8007d2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d30:	623a      	str	r2, [r7, #32]
 8007d32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d34:	69f9      	ldr	r1, [r7, #28]
 8007d36:	6a3a      	ldr	r2, [r7, #32]
 8007d38:	e841 2300 	strex	r3, r2, [r1]
 8007d3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1e5      	bne.n	8007d10 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3758      	adds	r7, #88	; 0x58
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	08007f21 	.word	0x08007f21
 8007d54:	08008047 	.word	0x08008047
 8007d58:	08008085 	.word	0x08008085

08007d5c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b089      	sub	sp, #36	; 0x24
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	e853 3f00 	ldrex	r3, [r3]
 8007d70:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007d78:	61fb      	str	r3, [r7, #28]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	61bb      	str	r3, [r7, #24]
 8007d84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d86:	6979      	ldr	r1, [r7, #20]
 8007d88:	69ba      	ldr	r2, [r7, #24]
 8007d8a:	e841 2300 	strex	r3, r2, [r1]
 8007d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1e6      	bne.n	8007d64 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2220      	movs	r2, #32
 8007d9a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8007d9c:	bf00      	nop
 8007d9e:	3724      	adds	r7, #36	; 0x24
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b095      	sub	sp, #84	; 0x54
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db8:	e853 3f00 	ldrex	r3, [r3]
 8007dbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dce:	643b      	str	r3, [r7, #64]	; 0x40
 8007dd0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dd6:	e841 2300 	strex	r3, r2, [r1]
 8007dda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1e6      	bne.n	8007db0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	3308      	adds	r3, #8
 8007de8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dea:	6a3b      	ldr	r3, [r7, #32]
 8007dec:	e853 3f00 	ldrex	r3, [r3]
 8007df0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	f023 0301 	bic.w	r3, r3, #1
 8007df8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	3308      	adds	r3, #8
 8007e00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e0a:	e841 2300 	strex	r3, r2, [r1]
 8007e0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d1e5      	bne.n	8007de2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d118      	bne.n	8007e50 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	e853 3f00 	ldrex	r3, [r3]
 8007e2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	f023 0310 	bic.w	r3, r3, #16
 8007e32:	647b      	str	r3, [r7, #68]	; 0x44
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	461a      	mov	r2, r3
 8007e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e3c:	61bb      	str	r3, [r7, #24]
 8007e3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e40:	6979      	ldr	r1, [r7, #20]
 8007e42:	69ba      	ldr	r2, [r7, #24]
 8007e44:	e841 2300 	strex	r3, r2, [r1]
 8007e48:	613b      	str	r3, [r7, #16]
   return(result);
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d1e6      	bne.n	8007e1e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2220      	movs	r2, #32
 8007e54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007e64:	bf00      	nop
 8007e66:	3754      	adds	r7, #84	; 0x54
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b090      	sub	sp, #64	; 0x40
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	2b20      	cmp	r3, #32
 8007e84:	d037      	beq.n	8007ef6 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8007e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3308      	adds	r3, #8
 8007e94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e98:	e853 3f00 	ldrex	r3, [r3]
 8007e9c:	623b      	str	r3, [r7, #32]
   return(result);
 8007e9e:	6a3b      	ldr	r3, [r7, #32]
 8007ea0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ea4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	3308      	adds	r3, #8
 8007eac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007eae:	633a      	str	r2, [r7, #48]	; 0x30
 8007eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eb6:	e841 2300 	strex	r3, r2, [r1]
 8007eba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d1e5      	bne.n	8007e8e <UART_DMATransmitCplt+0x1e>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	e853 3f00 	ldrex	r3, [r3]
 8007ece:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ed6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	461a      	mov	r2, r3
 8007ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ee0:	61fb      	str	r3, [r7, #28]
 8007ee2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee4:	69b9      	ldr	r1, [r7, #24]
 8007ee6:	69fa      	ldr	r2, [r7, #28]
 8007ee8:	e841 2300 	strex	r3, r2, [r1]
 8007eec:	617b      	str	r3, [r7, #20]
   return(result);
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1e6      	bne.n	8007ec2 <UART_DMATransmitCplt+0x52>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ef4:	e002      	b.n	8007efc <UART_DMATransmitCplt+0x8c>
    HAL_UART_TxCpltCallback(huart);
 8007ef6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007ef8:	f7ff fb6e 	bl	80075d8 <HAL_UART_TxCpltCallback>
}
 8007efc:	bf00      	nop
 8007efe:	3740      	adds	r7, #64	; 0x40
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f10:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	f7ff fb6a 	bl	80075ec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f18:	bf00      	nop
 8007f1a:	3710      	adds	r7, #16
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b09c      	sub	sp, #112	; 0x70
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	699b      	ldr	r3, [r3, #24]
 8007f32:	2b20      	cmp	r3, #32
 8007f34:	d071      	beq.n	800801a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8007f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f46:	e853 3f00 	ldrex	r3, [r3]
 8007f4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f52:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	461a      	mov	r2, r3
 8007f5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f5e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f64:	e841 2300 	strex	r3, r2, [r1]
 8007f68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1e6      	bne.n	8007f3e <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	3308      	adds	r3, #8
 8007f76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7a:	e853 3f00 	ldrex	r3, [r3]
 8007f7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f82:	f023 0301 	bic.w	r3, r3, #1
 8007f86:	667b      	str	r3, [r7, #100]	; 0x64
 8007f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	3308      	adds	r3, #8
 8007f8e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007f90:	647a      	str	r2, [r7, #68]	; 0x44
 8007f92:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f98:	e841 2300 	strex	r3, r2, [r1]
 8007f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d1e5      	bne.n	8007f70 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	3308      	adds	r3, #8
 8007faa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fae:	e853 3f00 	ldrex	r3, [r3]
 8007fb2:	623b      	str	r3, [r7, #32]
   return(result);
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fba:	663b      	str	r3, [r7, #96]	; 0x60
 8007fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	3308      	adds	r3, #8
 8007fc2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007fc4:	633a      	str	r2, [r7, #48]	; 0x30
 8007fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fcc:	e841 2300 	strex	r3, r2, [r1]
 8007fd0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1e5      	bne.n	8007fa4 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fda:	2220      	movs	r2, #32
 8007fdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d118      	bne.n	800801a <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	e853 3f00 	ldrex	r3, [r3]
 8007ff4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f023 0310 	bic.w	r3, r3, #16
 8007ffc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	461a      	mov	r2, r3
 8008004:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008006:	61fb      	str	r3, [r7, #28]
 8008008:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800a:	69b9      	ldr	r1, [r7, #24]
 800800c:	69fa      	ldr	r2, [r7, #28]
 800800e:	e841 2300 	strex	r3, r2, [r1]
 8008012:	617b      	str	r3, [r7, #20]
   return(result);
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d1e6      	bne.n	8007fe8 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800801a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800801c:	2200      	movs	r2, #0
 800801e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008024:	2b01      	cmp	r3, #1
 8008026:	d107      	bne.n	8008038 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008028:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800802a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800802e:	4619      	mov	r1, r3
 8008030:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008032:	f7ff faf9 	bl	8007628 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008036:	e002      	b.n	800803e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008038:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800803a:	f7f9 fd13 	bl	8001a64 <HAL_UART_RxCpltCallback>
}
 800803e:	bf00      	nop
 8008040:	3770      	adds	r7, #112	; 0x70
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b084      	sub	sp, #16
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008052:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2201      	movs	r2, #1
 8008058:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800805e:	2b01      	cmp	r3, #1
 8008060:	d109      	bne.n	8008076 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008068:	085b      	lsrs	r3, r3, #1
 800806a:	b29b      	uxth	r3, r3
 800806c:	4619      	mov	r1, r3
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f7ff fada 	bl	8007628 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008074:	e002      	b.n	800807c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f7ff fac2 	bl	8007600 <HAL_UART_RxHalfCpltCallback>
}
 800807c:	bf00      	nop
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b086      	sub	sp, #24
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008090:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008096:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800809e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080aa:	2b80      	cmp	r3, #128	; 0x80
 80080ac:	d109      	bne.n	80080c2 <UART_DMAError+0x3e>
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	2b21      	cmp	r3, #33	; 0x21
 80080b2:	d106      	bne.n	80080c2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80080bc:	6978      	ldr	r0, [r7, #20]
 80080be:	f7ff fe4d 	bl	8007d5c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080cc:	2b40      	cmp	r3, #64	; 0x40
 80080ce:	d109      	bne.n	80080e4 <UART_DMAError+0x60>
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2b22      	cmp	r3, #34	; 0x22
 80080d4:	d106      	bne.n	80080e4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	2200      	movs	r2, #0
 80080da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80080de:	6978      	ldr	r0, [r7, #20]
 80080e0:	f7ff fe62 	bl	8007da8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080ea:	f043 0210 	orr.w	r2, r3, #16
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080f4:	6978      	ldr	r0, [r7, #20]
 80080f6:	f7ff fa8d 	bl	8007614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080fa:	bf00      	nop
 80080fc:	3718      	adds	r7, #24
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}

08008102 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b084      	sub	sp, #16
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2200      	movs	r2, #0
 8008114:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2200      	movs	r2, #0
 800811c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f7ff fa77 	bl	8007614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008126:	bf00      	nop
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800812e:	b580      	push	{r7, lr}
 8008130:	b088      	sub	sp, #32
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	e853 3f00 	ldrex	r3, [r3]
 8008142:	60bb      	str	r3, [r7, #8]
   return(result);
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800814a:	61fb      	str	r3, [r7, #28]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	461a      	mov	r2, r3
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	61bb      	str	r3, [r7, #24]
 8008156:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008158:	6979      	ldr	r1, [r7, #20]
 800815a:	69ba      	ldr	r2, [r7, #24]
 800815c:	e841 2300 	strex	r3, r2, [r1]
 8008160:	613b      	str	r3, [r7, #16]
   return(result);
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1e6      	bne.n	8008136 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2220      	movs	r2, #32
 800816c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f7ff fa2f 	bl	80075d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800817a:	bf00      	nop
 800817c:	3720      	adds	r7, #32
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008182:	b480      	push	{r7}
 8008184:	b083      	sub	sp, #12
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800818a:	bf00      	nop
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008196:	b480      	push	{r7}
 8008198:	b085      	sub	sp, #20
 800819a:	af00      	add	r7, sp, #0
 800819c:	4603      	mov	r3, r0
 800819e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80081a0:	2300      	movs	r3, #0
 80081a2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80081a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80081a8:	2b84      	cmp	r3, #132	; 0x84
 80081aa:	d005      	beq.n	80081b8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80081ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	4413      	add	r3, r2
 80081b4:	3303      	adds	r3, #3
 80081b6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80081b8:	68fb      	ldr	r3, [r7, #12]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr

080081c6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80081ca:	f001 f935 	bl	8009438 <vTaskStartScheduler>
  
  return osOK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80081d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081d6:	b089      	sub	sp, #36	; 0x24
 80081d8:	af04      	add	r7, sp, #16
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d020      	beq.n	8008228 <osThreadCreate+0x54>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	699b      	ldr	r3, [r3, #24]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d01c      	beq.n	8008228 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	685c      	ldr	r4, [r3, #4]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	691e      	ldr	r6, [r3, #16]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008200:	4618      	mov	r0, r3
 8008202:	f7ff ffc8 	bl	8008196 <makeFreeRtosPriority>
 8008206:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	695b      	ldr	r3, [r3, #20]
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008210:	9202      	str	r2, [sp, #8]
 8008212:	9301      	str	r3, [sp, #4]
 8008214:	9100      	str	r1, [sp, #0]
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	4632      	mov	r2, r6
 800821a:	4629      	mov	r1, r5
 800821c:	4620      	mov	r0, r4
 800821e:	f000 ff4d 	bl	80090bc <xTaskCreateStatic>
 8008222:	4603      	mov	r3, r0
 8008224:	60fb      	str	r3, [r7, #12]
 8008226:	e01c      	b.n	8008262 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	685c      	ldr	r4, [r3, #4]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008234:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800823c:	4618      	mov	r0, r3
 800823e:	f7ff ffaa 	bl	8008196 <makeFreeRtosPriority>
 8008242:	4602      	mov	r2, r0
 8008244:	f107 030c 	add.w	r3, r7, #12
 8008248:	9301      	str	r3, [sp, #4]
 800824a:	9200      	str	r2, [sp, #0]
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	4632      	mov	r2, r6
 8008250:	4629      	mov	r1, r5
 8008252:	4620      	mov	r0, r4
 8008254:	f000 ff8e 	bl	8009174 <xTaskCreate>
 8008258:	4603      	mov	r3, r0
 800825a:	2b01      	cmp	r3, #1
 800825c:	d001      	beq.n	8008262 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800825e:	2300      	movs	r3, #0
 8008260:	e000      	b.n	8008264 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008262:	68fb      	ldr	r3, [r7, #12]
}
 8008264:	4618      	mov	r0, r3
 8008266:	3714      	adds	r7, #20
 8008268:	46bd      	mov	sp, r7
 800826a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800826c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d001      	beq.n	8008282 <osDelay+0x16>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	e000      	b.n	8008284 <osDelay+0x18>
 8008282:	2301      	movs	r3, #1
 8008284:	4618      	mov	r0, r3
 8008286:	f001 f8a3 	bl	80093d0 <vTaskDelay>
  
  return osOK;
 800828a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800828c:	4618      	mov	r0, r3
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008294:	b580      	push	{r7, lr}
 8008296:	b086      	sub	sp, #24
 8008298:	af02      	add	r7, sp, #8
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00f      	beq.n	80082c6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d10a      	bne.n	80082c2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	2203      	movs	r2, #3
 80082b2:	9200      	str	r2, [sp, #0]
 80082b4:	2200      	movs	r2, #0
 80082b6:	2100      	movs	r1, #0
 80082b8:	2001      	movs	r0, #1
 80082ba:	f000 f96d 	bl	8008598 <xQueueGenericCreateStatic>
 80082be:	4603      	mov	r3, r0
 80082c0:	e016      	b.n	80082f0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80082c2:	2300      	movs	r3, #0
 80082c4:	e014      	b.n	80082f0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d110      	bne.n	80082ee <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80082cc:	2203      	movs	r2, #3
 80082ce:	2100      	movs	r1, #0
 80082d0:	2001      	movs	r0, #1
 80082d2:	f000 f9d8 	bl	8008686 <xQueueGenericCreate>
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d005      	beq.n	80082ea <osSemaphoreCreate+0x56>
 80082de:	2300      	movs	r3, #0
 80082e0:	2200      	movs	r2, #0
 80082e2:	2100      	movs	r1, #0
 80082e4:	68f8      	ldr	r0, [r7, #12]
 80082e6:	f000 fa2b 	bl	8008740 <xQueueGenericSend>
      return sema;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	e000      	b.n	80082f0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80082ee:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80082f8:	b590      	push	{r4, r7, lr}
 80082fa:	b085      	sub	sp, #20
 80082fc:	af02      	add	r7, sp, #8
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d011      	beq.n	800832e <osMessageCreate+0x36>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d00d      	beq.n	800832e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6818      	ldr	r0, [r3, #0]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6859      	ldr	r1, [r3, #4]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	689a      	ldr	r2, [r3, #8]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	2400      	movs	r4, #0
 8008324:	9400      	str	r4, [sp, #0]
 8008326:	f000 f937 	bl	8008598 <xQueueGenericCreateStatic>
 800832a:	4603      	mov	r3, r0
 800832c:	e008      	b.n	8008340 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6818      	ldr	r0, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	4619      	mov	r1, r3
 800833a:	f000 f9a4 	bl	8008686 <xQueueGenericCreate>
 800833e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008340:	4618      	mov	r0, r3
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	bd90      	pop	{r4, r7, pc}

08008348 <osSemaphoreGetCount>:
* @brief  Returns the current count value of a counting semaphore
* @param  semaphore_id  semaphore_id ID obtained by \ref osSemaphoreCreate.
* @retval  count value
*/
uint32_t osSemaphoreGetCount(osSemaphoreId semaphore_id)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  return uxSemaphoreGetCount(semaphore_id);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 fd6d 	bl	8008e30 <uxQueueMessagesWaiting>
 8008356:	4603      	mov	r3, r0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3708      	adds	r7, #8
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f103 0208 	add.w	r2, r3, #8
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f04f 32ff 	mov.w	r2, #4294967295
 8008378:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f103 0208 	add.w	r2, r3, #8
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f103 0208 	add.w	r2, r3, #8
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008394:	bf00      	nop
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80083ae:	bf00      	nop
 80083b0:	370c      	adds	r7, #12
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr

080083ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80083ba:	b480      	push	{r7}
 80083bc:	b085      	sub	sp, #20
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	689a      	ldr	r2, [r3, #8]
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	683a      	ldr	r2, [r7, #0]
 80083de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	683a      	ldr	r2, [r7, #0]
 80083e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	1c5a      	adds	r2, r3, #1
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	601a      	str	r2, [r3, #0]
}
 80083f6:	bf00      	nop
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr

08008402 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008402:	b480      	push	{r7}
 8008404:	b085      	sub	sp, #20
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
 800840a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008418:	d103      	bne.n	8008422 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	60fb      	str	r3, [r7, #12]
 8008420:	e00c      	b.n	800843c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	3308      	adds	r3, #8
 8008426:	60fb      	str	r3, [r7, #12]
 8008428:	e002      	b.n	8008430 <vListInsert+0x2e>
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	60fb      	str	r3, [r7, #12]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	68ba      	ldr	r2, [r7, #8]
 8008438:	429a      	cmp	r2, r3
 800843a:	d2f6      	bcs.n	800842a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	685a      	ldr	r2, [r3, #4]
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	683a      	ldr	r2, [r7, #0]
 800844a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	683a      	ldr	r2, [r7, #0]
 8008456:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	1c5a      	adds	r2, r3, #1
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	601a      	str	r2, [r3, #0]
}
 8008468:	bf00      	nop
 800846a:	3714      	adds	r7, #20
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	6892      	ldr	r2, [r2, #8]
 800848a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	6852      	ldr	r2, [r2, #4]
 8008494:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	429a      	cmp	r2, r3
 800849e:	d103      	bne.n	80084a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	689a      	ldr	r2, [r3, #8]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	1e5a      	subs	r2, r3, #1
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3714      	adds	r7, #20
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10a      	bne.n	80084f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80084dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e0:	f383 8811 	msr	BASEPRI, r3
 80084e4:	f3bf 8f6f 	isb	sy
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80084ee:	bf00      	nop
 80084f0:	e7fe      	b.n	80084f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80084f2:	f001 ff1f 	bl	800a334 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084fe:	68f9      	ldr	r1, [r7, #12]
 8008500:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008502:	fb01 f303 	mul.w	r3, r1, r3
 8008506:	441a      	add	r2, r3
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2200      	movs	r2, #0
 8008510:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008522:	3b01      	subs	r3, #1
 8008524:	68f9      	ldr	r1, [r7, #12]
 8008526:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008528:	fb01 f303 	mul.w	r3, r1, r3
 800852c:	441a      	add	r2, r3
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	22ff      	movs	r2, #255	; 0xff
 8008536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	22ff      	movs	r2, #255	; 0xff
 800853e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d114      	bne.n	8008572 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d01a      	beq.n	8008586 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	3310      	adds	r3, #16
 8008554:	4618      	mov	r0, r3
 8008556:	f001 f9b7 	bl	80098c8 <xTaskRemoveFromEventList>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d012      	beq.n	8008586 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008560:	4b0c      	ldr	r3, [pc, #48]	; (8008594 <xQueueGenericReset+0xcc>)
 8008562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008566:	601a      	str	r2, [r3, #0]
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	f3bf 8f6f 	isb	sy
 8008570:	e009      	b.n	8008586 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	3310      	adds	r3, #16
 8008576:	4618      	mov	r0, r3
 8008578:	f7ff fef2 	bl	8008360 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	3324      	adds	r3, #36	; 0x24
 8008580:	4618      	mov	r0, r3
 8008582:	f7ff feed 	bl	8008360 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008586:	f001 ff05 	bl	800a394 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800858a:	2301      	movs	r3, #1
}
 800858c:	4618      	mov	r0, r3
 800858e:	3710      	adds	r7, #16
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	e000ed04 	.word	0xe000ed04

08008598 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008598:	b580      	push	{r7, lr}
 800859a:	b08e      	sub	sp, #56	; 0x38
 800859c:	af02      	add	r7, sp, #8
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	607a      	str	r2, [r7, #4]
 80085a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d10a      	bne.n	80085c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80085ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b0:	f383 8811 	msr	BASEPRI, r3
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80085be:	bf00      	nop
 80085c0:	e7fe      	b.n	80085c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d10a      	bne.n	80085de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80085c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085cc:	f383 8811 	msr	BASEPRI, r3
 80085d0:	f3bf 8f6f 	isb	sy
 80085d4:	f3bf 8f4f 	dsb	sy
 80085d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80085da:	bf00      	nop
 80085dc:	e7fe      	b.n	80085dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d002      	beq.n	80085ea <xQueueGenericCreateStatic+0x52>
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d001      	beq.n	80085ee <xQueueGenericCreateStatic+0x56>
 80085ea:	2301      	movs	r3, #1
 80085ec:	e000      	b.n	80085f0 <xQueueGenericCreateStatic+0x58>
 80085ee:	2300      	movs	r3, #0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d10a      	bne.n	800860a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80085f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f8:	f383 8811 	msr	BASEPRI, r3
 80085fc:	f3bf 8f6f 	isb	sy
 8008600:	f3bf 8f4f 	dsb	sy
 8008604:	623b      	str	r3, [r7, #32]
}
 8008606:	bf00      	nop
 8008608:	e7fe      	b.n	8008608 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d102      	bne.n	8008616 <xQueueGenericCreateStatic+0x7e>
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d101      	bne.n	800861a <xQueueGenericCreateStatic+0x82>
 8008616:	2301      	movs	r3, #1
 8008618:	e000      	b.n	800861c <xQueueGenericCreateStatic+0x84>
 800861a:	2300      	movs	r3, #0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d10a      	bne.n	8008636 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008624:	f383 8811 	msr	BASEPRI, r3
 8008628:	f3bf 8f6f 	isb	sy
 800862c:	f3bf 8f4f 	dsb	sy
 8008630:	61fb      	str	r3, [r7, #28]
}
 8008632:	bf00      	nop
 8008634:	e7fe      	b.n	8008634 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008636:	2348      	movs	r3, #72	; 0x48
 8008638:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	2b48      	cmp	r3, #72	; 0x48
 800863e:	d00a      	beq.n	8008656 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008644:	f383 8811 	msr	BASEPRI, r3
 8008648:	f3bf 8f6f 	isb	sy
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	61bb      	str	r3, [r7, #24]
}
 8008652:	bf00      	nop
 8008654:	e7fe      	b.n	8008654 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800865a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00d      	beq.n	800867c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008662:	2201      	movs	r2, #1
 8008664:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008668:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800866c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800866e:	9300      	str	r3, [sp, #0]
 8008670:	4613      	mov	r3, r2
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	68b9      	ldr	r1, [r7, #8]
 8008676:	68f8      	ldr	r0, [r7, #12]
 8008678:	f000 f843 	bl	8008702 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800867c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800867e:	4618      	mov	r0, r3
 8008680:	3730      	adds	r7, #48	; 0x30
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}

08008686 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008686:	b580      	push	{r7, lr}
 8008688:	b08a      	sub	sp, #40	; 0x28
 800868a:	af02      	add	r7, sp, #8
 800868c:	60f8      	str	r0, [r7, #12]
 800868e:	60b9      	str	r1, [r7, #8]
 8008690:	4613      	mov	r3, r2
 8008692:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10a      	bne.n	80086b0 <xQueueGenericCreate+0x2a>
	__asm volatile
 800869a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	613b      	str	r3, [r7, #16]
}
 80086ac:	bf00      	nop
 80086ae:	e7fe      	b.n	80086ae <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d102      	bne.n	80086bc <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80086b6:	2300      	movs	r3, #0
 80086b8:	61fb      	str	r3, [r7, #28]
 80086ba:	e004      	b.n	80086c6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	68ba      	ldr	r2, [r7, #8]
 80086c0:	fb02 f303 	mul.w	r3, r2, r3
 80086c4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	3348      	adds	r3, #72	; 0x48
 80086ca:	4618      	mov	r0, r3
 80086cc:	f001 ff54 	bl	800a578 <pvPortMalloc>
 80086d0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00f      	beq.n	80086f8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	3348      	adds	r3, #72	; 0x48
 80086dc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086e6:	79fa      	ldrb	r2, [r7, #7]
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	9300      	str	r3, [sp, #0]
 80086ec:	4613      	mov	r3, r2
 80086ee:	697a      	ldr	r2, [r7, #20]
 80086f0:	68b9      	ldr	r1, [r7, #8]
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f000 f805 	bl	8008702 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80086f8:	69bb      	ldr	r3, [r7, #24]
	}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3720      	adds	r7, #32
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b084      	sub	sp, #16
 8008706:	af00      	add	r7, sp, #0
 8008708:	60f8      	str	r0, [r7, #12]
 800870a:	60b9      	str	r1, [r7, #8]
 800870c:	607a      	str	r2, [r7, #4]
 800870e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d103      	bne.n	800871e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008716:	69bb      	ldr	r3, [r7, #24]
 8008718:	69ba      	ldr	r2, [r7, #24]
 800871a:	601a      	str	r2, [r3, #0]
 800871c:	e002      	b.n	8008724 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	687a      	ldr	r2, [r7, #4]
 8008722:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	68fa      	ldr	r2, [r7, #12]
 8008728:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	68ba      	ldr	r2, [r7, #8]
 800872e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008730:	2101      	movs	r1, #1
 8008732:	69b8      	ldr	r0, [r7, #24]
 8008734:	f7ff fec8 	bl	80084c8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008738:	bf00      	nop
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b08e      	sub	sp, #56	; 0x38
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	607a      	str	r2, [r7, #4]
 800874c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800874e:	2300      	movs	r3, #0
 8008750:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10a      	bne.n	8008772 <xQueueGenericSend+0x32>
	__asm volatile
 800875c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008760:	f383 8811 	msr	BASEPRI, r3
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800876e:	bf00      	nop
 8008770:	e7fe      	b.n	8008770 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d103      	bne.n	8008780 <xQueueGenericSend+0x40>
 8008778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800877c:	2b00      	cmp	r3, #0
 800877e:	d101      	bne.n	8008784 <xQueueGenericSend+0x44>
 8008780:	2301      	movs	r3, #1
 8008782:	e000      	b.n	8008786 <xQueueGenericSend+0x46>
 8008784:	2300      	movs	r3, #0
 8008786:	2b00      	cmp	r3, #0
 8008788:	d10a      	bne.n	80087a0 <xQueueGenericSend+0x60>
	__asm volatile
 800878a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878e:	f383 8811 	msr	BASEPRI, r3
 8008792:	f3bf 8f6f 	isb	sy
 8008796:	f3bf 8f4f 	dsb	sy
 800879a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800879c:	bf00      	nop
 800879e:	e7fe      	b.n	800879e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	2b02      	cmp	r3, #2
 80087a4:	d103      	bne.n	80087ae <xQueueGenericSend+0x6e>
 80087a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d101      	bne.n	80087b2 <xQueueGenericSend+0x72>
 80087ae:	2301      	movs	r3, #1
 80087b0:	e000      	b.n	80087b4 <xQueueGenericSend+0x74>
 80087b2:	2300      	movs	r3, #0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d10a      	bne.n	80087ce <xQueueGenericSend+0x8e>
	__asm volatile
 80087b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087bc:	f383 8811 	msr	BASEPRI, r3
 80087c0:	f3bf 8f6f 	isb	sy
 80087c4:	f3bf 8f4f 	dsb	sy
 80087c8:	623b      	str	r3, [r7, #32]
}
 80087ca:	bf00      	nop
 80087cc:	e7fe      	b.n	80087cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80087ce:	f001 fa3d 	bl	8009c4c <xTaskGetSchedulerState>
 80087d2:	4603      	mov	r3, r0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d102      	bne.n	80087de <xQueueGenericSend+0x9e>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d101      	bne.n	80087e2 <xQueueGenericSend+0xa2>
 80087de:	2301      	movs	r3, #1
 80087e0:	e000      	b.n	80087e4 <xQueueGenericSend+0xa4>
 80087e2:	2300      	movs	r3, #0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d10a      	bne.n	80087fe <xQueueGenericSend+0xbe>
	__asm volatile
 80087e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ec:	f383 8811 	msr	BASEPRI, r3
 80087f0:	f3bf 8f6f 	isb	sy
 80087f4:	f3bf 8f4f 	dsb	sy
 80087f8:	61fb      	str	r3, [r7, #28]
}
 80087fa:	bf00      	nop
 80087fc:	e7fe      	b.n	80087fc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80087fe:	f001 fd99 	bl	800a334 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800880a:	429a      	cmp	r2, r3
 800880c:	d302      	bcc.n	8008814 <xQueueGenericSend+0xd4>
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	2b02      	cmp	r3, #2
 8008812:	d129      	bne.n	8008868 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008814:	683a      	ldr	r2, [r7, #0]
 8008816:	68b9      	ldr	r1, [r7, #8]
 8008818:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800881a:	f000 fb3f 	bl	8008e9c <prvCopyDataToQueue>
 800881e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008824:	2b00      	cmp	r3, #0
 8008826:	d010      	beq.n	800884a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882a:	3324      	adds	r3, #36	; 0x24
 800882c:	4618      	mov	r0, r3
 800882e:	f001 f84b 	bl	80098c8 <xTaskRemoveFromEventList>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	d013      	beq.n	8008860 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008838:	4b3f      	ldr	r3, [pc, #252]	; (8008938 <xQueueGenericSend+0x1f8>)
 800883a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800883e:	601a      	str	r2, [r3, #0]
 8008840:	f3bf 8f4f 	dsb	sy
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	e00a      	b.n	8008860 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800884a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800884c:	2b00      	cmp	r3, #0
 800884e:	d007      	beq.n	8008860 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008850:	4b39      	ldr	r3, [pc, #228]	; (8008938 <xQueueGenericSend+0x1f8>)
 8008852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008856:	601a      	str	r2, [r3, #0]
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008860:	f001 fd98 	bl	800a394 <vPortExitCritical>
				return pdPASS;
 8008864:	2301      	movs	r3, #1
 8008866:	e063      	b.n	8008930 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d103      	bne.n	8008876 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800886e:	f001 fd91 	bl	800a394 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008872:	2300      	movs	r3, #0
 8008874:	e05c      	b.n	8008930 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008878:	2b00      	cmp	r3, #0
 800887a:	d106      	bne.n	800888a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800887c:	f107 0314 	add.w	r3, r7, #20
 8008880:	4618      	mov	r0, r3
 8008882:	f001 f883 	bl	800998c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008886:	2301      	movs	r3, #1
 8008888:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800888a:	f001 fd83 	bl	800a394 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800888e:	f000 fe33 	bl	80094f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008892:	f001 fd4f 	bl	800a334 <vPortEnterCritical>
 8008896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008898:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800889c:	b25b      	sxtb	r3, r3
 800889e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a2:	d103      	bne.n	80088ac <xQueueGenericSend+0x16c>
 80088a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a6:	2200      	movs	r2, #0
 80088a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088b2:	b25b      	sxtb	r3, r3
 80088b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088b8:	d103      	bne.n	80088c2 <xQueueGenericSend+0x182>
 80088ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088bc:	2200      	movs	r2, #0
 80088be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088c2:	f001 fd67 	bl	800a394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088c6:	1d3a      	adds	r2, r7, #4
 80088c8:	f107 0314 	add.w	r3, r7, #20
 80088cc:	4611      	mov	r1, r2
 80088ce:	4618      	mov	r0, r3
 80088d0:	f001 f872 	bl	80099b8 <xTaskCheckForTimeOut>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d124      	bne.n	8008924 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80088da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088dc:	f000 fbd6 	bl	800908c <prvIsQueueFull>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d018      	beq.n	8008918 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80088e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e8:	3310      	adds	r3, #16
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	4611      	mov	r1, r2
 80088ee:	4618      	mov	r0, r3
 80088f0:	f000 ffc6 	bl	8009880 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80088f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088f6:	f000 fb61 	bl	8008fbc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80088fa:	f000 fe0b 	bl	8009514 <xTaskResumeAll>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	f47f af7c 	bne.w	80087fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008906:	4b0c      	ldr	r3, [pc, #48]	; (8008938 <xQueueGenericSend+0x1f8>)
 8008908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800890c:	601a      	str	r2, [r3, #0]
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	f3bf 8f6f 	isb	sy
 8008916:	e772      	b.n	80087fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800891a:	f000 fb4f 	bl	8008fbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800891e:	f000 fdf9 	bl	8009514 <xTaskResumeAll>
 8008922:	e76c      	b.n	80087fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008924:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008926:	f000 fb49 	bl	8008fbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800892a:	f000 fdf3 	bl	8009514 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800892e:	2300      	movs	r3, #0
		}
	}
}
 8008930:	4618      	mov	r0, r3
 8008932:	3738      	adds	r7, #56	; 0x38
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	e000ed04 	.word	0xe000ed04

0800893c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b08e      	sub	sp, #56	; 0x38
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800894a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894c:	2b00      	cmp	r3, #0
 800894e:	d10a      	bne.n	8008966 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008954:	f383 8811 	msr	BASEPRI, r3
 8008958:	f3bf 8f6f 	isb	sy
 800895c:	f3bf 8f4f 	dsb	sy
 8008960:	623b      	str	r3, [r7, #32]
}
 8008962:	bf00      	nop
 8008964:	e7fe      	b.n	8008964 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00a      	beq.n	8008984 <xQueueGiveFromISR+0x48>
	__asm volatile
 800896e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008972:	f383 8811 	msr	BASEPRI, r3
 8008976:	f3bf 8f6f 	isb	sy
 800897a:	f3bf 8f4f 	dsb	sy
 800897e:	61fb      	str	r3, [r7, #28]
}
 8008980:	bf00      	nop
 8008982:	e7fe      	b.n	8008982 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8008984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d103      	bne.n	8008994 <xQueueGiveFromISR+0x58>
 800898c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d101      	bne.n	8008998 <xQueueGiveFromISR+0x5c>
 8008994:	2301      	movs	r3, #1
 8008996:	e000      	b.n	800899a <xQueueGiveFromISR+0x5e>
 8008998:	2300      	movs	r3, #0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10a      	bne.n	80089b4 <xQueueGiveFromISR+0x78>
	__asm volatile
 800899e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	61bb      	str	r3, [r7, #24]
}
 80089b0:	bf00      	nop
 80089b2:	e7fe      	b.n	80089b2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80089b4:	f001 fda0 	bl	800a4f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80089b8:	f3ef 8211 	mrs	r2, BASEPRI
 80089bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c0:	f383 8811 	msr	BASEPRI, r3
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	617a      	str	r2, [r7, #20]
 80089ce:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80089d0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80089da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d22b      	bcs.n	8008a3c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80089e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80089ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f0:	1c5a      	adds	r2, r3, #1
 80089f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80089f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80089fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089fe:	d112      	bne.n	8008a26 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d016      	beq.n	8008a36 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0a:	3324      	adds	r3, #36	; 0x24
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f000 ff5b 	bl	80098c8 <xTaskRemoveFromEventList>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d00e      	beq.n	8008a36 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00b      	beq.n	8008a36 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	2201      	movs	r2, #1
 8008a22:	601a      	str	r2, [r3, #0]
 8008a24:	e007      	b.n	8008a36 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	b25a      	sxtb	r2, r3
 8008a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008a36:	2301      	movs	r3, #1
 8008a38:	637b      	str	r3, [r7, #52]	; 0x34
 8008a3a:	e001      	b.n	8008a40 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	637b      	str	r3, [r7, #52]	; 0x34
 8008a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a42:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008a4a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3738      	adds	r7, #56	; 0x38
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
	...

08008a58 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b08c      	sub	sp, #48	; 0x30
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a64:	2300      	movs	r3, #0
 8008a66:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10a      	bne.n	8008a88 <xQueueReceive+0x30>
	__asm volatile
 8008a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a76:	f383 8811 	msr	BASEPRI, r3
 8008a7a:	f3bf 8f6f 	isb	sy
 8008a7e:	f3bf 8f4f 	dsb	sy
 8008a82:	623b      	str	r3, [r7, #32]
}
 8008a84:	bf00      	nop
 8008a86:	e7fe      	b.n	8008a86 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d103      	bne.n	8008a96 <xQueueReceive+0x3e>
 8008a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d101      	bne.n	8008a9a <xQueueReceive+0x42>
 8008a96:	2301      	movs	r3, #1
 8008a98:	e000      	b.n	8008a9c <xQueueReceive+0x44>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d10a      	bne.n	8008ab6 <xQueueReceive+0x5e>
	__asm volatile
 8008aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa4:	f383 8811 	msr	BASEPRI, r3
 8008aa8:	f3bf 8f6f 	isb	sy
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	61fb      	str	r3, [r7, #28]
}
 8008ab2:	bf00      	nop
 8008ab4:	e7fe      	b.n	8008ab4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ab6:	f001 f8c9 	bl	8009c4c <xTaskGetSchedulerState>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d102      	bne.n	8008ac6 <xQueueReceive+0x6e>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d101      	bne.n	8008aca <xQueueReceive+0x72>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e000      	b.n	8008acc <xQueueReceive+0x74>
 8008aca:	2300      	movs	r3, #0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d10a      	bne.n	8008ae6 <xQueueReceive+0x8e>
	__asm volatile
 8008ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad4:	f383 8811 	msr	BASEPRI, r3
 8008ad8:	f3bf 8f6f 	isb	sy
 8008adc:	f3bf 8f4f 	dsb	sy
 8008ae0:	61bb      	str	r3, [r7, #24]
}
 8008ae2:	bf00      	nop
 8008ae4:	e7fe      	b.n	8008ae4 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ae6:	f001 fc25 	bl	800a334 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d01f      	beq.n	8008b36 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008af6:	68b9      	ldr	r1, [r7, #8]
 8008af8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008afa:	f000 fa39 	bl	8008f70 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b00:	1e5a      	subs	r2, r3, #1
 8008b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b04:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d00f      	beq.n	8008b2e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b10:	3310      	adds	r3, #16
 8008b12:	4618      	mov	r0, r3
 8008b14:	f000 fed8 	bl	80098c8 <xTaskRemoveFromEventList>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d007      	beq.n	8008b2e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b1e:	4b3d      	ldr	r3, [pc, #244]	; (8008c14 <xQueueReceive+0x1bc>)
 8008b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b24:	601a      	str	r2, [r3, #0]
 8008b26:	f3bf 8f4f 	dsb	sy
 8008b2a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b2e:	f001 fc31 	bl	800a394 <vPortExitCritical>
				return pdPASS;
 8008b32:	2301      	movs	r3, #1
 8008b34:	e069      	b.n	8008c0a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d103      	bne.n	8008b44 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b3c:	f001 fc2a 	bl	800a394 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b40:	2300      	movs	r3, #0
 8008b42:	e062      	b.n	8008c0a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d106      	bne.n	8008b58 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b4a:	f107 0310 	add.w	r3, r7, #16
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f000 ff1c 	bl	800998c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b54:	2301      	movs	r3, #1
 8008b56:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b58:	f001 fc1c 	bl	800a394 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b5c:	f000 fccc 	bl	80094f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b60:	f001 fbe8 	bl	800a334 <vPortEnterCritical>
 8008b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b6a:	b25b      	sxtb	r3, r3
 8008b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b70:	d103      	bne.n	8008b7a <xQueueReceive+0x122>
 8008b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b74:	2200      	movs	r2, #0
 8008b76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b80:	b25b      	sxtb	r3, r3
 8008b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b86:	d103      	bne.n	8008b90 <xQueueReceive+0x138>
 8008b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b90:	f001 fc00 	bl	800a394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b94:	1d3a      	adds	r2, r7, #4
 8008b96:	f107 0310 	add.w	r3, r7, #16
 8008b9a:	4611      	mov	r1, r2
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f000 ff0b 	bl	80099b8 <xTaskCheckForTimeOut>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d123      	bne.n	8008bf0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ba8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008baa:	f000 fa59 	bl	8009060 <prvIsQueueEmpty>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d017      	beq.n	8008be4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb6:	3324      	adds	r3, #36	; 0x24
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	4611      	mov	r1, r2
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f000 fe5f 	bl	8009880 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008bc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bc4:	f000 f9fa 	bl	8008fbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008bc8:	f000 fca4 	bl	8009514 <xTaskResumeAll>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d189      	bne.n	8008ae6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008bd2:	4b10      	ldr	r3, [pc, #64]	; (8008c14 <xQueueReceive+0x1bc>)
 8008bd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bd8:	601a      	str	r2, [r3, #0]
 8008bda:	f3bf 8f4f 	dsb	sy
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	e780      	b.n	8008ae6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008be4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008be6:	f000 f9e9 	bl	8008fbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008bea:	f000 fc93 	bl	8009514 <xTaskResumeAll>
 8008bee:	e77a      	b.n	8008ae6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008bf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bf2:	f000 f9e3 	bl	8008fbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008bf6:	f000 fc8d 	bl	8009514 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bfc:	f000 fa30 	bl	8009060 <prvIsQueueEmpty>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	f43f af6f 	beq.w	8008ae6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3730      	adds	r7, #48	; 0x30
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}
 8008c12:	bf00      	nop
 8008c14:	e000ed04 	.word	0xe000ed04

08008c18 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b08e      	sub	sp, #56	; 0x38
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008c22:	2300      	movs	r3, #0
 8008c24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d10a      	bne.n	8008c4a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	623b      	str	r3, [r7, #32]
}
 8008c46:	bf00      	nop
 8008c48:	e7fe      	b.n	8008c48 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00a      	beq.n	8008c68 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	61fb      	str	r3, [r7, #28]
}
 8008c64:	bf00      	nop
 8008c66:	e7fe      	b.n	8008c66 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c68:	f000 fff0 	bl	8009c4c <xTaskGetSchedulerState>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d102      	bne.n	8008c78 <xQueueSemaphoreTake+0x60>
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d101      	bne.n	8008c7c <xQueueSemaphoreTake+0x64>
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e000      	b.n	8008c7e <xQueueSemaphoreTake+0x66>
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d10a      	bne.n	8008c98 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c86:	f383 8811 	msr	BASEPRI, r3
 8008c8a:	f3bf 8f6f 	isb	sy
 8008c8e:	f3bf 8f4f 	dsb	sy
 8008c92:	61bb      	str	r3, [r7, #24]
}
 8008c94:	bf00      	nop
 8008c96:	e7fe      	b.n	8008c96 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c98:	f001 fb4c 	bl	800a334 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d024      	beq.n	8008cf2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008caa:	1e5a      	subs	r2, r3, #1
 8008cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cae:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d104      	bne.n	8008cc2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008cb8:	f001 f992 	bl	8009fe0 <pvTaskIncrementMutexHeldCount>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc0:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00f      	beq.n	8008cea <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ccc:	3310      	adds	r3, #16
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f000 fdfa 	bl	80098c8 <xTaskRemoveFromEventList>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d007      	beq.n	8008cea <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008cda:	4b54      	ldr	r3, [pc, #336]	; (8008e2c <xQueueSemaphoreTake+0x214>)
 8008cdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ce0:	601a      	str	r2, [r3, #0]
 8008ce2:	f3bf 8f4f 	dsb	sy
 8008ce6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008cea:	f001 fb53 	bl	800a394 <vPortExitCritical>
				return pdPASS;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e097      	b.n	8008e22 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d111      	bne.n	8008d1c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00a      	beq.n	8008d14 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d02:	f383 8811 	msr	BASEPRI, r3
 8008d06:	f3bf 8f6f 	isb	sy
 8008d0a:	f3bf 8f4f 	dsb	sy
 8008d0e:	617b      	str	r3, [r7, #20]
}
 8008d10:	bf00      	nop
 8008d12:	e7fe      	b.n	8008d12 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008d14:	f001 fb3e 	bl	800a394 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	e082      	b.n	8008e22 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d106      	bne.n	8008d30 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d22:	f107 030c 	add.w	r3, r7, #12
 8008d26:	4618      	mov	r0, r3
 8008d28:	f000 fe30 	bl	800998c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d30:	f001 fb30 	bl	800a394 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d34:	f000 fbe0 	bl	80094f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d38:	f001 fafc 	bl	800a334 <vPortEnterCritical>
 8008d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d42:	b25b      	sxtb	r3, r3
 8008d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d48:	d103      	bne.n	8008d52 <xQueueSemaphoreTake+0x13a>
 8008d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d58:	b25b      	sxtb	r3, r3
 8008d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d5e:	d103      	bne.n	8008d68 <xQueueSemaphoreTake+0x150>
 8008d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d62:	2200      	movs	r2, #0
 8008d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d68:	f001 fb14 	bl	800a394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d6c:	463a      	mov	r2, r7
 8008d6e:	f107 030c 	add.w	r3, r7, #12
 8008d72:	4611      	mov	r1, r2
 8008d74:	4618      	mov	r0, r3
 8008d76:	f000 fe1f 	bl	80099b8 <xTaskCheckForTimeOut>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d132      	bne.n	8008de6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d82:	f000 f96d 	bl	8009060 <prvIsQueueEmpty>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d026      	beq.n	8008dda <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d109      	bne.n	8008da8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008d94:	f001 face 	bl	800a334 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f000 ff73 	bl	8009c88 <xTaskPriorityInherit>
 8008da2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008da4:	f001 faf6 	bl	800a394 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008daa:	3324      	adds	r3, #36	; 0x24
 8008dac:	683a      	ldr	r2, [r7, #0]
 8008dae:	4611      	mov	r1, r2
 8008db0:	4618      	mov	r0, r3
 8008db2:	f000 fd65 	bl	8009880 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008db6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008db8:	f000 f900 	bl	8008fbc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008dbc:	f000 fbaa 	bl	8009514 <xTaskResumeAll>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	f47f af68 	bne.w	8008c98 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008dc8:	4b18      	ldr	r3, [pc, #96]	; (8008e2c <xQueueSemaphoreTake+0x214>)
 8008dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dce:	601a      	str	r2, [r3, #0]
 8008dd0:	f3bf 8f4f 	dsb	sy
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	e75e      	b.n	8008c98 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008dda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ddc:	f000 f8ee 	bl	8008fbc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008de0:	f000 fb98 	bl	8009514 <xTaskResumeAll>
 8008de4:	e758      	b.n	8008c98 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008de6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008de8:	f000 f8e8 	bl	8008fbc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008dec:	f000 fb92 	bl	8009514 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008df0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008df2:	f000 f935 	bl	8009060 <prvIsQueueEmpty>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	f43f af4d 	beq.w	8008c98 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00d      	beq.n	8008e20 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008e04:	f001 fa96 	bl	800a334 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008e08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e0a:	f000 f82f 	bl	8008e6c <prvGetDisinheritPriorityAfterTimeout>
 8008e0e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8008e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e16:	4618      	mov	r0, r3
 8008e18:	f001 f842 	bl	8009ea0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008e1c:	f001 faba 	bl	800a394 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3738      	adds	r7, #56	; 0x38
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	e000ed04 	.word	0xe000ed04

08008e30 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d10a      	bne.n	8008e54 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8008e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e42:	f383 8811 	msr	BASEPRI, r3
 8008e46:	f3bf 8f6f 	isb	sy
 8008e4a:	f3bf 8f4f 	dsb	sy
 8008e4e:	60bb      	str	r3, [r7, #8]
}
 8008e50:	bf00      	nop
 8008e52:	e7fe      	b.n	8008e52 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8008e54:	f001 fa6e 	bl	800a334 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8008e5e:	f001 fa99 	bl	800a394 <vPortExitCritical>

	return uxReturn;
 8008e62:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008e64:	4618      	mov	r0, r3
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d006      	beq.n	8008e8a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f1c3 0307 	rsb	r3, r3, #7
 8008e86:	60fb      	str	r3, [r7, #12]
 8008e88:	e001      	b.n	8008e8e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
	}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3714      	adds	r7, #20
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b086      	sub	sp, #24
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d10d      	bne.n	8008ed6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d14d      	bne.n	8008f5e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f000 ff64 	bl	8009d94 <xTaskPriorityDisinherit>
 8008ecc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	605a      	str	r2, [r3, #4]
 8008ed4:	e043      	b.n	8008f5e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d119      	bne.n	8008f10 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	6898      	ldr	r0, [r3, #8]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	68b9      	ldr	r1, [r7, #8]
 8008ee8:	f001 ffc1 	bl	800ae6e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	689a      	ldr	r2, [r3, #8]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef4:	441a      	add	r2, r3
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	689a      	ldr	r2, [r3, #8]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	685b      	ldr	r3, [r3, #4]
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d32b      	bcc.n	8008f5e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	609a      	str	r2, [r3, #8]
 8008f0e:	e026      	b.n	8008f5e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	68d8      	ldr	r0, [r3, #12]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f18:	461a      	mov	r2, r3
 8008f1a:	68b9      	ldr	r1, [r7, #8]
 8008f1c:	f001 ffa7 	bl	800ae6e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	68da      	ldr	r2, [r3, #12]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f28:	425b      	negs	r3, r3
 8008f2a:	441a      	add	r2, r3
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	68da      	ldr	r2, [r3, #12]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d207      	bcs.n	8008f4c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	685a      	ldr	r2, [r3, #4]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f44:	425b      	negs	r3, r3
 8008f46:	441a      	add	r2, r3
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2b02      	cmp	r3, #2
 8008f50:	d105      	bne.n	8008f5e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d002      	beq.n	8008f5e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	1c5a      	adds	r2, r3, #1
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008f66:	697b      	ldr	r3, [r7, #20]
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3718      	adds	r7, #24
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b082      	sub	sp, #8
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d018      	beq.n	8008fb4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	68da      	ldr	r2, [r3, #12]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8a:	441a      	add	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	68da      	ldr	r2, [r3, #12]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d303      	bcc.n	8008fa4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	68d9      	ldr	r1, [r3, #12]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fac:	461a      	mov	r2, r3
 8008fae:	6838      	ldr	r0, [r7, #0]
 8008fb0:	f001 ff5d 	bl	800ae6e <memcpy>
	}
}
 8008fb4:	bf00      	nop
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008fc4:	f001 f9b6 	bl	800a334 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fd0:	e011      	b.n	8008ff6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d012      	beq.n	8009000 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	3324      	adds	r3, #36	; 0x24
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f000 fc72 	bl	80098c8 <xTaskRemoveFromEventList>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d001      	beq.n	8008fee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008fea:	f000 fd47 	bl	8009a7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008fee:	7bfb      	ldrb	r3, [r7, #15]
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	dce9      	bgt.n	8008fd2 <prvUnlockQueue+0x16>
 8008ffe:	e000      	b.n	8009002 <prvUnlockQueue+0x46>
					break;
 8009000:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	22ff      	movs	r2, #255	; 0xff
 8009006:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800900a:	f001 f9c3 	bl	800a394 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800900e:	f001 f991 	bl	800a334 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009018:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800901a:	e011      	b.n	8009040 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d012      	beq.n	800904a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	3310      	adds	r3, #16
 8009028:	4618      	mov	r0, r3
 800902a:	f000 fc4d 	bl	80098c8 <xTaskRemoveFromEventList>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d001      	beq.n	8009038 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009034:	f000 fd22 	bl	8009a7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009038:	7bbb      	ldrb	r3, [r7, #14]
 800903a:	3b01      	subs	r3, #1
 800903c:	b2db      	uxtb	r3, r3
 800903e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009040:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009044:	2b00      	cmp	r3, #0
 8009046:	dce9      	bgt.n	800901c <prvUnlockQueue+0x60>
 8009048:	e000      	b.n	800904c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800904a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	22ff      	movs	r2, #255	; 0xff
 8009050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009054:	f001 f99e 	bl	800a394 <vPortExitCritical>
}
 8009058:	bf00      	nop
 800905a:	3710      	adds	r7, #16
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009068:	f001 f964 	bl	800a334 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009070:	2b00      	cmp	r3, #0
 8009072:	d102      	bne.n	800907a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009074:	2301      	movs	r3, #1
 8009076:	60fb      	str	r3, [r7, #12]
 8009078:	e001      	b.n	800907e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800907a:	2300      	movs	r3, #0
 800907c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800907e:	f001 f989 	bl	800a394 <vPortExitCritical>

	return xReturn;
 8009082:	68fb      	ldr	r3, [r7, #12]
}
 8009084:	4618      	mov	r0, r3
 8009086:	3710      	adds	r7, #16
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009094:	f001 f94e 	bl	800a334 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d102      	bne.n	80090aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80090a4:	2301      	movs	r3, #1
 80090a6:	60fb      	str	r3, [r7, #12]
 80090a8:	e001      	b.n	80090ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80090aa:	2300      	movs	r3, #0
 80090ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090ae:	f001 f971 	bl	800a394 <vPortExitCritical>

	return xReturn;
 80090b2:	68fb      	ldr	r3, [r7, #12]
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3710      	adds	r7, #16
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b08e      	sub	sp, #56	; 0x38
 80090c0:	af04      	add	r7, sp, #16
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
 80090c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80090ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d10a      	bne.n	80090e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80090d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d4:	f383 8811 	msr	BASEPRI, r3
 80090d8:	f3bf 8f6f 	isb	sy
 80090dc:	f3bf 8f4f 	dsb	sy
 80090e0:	623b      	str	r3, [r7, #32]
}
 80090e2:	bf00      	nop
 80090e4:	e7fe      	b.n	80090e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80090e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d10a      	bne.n	8009102 <xTaskCreateStatic+0x46>
	__asm volatile
 80090ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f0:	f383 8811 	msr	BASEPRI, r3
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	61fb      	str	r3, [r7, #28]
}
 80090fe:	bf00      	nop
 8009100:	e7fe      	b.n	8009100 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009102:	2354      	movs	r3, #84	; 0x54
 8009104:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	2b54      	cmp	r3, #84	; 0x54
 800910a:	d00a      	beq.n	8009122 <xTaskCreateStatic+0x66>
	__asm volatile
 800910c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009110:	f383 8811 	msr	BASEPRI, r3
 8009114:	f3bf 8f6f 	isb	sy
 8009118:	f3bf 8f4f 	dsb	sy
 800911c:	61bb      	str	r3, [r7, #24]
}
 800911e:	bf00      	nop
 8009120:	e7fe      	b.n	8009120 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009124:	2b00      	cmp	r3, #0
 8009126:	d01e      	beq.n	8009166 <xTaskCreateStatic+0xaa>
 8009128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800912a:	2b00      	cmp	r3, #0
 800912c:	d01b      	beq.n	8009166 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800912e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009130:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009134:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009136:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913a:	2202      	movs	r2, #2
 800913c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009140:	2300      	movs	r3, #0
 8009142:	9303      	str	r3, [sp, #12]
 8009144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009146:	9302      	str	r3, [sp, #8]
 8009148:	f107 0314 	add.w	r3, r7, #20
 800914c:	9301      	str	r3, [sp, #4]
 800914e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009150:	9300      	str	r3, [sp, #0]
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	68b9      	ldr	r1, [r7, #8]
 8009158:	68f8      	ldr	r0, [r7, #12]
 800915a:	f000 f850 	bl	80091fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800915e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009160:	f000 f8cc 	bl	80092fc <prvAddNewTaskToReadyList>
 8009164:	e001      	b.n	800916a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8009166:	2300      	movs	r3, #0
 8009168:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800916a:	697b      	ldr	r3, [r7, #20]
	}
 800916c:	4618      	mov	r0, r3
 800916e:	3728      	adds	r7, #40	; 0x28
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009174:	b580      	push	{r7, lr}
 8009176:	b08c      	sub	sp, #48	; 0x30
 8009178:	af04      	add	r7, sp, #16
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	603b      	str	r3, [r7, #0]
 8009180:	4613      	mov	r3, r2
 8009182:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009184:	88fb      	ldrh	r3, [r7, #6]
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	4618      	mov	r0, r3
 800918a:	f001 f9f5 	bl	800a578 <pvPortMalloc>
 800918e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00e      	beq.n	80091b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009196:	2054      	movs	r0, #84	; 0x54
 8009198:	f001 f9ee 	bl	800a578 <pvPortMalloc>
 800919c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d003      	beq.n	80091ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	697a      	ldr	r2, [r7, #20]
 80091a8:	631a      	str	r2, [r3, #48]	; 0x30
 80091aa:	e005      	b.n	80091b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80091ac:	6978      	ldr	r0, [r7, #20]
 80091ae:	f001 faa7 	bl	800a700 <vPortFree>
 80091b2:	e001      	b.n	80091b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80091b4:	2300      	movs	r3, #0
 80091b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d017      	beq.n	80091ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	2200      	movs	r2, #0
 80091c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80091c6:	88fa      	ldrh	r2, [r7, #6]
 80091c8:	2300      	movs	r3, #0
 80091ca:	9303      	str	r3, [sp, #12]
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	9302      	str	r3, [sp, #8]
 80091d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d2:	9301      	str	r3, [sp, #4]
 80091d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	68b9      	ldr	r1, [r7, #8]
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f000 f80e 	bl	80091fe <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091e2:	69f8      	ldr	r0, [r7, #28]
 80091e4:	f000 f88a 	bl	80092fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80091e8:	2301      	movs	r3, #1
 80091ea:	61bb      	str	r3, [r7, #24]
 80091ec:	e002      	b.n	80091f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80091ee:	f04f 33ff 	mov.w	r3, #4294967295
 80091f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80091f4:	69bb      	ldr	r3, [r7, #24]
	}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3720      	adds	r7, #32
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b088      	sub	sp, #32
 8009202:	af00      	add	r7, sp, #0
 8009204:	60f8      	str	r0, [r7, #12]
 8009206:	60b9      	str	r1, [r7, #8]
 8009208:	607a      	str	r2, [r7, #4]
 800920a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800920c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009216:	3b01      	subs	r3, #1
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	4413      	add	r3, r2
 800921c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800921e:	69bb      	ldr	r3, [r7, #24]
 8009220:	f023 0307 	bic.w	r3, r3, #7
 8009224:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	f003 0307 	and.w	r3, r3, #7
 800922c:	2b00      	cmp	r3, #0
 800922e:	d00a      	beq.n	8009246 <prvInitialiseNewTask+0x48>
	__asm volatile
 8009230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009234:	f383 8811 	msr	BASEPRI, r3
 8009238:	f3bf 8f6f 	isb	sy
 800923c:	f3bf 8f4f 	dsb	sy
 8009240:	617b      	str	r3, [r7, #20]
}
 8009242:	bf00      	nop
 8009244:	e7fe      	b.n	8009244 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009246:	2300      	movs	r3, #0
 8009248:	61fb      	str	r3, [r7, #28]
 800924a:	e012      	b.n	8009272 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800924c:	68ba      	ldr	r2, [r7, #8]
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	4413      	add	r3, r2
 8009252:	7819      	ldrb	r1, [r3, #0]
 8009254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	4413      	add	r3, r2
 800925a:	3334      	adds	r3, #52	; 0x34
 800925c:	460a      	mov	r2, r1
 800925e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009260:	68ba      	ldr	r2, [r7, #8]
 8009262:	69fb      	ldr	r3, [r7, #28]
 8009264:	4413      	add	r3, r2
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d006      	beq.n	800927a <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800926c:	69fb      	ldr	r3, [r7, #28]
 800926e:	3301      	adds	r3, #1
 8009270:	61fb      	str	r3, [r7, #28]
 8009272:	69fb      	ldr	r3, [r7, #28]
 8009274:	2b0f      	cmp	r3, #15
 8009276:	d9e9      	bls.n	800924c <prvInitialiseNewTask+0x4e>
 8009278:	e000      	b.n	800927c <prvInitialiseNewTask+0x7e>
		{
			break;
 800927a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800927c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927e:	2200      	movs	r2, #0
 8009280:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009286:	2b06      	cmp	r3, #6
 8009288:	d901      	bls.n	800928e <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800928a:	2306      	movs	r3, #6
 800928c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800928e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009290:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009292:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009296:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009298:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800929a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929c:	2200      	movs	r2, #0
 800929e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80092a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a2:	3304      	adds	r3, #4
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7ff f87b 	bl	80083a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80092aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ac:	3318      	adds	r3, #24
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7ff f876 	bl	80083a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80092b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092b8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092bc:	f1c3 0207 	rsb	r2, r3, #7
 80092c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80092c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092c8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80092ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092cc:	2200      	movs	r2, #0
 80092ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80092d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d2:	2200      	movs	r2, #0
 80092d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80092d8:	683a      	ldr	r2, [r7, #0]
 80092da:	68f9      	ldr	r1, [r7, #12]
 80092dc:	69b8      	ldr	r0, [r7, #24]
 80092de:	f000 fef9 	bl	800a0d4 <pxPortInitialiseStack>
 80092e2:	4602      	mov	r2, r0
 80092e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80092e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d002      	beq.n	80092f4 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80092ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092f4:	bf00      	nop
 80092f6:	3720      	adds	r7, #32
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009304:	f001 f816 	bl	800a334 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009308:	4b2a      	ldr	r3, [pc, #168]	; (80093b4 <prvAddNewTaskToReadyList+0xb8>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	3301      	adds	r3, #1
 800930e:	4a29      	ldr	r2, [pc, #164]	; (80093b4 <prvAddNewTaskToReadyList+0xb8>)
 8009310:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009312:	4b29      	ldr	r3, [pc, #164]	; (80093b8 <prvAddNewTaskToReadyList+0xbc>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d109      	bne.n	800932e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800931a:	4a27      	ldr	r2, [pc, #156]	; (80093b8 <prvAddNewTaskToReadyList+0xbc>)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009320:	4b24      	ldr	r3, [pc, #144]	; (80093b4 <prvAddNewTaskToReadyList+0xb8>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2b01      	cmp	r3, #1
 8009326:	d110      	bne.n	800934a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009328:	f000 fbcc 	bl	8009ac4 <prvInitialiseTaskLists>
 800932c:	e00d      	b.n	800934a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800932e:	4b23      	ldr	r3, [pc, #140]	; (80093bc <prvAddNewTaskToReadyList+0xc0>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d109      	bne.n	800934a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009336:	4b20      	ldr	r3, [pc, #128]	; (80093b8 <prvAddNewTaskToReadyList+0xbc>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009340:	429a      	cmp	r2, r3
 8009342:	d802      	bhi.n	800934a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009344:	4a1c      	ldr	r2, [pc, #112]	; (80093b8 <prvAddNewTaskToReadyList+0xbc>)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800934a:	4b1d      	ldr	r3, [pc, #116]	; (80093c0 <prvAddNewTaskToReadyList+0xc4>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	3301      	adds	r3, #1
 8009350:	4a1b      	ldr	r2, [pc, #108]	; (80093c0 <prvAddNewTaskToReadyList+0xc4>)
 8009352:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009358:	2201      	movs	r2, #1
 800935a:	409a      	lsls	r2, r3
 800935c:	4b19      	ldr	r3, [pc, #100]	; (80093c4 <prvAddNewTaskToReadyList+0xc8>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4313      	orrs	r3, r2
 8009362:	4a18      	ldr	r2, [pc, #96]	; (80093c4 <prvAddNewTaskToReadyList+0xc8>)
 8009364:	6013      	str	r3, [r2, #0]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800936a:	4613      	mov	r3, r2
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	4413      	add	r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4a15      	ldr	r2, [pc, #84]	; (80093c8 <prvAddNewTaskToReadyList+0xcc>)
 8009374:	441a      	add	r2, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	3304      	adds	r3, #4
 800937a:	4619      	mov	r1, r3
 800937c:	4610      	mov	r0, r2
 800937e:	f7ff f81c 	bl	80083ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009382:	f001 f807 	bl	800a394 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009386:	4b0d      	ldr	r3, [pc, #52]	; (80093bc <prvAddNewTaskToReadyList+0xc0>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00e      	beq.n	80093ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800938e:	4b0a      	ldr	r3, [pc, #40]	; (80093b8 <prvAddNewTaskToReadyList+0xbc>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009398:	429a      	cmp	r2, r3
 800939a:	d207      	bcs.n	80093ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800939c:	4b0b      	ldr	r3, [pc, #44]	; (80093cc <prvAddNewTaskToReadyList+0xd0>)
 800939e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093a2:	601a      	str	r2, [r3, #0]
 80093a4:	f3bf 8f4f 	dsb	sy
 80093a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093ac:	bf00      	nop
 80093ae:	3708      	adds	r7, #8
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	20000848 	.word	0x20000848
 80093b8:	20000748 	.word	0x20000748
 80093bc:	20000854 	.word	0x20000854
 80093c0:	20000864 	.word	0x20000864
 80093c4:	20000850 	.word	0x20000850
 80093c8:	2000074c 	.word	0x2000074c
 80093cc:	e000ed04 	.word	0xe000ed04

080093d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80093d8:	2300      	movs	r3, #0
 80093da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d017      	beq.n	8009412 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80093e2:	4b13      	ldr	r3, [pc, #76]	; (8009430 <vTaskDelay+0x60>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00a      	beq.n	8009400 <vTaskDelay+0x30>
	__asm volatile
 80093ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ee:	f383 8811 	msr	BASEPRI, r3
 80093f2:	f3bf 8f6f 	isb	sy
 80093f6:	f3bf 8f4f 	dsb	sy
 80093fa:	60bb      	str	r3, [r7, #8]
}
 80093fc:	bf00      	nop
 80093fe:	e7fe      	b.n	80093fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009400:	f000 f87a 	bl	80094f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009404:	2100      	movs	r1, #0
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 fdfe 	bl	800a008 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800940c:	f000 f882 	bl	8009514 <xTaskResumeAll>
 8009410:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d107      	bne.n	8009428 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009418:	4b06      	ldr	r3, [pc, #24]	; (8009434 <vTaskDelay+0x64>)
 800941a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800941e:	601a      	str	r2, [r3, #0]
 8009420:	f3bf 8f4f 	dsb	sy
 8009424:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009428:	bf00      	nop
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	20000870 	.word	0x20000870
 8009434:	e000ed04 	.word	0xe000ed04

08009438 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b08a      	sub	sp, #40	; 0x28
 800943c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800943e:	2300      	movs	r3, #0
 8009440:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009442:	2300      	movs	r3, #0
 8009444:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009446:	463a      	mov	r2, r7
 8009448:	1d39      	adds	r1, r7, #4
 800944a:	f107 0308 	add.w	r3, r7, #8
 800944e:	4618      	mov	r0, r3
 8009450:	f7f8 f886 	bl	8001560 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009454:	6839      	ldr	r1, [r7, #0]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	68ba      	ldr	r2, [r7, #8]
 800945a:	9202      	str	r2, [sp, #8]
 800945c:	9301      	str	r3, [sp, #4]
 800945e:	2300      	movs	r3, #0
 8009460:	9300      	str	r3, [sp, #0]
 8009462:	2300      	movs	r3, #0
 8009464:	460a      	mov	r2, r1
 8009466:	491e      	ldr	r1, [pc, #120]	; (80094e0 <vTaskStartScheduler+0xa8>)
 8009468:	481e      	ldr	r0, [pc, #120]	; (80094e4 <vTaskStartScheduler+0xac>)
 800946a:	f7ff fe27 	bl	80090bc <xTaskCreateStatic>
 800946e:	4603      	mov	r3, r0
 8009470:	4a1d      	ldr	r2, [pc, #116]	; (80094e8 <vTaskStartScheduler+0xb0>)
 8009472:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009474:	4b1c      	ldr	r3, [pc, #112]	; (80094e8 <vTaskStartScheduler+0xb0>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d002      	beq.n	8009482 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800947c:	2301      	movs	r3, #1
 800947e:	617b      	str	r3, [r7, #20]
 8009480:	e001      	b.n	8009486 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009482:	2300      	movs	r3, #0
 8009484:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	2b01      	cmp	r3, #1
 800948a:	d116      	bne.n	80094ba <vTaskStartScheduler+0x82>
	__asm volatile
 800948c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009490:	f383 8811 	msr	BASEPRI, r3
 8009494:	f3bf 8f6f 	isb	sy
 8009498:	f3bf 8f4f 	dsb	sy
 800949c:	613b      	str	r3, [r7, #16]
}
 800949e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80094a0:	4b12      	ldr	r3, [pc, #72]	; (80094ec <vTaskStartScheduler+0xb4>)
 80094a2:	f04f 32ff 	mov.w	r2, #4294967295
 80094a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80094a8:	4b11      	ldr	r3, [pc, #68]	; (80094f0 <vTaskStartScheduler+0xb8>)
 80094aa:	2201      	movs	r2, #1
 80094ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80094ae:	4b11      	ldr	r3, [pc, #68]	; (80094f4 <vTaskStartScheduler+0xbc>)
 80094b0:	2200      	movs	r2, #0
 80094b2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80094b4:	f000 fe9c 	bl	800a1f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80094b8:	e00e      	b.n	80094d8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c0:	d10a      	bne.n	80094d8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80094c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c6:	f383 8811 	msr	BASEPRI, r3
 80094ca:	f3bf 8f6f 	isb	sy
 80094ce:	f3bf 8f4f 	dsb	sy
 80094d2:	60fb      	str	r3, [r7, #12]
}
 80094d4:	bf00      	nop
 80094d6:	e7fe      	b.n	80094d6 <vTaskStartScheduler+0x9e>
}
 80094d8:	bf00      	nop
 80094da:	3718      	adds	r7, #24
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	0800bf2c 	.word	0x0800bf2c
 80094e4:	08009a95 	.word	0x08009a95
 80094e8:	2000086c 	.word	0x2000086c
 80094ec:	20000868 	.word	0x20000868
 80094f0:	20000854 	.word	0x20000854
 80094f4:	2000084c 	.word	0x2000084c

080094f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80094f8:	b480      	push	{r7}
 80094fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80094fc:	4b04      	ldr	r3, [pc, #16]	; (8009510 <vTaskSuspendAll+0x18>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	3301      	adds	r3, #1
 8009502:	4a03      	ldr	r2, [pc, #12]	; (8009510 <vTaskSuspendAll+0x18>)
 8009504:	6013      	str	r3, [r2, #0]
}
 8009506:	bf00      	nop
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr
 8009510:	20000870 	.word	0x20000870

08009514 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800951a:	2300      	movs	r3, #0
 800951c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800951e:	2300      	movs	r3, #0
 8009520:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009522:	4b41      	ldr	r3, [pc, #260]	; (8009628 <xTaskResumeAll+0x114>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d10a      	bne.n	8009540 <xTaskResumeAll+0x2c>
	__asm volatile
 800952a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952e:	f383 8811 	msr	BASEPRI, r3
 8009532:	f3bf 8f6f 	isb	sy
 8009536:	f3bf 8f4f 	dsb	sy
 800953a:	603b      	str	r3, [r7, #0]
}
 800953c:	bf00      	nop
 800953e:	e7fe      	b.n	800953e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009540:	f000 fef8 	bl	800a334 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009544:	4b38      	ldr	r3, [pc, #224]	; (8009628 <xTaskResumeAll+0x114>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	3b01      	subs	r3, #1
 800954a:	4a37      	ldr	r2, [pc, #220]	; (8009628 <xTaskResumeAll+0x114>)
 800954c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800954e:	4b36      	ldr	r3, [pc, #216]	; (8009628 <xTaskResumeAll+0x114>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d161      	bne.n	800961a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009556:	4b35      	ldr	r3, [pc, #212]	; (800962c <xTaskResumeAll+0x118>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d05d      	beq.n	800961a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800955e:	e02e      	b.n	80095be <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009560:	4b33      	ldr	r3, [pc, #204]	; (8009630 <xTaskResumeAll+0x11c>)
 8009562:	68db      	ldr	r3, [r3, #12]
 8009564:	68db      	ldr	r3, [r3, #12]
 8009566:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	3318      	adds	r3, #24
 800956c:	4618      	mov	r0, r3
 800956e:	f7fe ff81 	bl	8008474 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	3304      	adds	r3, #4
 8009576:	4618      	mov	r0, r3
 8009578:	f7fe ff7c 	bl	8008474 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009580:	2201      	movs	r2, #1
 8009582:	409a      	lsls	r2, r3
 8009584:	4b2b      	ldr	r3, [pc, #172]	; (8009634 <xTaskResumeAll+0x120>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4313      	orrs	r3, r2
 800958a:	4a2a      	ldr	r2, [pc, #168]	; (8009634 <xTaskResumeAll+0x120>)
 800958c:	6013      	str	r3, [r2, #0]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009592:	4613      	mov	r3, r2
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	4413      	add	r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	4a27      	ldr	r2, [pc, #156]	; (8009638 <xTaskResumeAll+0x124>)
 800959c:	441a      	add	r2, r3
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	3304      	adds	r3, #4
 80095a2:	4619      	mov	r1, r3
 80095a4:	4610      	mov	r0, r2
 80095a6:	f7fe ff08 	bl	80083ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ae:	4b23      	ldr	r3, [pc, #140]	; (800963c <xTaskResumeAll+0x128>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d302      	bcc.n	80095be <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80095b8:	4b21      	ldr	r3, [pc, #132]	; (8009640 <xTaskResumeAll+0x12c>)
 80095ba:	2201      	movs	r2, #1
 80095bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095be:	4b1c      	ldr	r3, [pc, #112]	; (8009630 <xTaskResumeAll+0x11c>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d1cc      	bne.n	8009560 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d001      	beq.n	80095d0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80095cc:	f000 fb18 	bl	8009c00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80095d0:	4b1c      	ldr	r3, [pc, #112]	; (8009644 <xTaskResumeAll+0x130>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d010      	beq.n	80095fe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80095dc:	f000 f836 	bl	800964c <xTaskIncrementTick>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d002      	beq.n	80095ec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80095e6:	4b16      	ldr	r3, [pc, #88]	; (8009640 <xTaskResumeAll+0x12c>)
 80095e8:	2201      	movs	r2, #1
 80095ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	3b01      	subs	r3, #1
 80095f0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d1f1      	bne.n	80095dc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80095f8:	4b12      	ldr	r3, [pc, #72]	; (8009644 <xTaskResumeAll+0x130>)
 80095fa:	2200      	movs	r2, #0
 80095fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80095fe:	4b10      	ldr	r3, [pc, #64]	; (8009640 <xTaskResumeAll+0x12c>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d009      	beq.n	800961a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009606:	2301      	movs	r3, #1
 8009608:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800960a:	4b0f      	ldr	r3, [pc, #60]	; (8009648 <xTaskResumeAll+0x134>)
 800960c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009610:	601a      	str	r2, [r3, #0]
 8009612:	f3bf 8f4f 	dsb	sy
 8009616:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800961a:	f000 febb 	bl	800a394 <vPortExitCritical>

	return xAlreadyYielded;
 800961e:	68bb      	ldr	r3, [r7, #8]
}
 8009620:	4618      	mov	r0, r3
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}
 8009628:	20000870 	.word	0x20000870
 800962c:	20000848 	.word	0x20000848
 8009630:	20000808 	.word	0x20000808
 8009634:	20000850 	.word	0x20000850
 8009638:	2000074c 	.word	0x2000074c
 800963c:	20000748 	.word	0x20000748
 8009640:	2000085c 	.word	0x2000085c
 8009644:	20000858 	.word	0x20000858
 8009648:	e000ed04 	.word	0xe000ed04

0800964c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b086      	sub	sp, #24
 8009650:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009652:	2300      	movs	r3, #0
 8009654:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009656:	4b51      	ldr	r3, [pc, #324]	; (800979c <xTaskIncrementTick+0x150>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2b00      	cmp	r3, #0
 800965c:	f040 808d 	bne.w	800977a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009660:	4b4f      	ldr	r3, [pc, #316]	; (80097a0 <xTaskIncrementTick+0x154>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	3301      	adds	r3, #1
 8009666:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009668:	4a4d      	ldr	r2, [pc, #308]	; (80097a0 <xTaskIncrementTick+0x154>)
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d120      	bne.n	80096b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009674:	4b4b      	ldr	r3, [pc, #300]	; (80097a4 <xTaskIncrementTick+0x158>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d00a      	beq.n	8009694 <xTaskIncrementTick+0x48>
	__asm volatile
 800967e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009682:	f383 8811 	msr	BASEPRI, r3
 8009686:	f3bf 8f6f 	isb	sy
 800968a:	f3bf 8f4f 	dsb	sy
 800968e:	603b      	str	r3, [r7, #0]
}
 8009690:	bf00      	nop
 8009692:	e7fe      	b.n	8009692 <xTaskIncrementTick+0x46>
 8009694:	4b43      	ldr	r3, [pc, #268]	; (80097a4 <xTaskIncrementTick+0x158>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	60fb      	str	r3, [r7, #12]
 800969a:	4b43      	ldr	r3, [pc, #268]	; (80097a8 <xTaskIncrementTick+0x15c>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a41      	ldr	r2, [pc, #260]	; (80097a4 <xTaskIncrementTick+0x158>)
 80096a0:	6013      	str	r3, [r2, #0]
 80096a2:	4a41      	ldr	r2, [pc, #260]	; (80097a8 <xTaskIncrementTick+0x15c>)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	6013      	str	r3, [r2, #0]
 80096a8:	4b40      	ldr	r3, [pc, #256]	; (80097ac <xTaskIncrementTick+0x160>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	3301      	adds	r3, #1
 80096ae:	4a3f      	ldr	r2, [pc, #252]	; (80097ac <xTaskIncrementTick+0x160>)
 80096b0:	6013      	str	r3, [r2, #0]
 80096b2:	f000 faa5 	bl	8009c00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80096b6:	4b3e      	ldr	r3, [pc, #248]	; (80097b0 <xTaskIncrementTick+0x164>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	693a      	ldr	r2, [r7, #16]
 80096bc:	429a      	cmp	r2, r3
 80096be:	d34d      	bcc.n	800975c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096c0:	4b38      	ldr	r3, [pc, #224]	; (80097a4 <xTaskIncrementTick+0x158>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d101      	bne.n	80096ce <xTaskIncrementTick+0x82>
 80096ca:	2301      	movs	r3, #1
 80096cc:	e000      	b.n	80096d0 <xTaskIncrementTick+0x84>
 80096ce:	2300      	movs	r3, #0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d004      	beq.n	80096de <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096d4:	4b36      	ldr	r3, [pc, #216]	; (80097b0 <xTaskIncrementTick+0x164>)
 80096d6:	f04f 32ff 	mov.w	r2, #4294967295
 80096da:	601a      	str	r2, [r3, #0]
					break;
 80096dc:	e03e      	b.n	800975c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80096de:	4b31      	ldr	r3, [pc, #196]	; (80097a4 <xTaskIncrementTick+0x158>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	68db      	ldr	r3, [r3, #12]
 80096e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80096ee:	693a      	ldr	r2, [r7, #16]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d203      	bcs.n	80096fe <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80096f6:	4a2e      	ldr	r2, [pc, #184]	; (80097b0 <xTaskIncrementTick+0x164>)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6013      	str	r3, [r2, #0]
						break;
 80096fc:	e02e      	b.n	800975c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	3304      	adds	r3, #4
 8009702:	4618      	mov	r0, r3
 8009704:	f7fe feb6 	bl	8008474 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800970c:	2b00      	cmp	r3, #0
 800970e:	d004      	beq.n	800971a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	3318      	adds	r3, #24
 8009714:	4618      	mov	r0, r3
 8009716:	f7fe fead 	bl	8008474 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800971e:	2201      	movs	r2, #1
 8009720:	409a      	lsls	r2, r3
 8009722:	4b24      	ldr	r3, [pc, #144]	; (80097b4 <xTaskIncrementTick+0x168>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4313      	orrs	r3, r2
 8009728:	4a22      	ldr	r2, [pc, #136]	; (80097b4 <xTaskIncrementTick+0x168>)
 800972a:	6013      	str	r3, [r2, #0]
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009730:	4613      	mov	r3, r2
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	4413      	add	r3, r2
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	4a1f      	ldr	r2, [pc, #124]	; (80097b8 <xTaskIncrementTick+0x16c>)
 800973a:	441a      	add	r2, r3
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	3304      	adds	r3, #4
 8009740:	4619      	mov	r1, r3
 8009742:	4610      	mov	r0, r2
 8009744:	f7fe fe39 	bl	80083ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800974c:	4b1b      	ldr	r3, [pc, #108]	; (80097bc <xTaskIncrementTick+0x170>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009752:	429a      	cmp	r2, r3
 8009754:	d3b4      	bcc.n	80096c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009756:	2301      	movs	r3, #1
 8009758:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800975a:	e7b1      	b.n	80096c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800975c:	4b17      	ldr	r3, [pc, #92]	; (80097bc <xTaskIncrementTick+0x170>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009762:	4915      	ldr	r1, [pc, #84]	; (80097b8 <xTaskIncrementTick+0x16c>)
 8009764:	4613      	mov	r3, r2
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	4413      	add	r3, r2
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	440b      	add	r3, r1
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2b01      	cmp	r3, #1
 8009772:	d907      	bls.n	8009784 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8009774:	2301      	movs	r3, #1
 8009776:	617b      	str	r3, [r7, #20]
 8009778:	e004      	b.n	8009784 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800977a:	4b11      	ldr	r3, [pc, #68]	; (80097c0 <xTaskIncrementTick+0x174>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	3301      	adds	r3, #1
 8009780:	4a0f      	ldr	r2, [pc, #60]	; (80097c0 <xTaskIncrementTick+0x174>)
 8009782:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009784:	4b0f      	ldr	r3, [pc, #60]	; (80097c4 <xTaskIncrementTick+0x178>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d001      	beq.n	8009790 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800978c:	2301      	movs	r3, #1
 800978e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009790:	697b      	ldr	r3, [r7, #20]
}
 8009792:	4618      	mov	r0, r3
 8009794:	3718      	adds	r7, #24
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	20000870 	.word	0x20000870
 80097a0:	2000084c 	.word	0x2000084c
 80097a4:	20000800 	.word	0x20000800
 80097a8:	20000804 	.word	0x20000804
 80097ac:	20000860 	.word	0x20000860
 80097b0:	20000868 	.word	0x20000868
 80097b4:	20000850 	.word	0x20000850
 80097b8:	2000074c 	.word	0x2000074c
 80097bc:	20000748 	.word	0x20000748
 80097c0:	20000858 	.word	0x20000858
 80097c4:	2000085c 	.word	0x2000085c

080097c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80097c8:	b480      	push	{r7}
 80097ca:	b087      	sub	sp, #28
 80097cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80097ce:	4b27      	ldr	r3, [pc, #156]	; (800986c <vTaskSwitchContext+0xa4>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d003      	beq.n	80097de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80097d6:	4b26      	ldr	r3, [pc, #152]	; (8009870 <vTaskSwitchContext+0xa8>)
 80097d8:	2201      	movs	r2, #1
 80097da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80097dc:	e03f      	b.n	800985e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80097de:	4b24      	ldr	r3, [pc, #144]	; (8009870 <vTaskSwitchContext+0xa8>)
 80097e0:	2200      	movs	r2, #0
 80097e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80097e4:	4b23      	ldr	r3, [pc, #140]	; (8009874 <vTaskSwitchContext+0xac>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	fab3 f383 	clz	r3, r3
 80097f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80097f2:	7afb      	ldrb	r3, [r7, #11]
 80097f4:	f1c3 031f 	rsb	r3, r3, #31
 80097f8:	617b      	str	r3, [r7, #20]
 80097fa:	491f      	ldr	r1, [pc, #124]	; (8009878 <vTaskSwitchContext+0xb0>)
 80097fc:	697a      	ldr	r2, [r7, #20]
 80097fe:	4613      	mov	r3, r2
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	4413      	add	r3, r2
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	440b      	add	r3, r1
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d10a      	bne.n	8009824 <vTaskSwitchContext+0x5c>
	__asm volatile
 800980e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009812:	f383 8811 	msr	BASEPRI, r3
 8009816:	f3bf 8f6f 	isb	sy
 800981a:	f3bf 8f4f 	dsb	sy
 800981e:	607b      	str	r3, [r7, #4]
}
 8009820:	bf00      	nop
 8009822:	e7fe      	b.n	8009822 <vTaskSwitchContext+0x5a>
 8009824:	697a      	ldr	r2, [r7, #20]
 8009826:	4613      	mov	r3, r2
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	4413      	add	r3, r2
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	4a12      	ldr	r2, [pc, #72]	; (8009878 <vTaskSwitchContext+0xb0>)
 8009830:	4413      	add	r3, r2
 8009832:	613b      	str	r3, [r7, #16]
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	685a      	ldr	r2, [r3, #4]
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	605a      	str	r2, [r3, #4]
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	685a      	ldr	r2, [r3, #4]
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	3308      	adds	r3, #8
 8009846:	429a      	cmp	r2, r3
 8009848:	d104      	bne.n	8009854 <vTaskSwitchContext+0x8c>
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	685a      	ldr	r2, [r3, #4]
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	605a      	str	r2, [r3, #4]
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	4a08      	ldr	r2, [pc, #32]	; (800987c <vTaskSwitchContext+0xb4>)
 800985c:	6013      	str	r3, [r2, #0]
}
 800985e:	bf00      	nop
 8009860:	371c      	adds	r7, #28
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	20000870 	.word	0x20000870
 8009870:	2000085c 	.word	0x2000085c
 8009874:	20000850 	.word	0x20000850
 8009878:	2000074c 	.word	0x2000074c
 800987c:	20000748 	.word	0x20000748

08009880 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d10a      	bne.n	80098a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009894:	f383 8811 	msr	BASEPRI, r3
 8009898:	f3bf 8f6f 	isb	sy
 800989c:	f3bf 8f4f 	dsb	sy
 80098a0:	60fb      	str	r3, [r7, #12]
}
 80098a2:	bf00      	nop
 80098a4:	e7fe      	b.n	80098a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80098a6:	4b07      	ldr	r3, [pc, #28]	; (80098c4 <vTaskPlaceOnEventList+0x44>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	3318      	adds	r3, #24
 80098ac:	4619      	mov	r1, r3
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f7fe fda7 	bl	8008402 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80098b4:	2101      	movs	r1, #1
 80098b6:	6838      	ldr	r0, [r7, #0]
 80098b8:	f000 fba6 	bl	800a008 <prvAddCurrentTaskToDelayedList>
}
 80098bc:	bf00      	nop
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	20000748 	.word	0x20000748

080098c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b086      	sub	sp, #24
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d10a      	bne.n	80098f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80098de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e2:	f383 8811 	msr	BASEPRI, r3
 80098e6:	f3bf 8f6f 	isb	sy
 80098ea:	f3bf 8f4f 	dsb	sy
 80098ee:	60fb      	str	r3, [r7, #12]
}
 80098f0:	bf00      	nop
 80098f2:	e7fe      	b.n	80098f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	3318      	adds	r3, #24
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7fe fdbb 	bl	8008474 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098fe:	4b1d      	ldr	r3, [pc, #116]	; (8009974 <xTaskRemoveFromEventList+0xac>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d11c      	bne.n	8009940 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009906:	693b      	ldr	r3, [r7, #16]
 8009908:	3304      	adds	r3, #4
 800990a:	4618      	mov	r0, r3
 800990c:	f7fe fdb2 	bl	8008474 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009914:	2201      	movs	r2, #1
 8009916:	409a      	lsls	r2, r3
 8009918:	4b17      	ldr	r3, [pc, #92]	; (8009978 <xTaskRemoveFromEventList+0xb0>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4313      	orrs	r3, r2
 800991e:	4a16      	ldr	r2, [pc, #88]	; (8009978 <xTaskRemoveFromEventList+0xb0>)
 8009920:	6013      	str	r3, [r2, #0]
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009926:	4613      	mov	r3, r2
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	4413      	add	r3, r2
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	4a13      	ldr	r2, [pc, #76]	; (800997c <xTaskRemoveFromEventList+0xb4>)
 8009930:	441a      	add	r2, r3
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	3304      	adds	r3, #4
 8009936:	4619      	mov	r1, r3
 8009938:	4610      	mov	r0, r2
 800993a:	f7fe fd3e 	bl	80083ba <vListInsertEnd>
 800993e:	e005      	b.n	800994c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	3318      	adds	r3, #24
 8009944:	4619      	mov	r1, r3
 8009946:	480e      	ldr	r0, [pc, #56]	; (8009980 <xTaskRemoveFromEventList+0xb8>)
 8009948:	f7fe fd37 	bl	80083ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009950:	4b0c      	ldr	r3, [pc, #48]	; (8009984 <xTaskRemoveFromEventList+0xbc>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009956:	429a      	cmp	r2, r3
 8009958:	d905      	bls.n	8009966 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800995a:	2301      	movs	r3, #1
 800995c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800995e:	4b0a      	ldr	r3, [pc, #40]	; (8009988 <xTaskRemoveFromEventList+0xc0>)
 8009960:	2201      	movs	r2, #1
 8009962:	601a      	str	r2, [r3, #0]
 8009964:	e001      	b.n	800996a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009966:	2300      	movs	r3, #0
 8009968:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800996a:	697b      	ldr	r3, [r7, #20]
}
 800996c:	4618      	mov	r0, r3
 800996e:	3718      	adds	r7, #24
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	20000870 	.word	0x20000870
 8009978:	20000850 	.word	0x20000850
 800997c:	2000074c 	.word	0x2000074c
 8009980:	20000808 	.word	0x20000808
 8009984:	20000748 	.word	0x20000748
 8009988:	2000085c 	.word	0x2000085c

0800998c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009994:	4b06      	ldr	r3, [pc, #24]	; (80099b0 <vTaskInternalSetTimeOutState+0x24>)
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800999c:	4b05      	ldr	r3, [pc, #20]	; (80099b4 <vTaskInternalSetTimeOutState+0x28>)
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	605a      	str	r2, [r3, #4]
}
 80099a4:	bf00      	nop
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr
 80099b0:	20000860 	.word	0x20000860
 80099b4:	2000084c 	.word	0x2000084c

080099b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b088      	sub	sp, #32
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d10a      	bne.n	80099de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80099c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099cc:	f383 8811 	msr	BASEPRI, r3
 80099d0:	f3bf 8f6f 	isb	sy
 80099d4:	f3bf 8f4f 	dsb	sy
 80099d8:	613b      	str	r3, [r7, #16]
}
 80099da:	bf00      	nop
 80099dc:	e7fe      	b.n	80099dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d10a      	bne.n	80099fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80099e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e8:	f383 8811 	msr	BASEPRI, r3
 80099ec:	f3bf 8f6f 	isb	sy
 80099f0:	f3bf 8f4f 	dsb	sy
 80099f4:	60fb      	str	r3, [r7, #12]
}
 80099f6:	bf00      	nop
 80099f8:	e7fe      	b.n	80099f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80099fa:	f000 fc9b 	bl	800a334 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80099fe:	4b1d      	ldr	r3, [pc, #116]	; (8009a74 <xTaskCheckForTimeOut+0xbc>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	69ba      	ldr	r2, [r7, #24]
 8009a0a:	1ad3      	subs	r3, r2, r3
 8009a0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a16:	d102      	bne.n	8009a1e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	61fb      	str	r3, [r7, #28]
 8009a1c:	e023      	b.n	8009a66 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	4b15      	ldr	r3, [pc, #84]	; (8009a78 <xTaskCheckForTimeOut+0xc0>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d007      	beq.n	8009a3a <xTaskCheckForTimeOut+0x82>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	69ba      	ldr	r2, [r7, #24]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d302      	bcc.n	8009a3a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009a34:	2301      	movs	r3, #1
 8009a36:	61fb      	str	r3, [r7, #28]
 8009a38:	e015      	b.n	8009a66 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	697a      	ldr	r2, [r7, #20]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d20b      	bcs.n	8009a5c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	1ad2      	subs	r2, r2, r3
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f7ff ff9b 	bl	800998c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009a56:	2300      	movs	r3, #0
 8009a58:	61fb      	str	r3, [r7, #28]
 8009a5a:	e004      	b.n	8009a66 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009a62:	2301      	movs	r3, #1
 8009a64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009a66:	f000 fc95 	bl	800a394 <vPortExitCritical>

	return xReturn;
 8009a6a:	69fb      	ldr	r3, [r7, #28]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3720      	adds	r7, #32
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	2000084c 	.word	0x2000084c
 8009a78:	20000860 	.word	0x20000860

08009a7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009a80:	4b03      	ldr	r3, [pc, #12]	; (8009a90 <vTaskMissedYield+0x14>)
 8009a82:	2201      	movs	r2, #1
 8009a84:	601a      	str	r2, [r3, #0]
}
 8009a86:	bf00      	nop
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr
 8009a90:	2000085c 	.word	0x2000085c

08009a94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009a9c:	f000 f852 	bl	8009b44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009aa0:	4b06      	ldr	r3, [pc, #24]	; (8009abc <prvIdleTask+0x28>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d9f9      	bls.n	8009a9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009aa8:	4b05      	ldr	r3, [pc, #20]	; (8009ac0 <prvIdleTask+0x2c>)
 8009aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aae:	601a      	str	r2, [r3, #0]
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009ab8:	e7f0      	b.n	8009a9c <prvIdleTask+0x8>
 8009aba:	bf00      	nop
 8009abc:	2000074c 	.word	0x2000074c
 8009ac0:	e000ed04 	.word	0xe000ed04

08009ac4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009aca:	2300      	movs	r3, #0
 8009acc:	607b      	str	r3, [r7, #4]
 8009ace:	e00c      	b.n	8009aea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	4413      	add	r3, r2
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	4a12      	ldr	r2, [pc, #72]	; (8009b24 <prvInitialiseTaskLists+0x60>)
 8009adc:	4413      	add	r3, r2
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7fe fc3e 	bl	8008360 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	607b      	str	r3, [r7, #4]
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2b06      	cmp	r3, #6
 8009aee:	d9ef      	bls.n	8009ad0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009af0:	480d      	ldr	r0, [pc, #52]	; (8009b28 <prvInitialiseTaskLists+0x64>)
 8009af2:	f7fe fc35 	bl	8008360 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009af6:	480d      	ldr	r0, [pc, #52]	; (8009b2c <prvInitialiseTaskLists+0x68>)
 8009af8:	f7fe fc32 	bl	8008360 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009afc:	480c      	ldr	r0, [pc, #48]	; (8009b30 <prvInitialiseTaskLists+0x6c>)
 8009afe:	f7fe fc2f 	bl	8008360 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009b02:	480c      	ldr	r0, [pc, #48]	; (8009b34 <prvInitialiseTaskLists+0x70>)
 8009b04:	f7fe fc2c 	bl	8008360 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009b08:	480b      	ldr	r0, [pc, #44]	; (8009b38 <prvInitialiseTaskLists+0x74>)
 8009b0a:	f7fe fc29 	bl	8008360 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009b0e:	4b0b      	ldr	r3, [pc, #44]	; (8009b3c <prvInitialiseTaskLists+0x78>)
 8009b10:	4a05      	ldr	r2, [pc, #20]	; (8009b28 <prvInitialiseTaskLists+0x64>)
 8009b12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009b14:	4b0a      	ldr	r3, [pc, #40]	; (8009b40 <prvInitialiseTaskLists+0x7c>)
 8009b16:	4a05      	ldr	r2, [pc, #20]	; (8009b2c <prvInitialiseTaskLists+0x68>)
 8009b18:	601a      	str	r2, [r3, #0]
}
 8009b1a:	bf00      	nop
 8009b1c:	3708      	adds	r7, #8
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	2000074c 	.word	0x2000074c
 8009b28:	200007d8 	.word	0x200007d8
 8009b2c:	200007ec 	.word	0x200007ec
 8009b30:	20000808 	.word	0x20000808
 8009b34:	2000081c 	.word	0x2000081c
 8009b38:	20000834 	.word	0x20000834
 8009b3c:	20000800 	.word	0x20000800
 8009b40:	20000804 	.word	0x20000804

08009b44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b4a:	e019      	b.n	8009b80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009b4c:	f000 fbf2 	bl	800a334 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009b50:	4b10      	ldr	r3, [pc, #64]	; (8009b94 <prvCheckTasksWaitingTermination+0x50>)
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	3304      	adds	r3, #4
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f7fe fc89 	bl	8008474 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009b62:	4b0d      	ldr	r3, [pc, #52]	; (8009b98 <prvCheckTasksWaitingTermination+0x54>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	3b01      	subs	r3, #1
 8009b68:	4a0b      	ldr	r2, [pc, #44]	; (8009b98 <prvCheckTasksWaitingTermination+0x54>)
 8009b6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009b6c:	4b0b      	ldr	r3, [pc, #44]	; (8009b9c <prvCheckTasksWaitingTermination+0x58>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	3b01      	subs	r3, #1
 8009b72:	4a0a      	ldr	r2, [pc, #40]	; (8009b9c <prvCheckTasksWaitingTermination+0x58>)
 8009b74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009b76:	f000 fc0d 	bl	800a394 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 f810 	bl	8009ba0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b80:	4b06      	ldr	r3, [pc, #24]	; (8009b9c <prvCheckTasksWaitingTermination+0x58>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d1e1      	bne.n	8009b4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009b88:	bf00      	nop
 8009b8a:	bf00      	nop
 8009b8c:	3708      	adds	r7, #8
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	2000081c 	.word	0x2000081c
 8009b98:	20000848 	.word	0x20000848
 8009b9c:	20000830 	.word	0x20000830

08009ba0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d108      	bne.n	8009bc4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f000 fda2 	bl	800a700 <vPortFree>
				vPortFree( pxTCB );
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 fd9f 	bl	800a700 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009bc2:	e018      	b.n	8009bf6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d103      	bne.n	8009bd6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 fd96 	bl	800a700 <vPortFree>
	}
 8009bd4:	e00f      	b.n	8009bf6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009bdc:	2b02      	cmp	r3, #2
 8009bde:	d00a      	beq.n	8009bf6 <prvDeleteTCB+0x56>
	__asm volatile
 8009be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be4:	f383 8811 	msr	BASEPRI, r3
 8009be8:	f3bf 8f6f 	isb	sy
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	60fb      	str	r3, [r7, #12]
}
 8009bf2:	bf00      	nop
 8009bf4:	e7fe      	b.n	8009bf4 <prvDeleteTCB+0x54>
	}
 8009bf6:	bf00      	nop
 8009bf8:	3710      	adds	r7, #16
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
	...

08009c00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009c00:	b480      	push	{r7}
 8009c02:	b083      	sub	sp, #12
 8009c04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c06:	4b0f      	ldr	r3, [pc, #60]	; (8009c44 <prvResetNextTaskUnblockTime+0x44>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d101      	bne.n	8009c14 <prvResetNextTaskUnblockTime+0x14>
 8009c10:	2301      	movs	r3, #1
 8009c12:	e000      	b.n	8009c16 <prvResetNextTaskUnblockTime+0x16>
 8009c14:	2300      	movs	r3, #0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d004      	beq.n	8009c24 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c1a:	4b0b      	ldr	r3, [pc, #44]	; (8009c48 <prvResetNextTaskUnblockTime+0x48>)
 8009c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c20:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009c22:	e008      	b.n	8009c36 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009c24:	4b07      	ldr	r3, [pc, #28]	; (8009c44 <prvResetNextTaskUnblockTime+0x44>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	4a05      	ldr	r2, [pc, #20]	; (8009c48 <prvResetNextTaskUnblockTime+0x48>)
 8009c34:	6013      	str	r3, [r2, #0]
}
 8009c36:	bf00      	nop
 8009c38:	370c      	adds	r7, #12
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	20000800 	.word	0x20000800
 8009c48:	20000868 	.word	0x20000868

08009c4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009c52:	4b0b      	ldr	r3, [pc, #44]	; (8009c80 <xTaskGetSchedulerState+0x34>)
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d102      	bne.n	8009c60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	607b      	str	r3, [r7, #4]
 8009c5e:	e008      	b.n	8009c72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c60:	4b08      	ldr	r3, [pc, #32]	; (8009c84 <xTaskGetSchedulerState+0x38>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d102      	bne.n	8009c6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009c68:	2302      	movs	r3, #2
 8009c6a:	607b      	str	r3, [r7, #4]
 8009c6c:	e001      	b.n	8009c72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009c72:	687b      	ldr	r3, [r7, #4]
	}
 8009c74:	4618      	mov	r0, r3
 8009c76:	370c      	adds	r7, #12
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr
 8009c80:	20000854 	.word	0x20000854
 8009c84:	20000870 	.word	0x20000870

08009c88 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009c94:	2300      	movs	r3, #0
 8009c96:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d06e      	beq.n	8009d7c <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ca2:	4b39      	ldr	r3, [pc, #228]	; (8009d88 <xTaskPriorityInherit+0x100>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d25e      	bcs.n	8009d6a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	699b      	ldr	r3, [r3, #24]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	db06      	blt.n	8009cc2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cb4:	4b34      	ldr	r3, [pc, #208]	; (8009d88 <xTaskPriorityInherit+0x100>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cba:	f1c3 0207 	rsb	r2, r3, #7
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	6959      	ldr	r1, [r3, #20]
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cca:	4613      	mov	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	4a2e      	ldr	r2, [pc, #184]	; (8009d8c <xTaskPriorityInherit+0x104>)
 8009cd4:	4413      	add	r3, r2
 8009cd6:	4299      	cmp	r1, r3
 8009cd8:	d101      	bne.n	8009cde <xTaskPriorityInherit+0x56>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e000      	b.n	8009ce0 <xTaskPriorityInherit+0x58>
 8009cde:	2300      	movs	r3, #0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d03a      	beq.n	8009d5a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	3304      	adds	r3, #4
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f7fe fbc3 	bl	8008474 <uxListRemove>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d115      	bne.n	8009d20 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cf8:	4924      	ldr	r1, [pc, #144]	; (8009d8c <xTaskPriorityInherit+0x104>)
 8009cfa:	4613      	mov	r3, r2
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	4413      	add	r3, r2
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	440b      	add	r3, r1
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d10a      	bne.n	8009d20 <xTaskPriorityInherit+0x98>
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d0e:	2201      	movs	r2, #1
 8009d10:	fa02 f303 	lsl.w	r3, r2, r3
 8009d14:	43da      	mvns	r2, r3
 8009d16:	4b1e      	ldr	r3, [pc, #120]	; (8009d90 <xTaskPriorityInherit+0x108>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4013      	ands	r3, r2
 8009d1c:	4a1c      	ldr	r2, [pc, #112]	; (8009d90 <xTaskPriorityInherit+0x108>)
 8009d1e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009d20:	4b19      	ldr	r3, [pc, #100]	; (8009d88 <xTaskPriorityInherit+0x100>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009d2a:	68bb      	ldr	r3, [r7, #8]
 8009d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d2e:	2201      	movs	r2, #1
 8009d30:	409a      	lsls	r2, r3
 8009d32:	4b17      	ldr	r3, [pc, #92]	; (8009d90 <xTaskPriorityInherit+0x108>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4313      	orrs	r3, r2
 8009d38:	4a15      	ldr	r2, [pc, #84]	; (8009d90 <xTaskPriorityInherit+0x108>)
 8009d3a:	6013      	str	r3, [r2, #0]
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d40:	4613      	mov	r3, r2
 8009d42:	009b      	lsls	r3, r3, #2
 8009d44:	4413      	add	r3, r2
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	4a10      	ldr	r2, [pc, #64]	; (8009d8c <xTaskPriorityInherit+0x104>)
 8009d4a:	441a      	add	r2, r3
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	3304      	adds	r3, #4
 8009d50:	4619      	mov	r1, r3
 8009d52:	4610      	mov	r0, r2
 8009d54:	f7fe fb31 	bl	80083ba <vListInsertEnd>
 8009d58:	e004      	b.n	8009d64 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009d5a:	4b0b      	ldr	r3, [pc, #44]	; (8009d88 <xTaskPriorityInherit+0x100>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009d64:	2301      	movs	r3, #1
 8009d66:	60fb      	str	r3, [r7, #12]
 8009d68:	e008      	b.n	8009d7c <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d6e:	4b06      	ldr	r3, [pc, #24]	; (8009d88 <xTaskPriorityInherit+0x100>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d201      	bcs.n	8009d7c <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009d78:	2301      	movs	r3, #1
 8009d7a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
	}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	20000748 	.word	0x20000748
 8009d8c:	2000074c 	.word	0x2000074c
 8009d90:	20000850 	.word	0x20000850

08009d94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b086      	sub	sp, #24
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009da0:	2300      	movs	r3, #0
 8009da2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d06e      	beq.n	8009e88 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009daa:	4b3a      	ldr	r3, [pc, #232]	; (8009e94 <xTaskPriorityDisinherit+0x100>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	693a      	ldr	r2, [r7, #16]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d00a      	beq.n	8009dca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db8:	f383 8811 	msr	BASEPRI, r3
 8009dbc:	f3bf 8f6f 	isb	sy
 8009dc0:	f3bf 8f4f 	dsb	sy
 8009dc4:	60fb      	str	r3, [r7, #12]
}
 8009dc6:	bf00      	nop
 8009dc8:	e7fe      	b.n	8009dc8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d10a      	bne.n	8009de8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd6:	f383 8811 	msr	BASEPRI, r3
 8009dda:	f3bf 8f6f 	isb	sy
 8009dde:	f3bf 8f4f 	dsb	sy
 8009de2:	60bb      	str	r3, [r7, #8]
}
 8009de4:	bf00      	nop
 8009de6:	e7fe      	b.n	8009de6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dec:	1e5a      	subs	r2, r3, #1
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d044      	beq.n	8009e88 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d140      	bne.n	8009e88 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	3304      	adds	r3, #4
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7fe fb32 	bl	8008474 <uxListRemove>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d115      	bne.n	8009e42 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e1a:	491f      	ldr	r1, [pc, #124]	; (8009e98 <xTaskPriorityDisinherit+0x104>)
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	4413      	add	r3, r2
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	440b      	add	r3, r1
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d10a      	bne.n	8009e42 <xTaskPriorityDisinherit+0xae>
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e30:	2201      	movs	r2, #1
 8009e32:	fa02 f303 	lsl.w	r3, r2, r3
 8009e36:	43da      	mvns	r2, r3
 8009e38:	4b18      	ldr	r3, [pc, #96]	; (8009e9c <xTaskPriorityDisinherit+0x108>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4013      	ands	r3, r2
 8009e3e:	4a17      	ldr	r2, [pc, #92]	; (8009e9c <xTaskPriorityDisinherit+0x108>)
 8009e40:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e4e:	f1c3 0207 	rsb	r2, r3, #7
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	409a      	lsls	r2, r3
 8009e5e:	4b0f      	ldr	r3, [pc, #60]	; (8009e9c <xTaskPriorityDisinherit+0x108>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4313      	orrs	r3, r2
 8009e64:	4a0d      	ldr	r2, [pc, #52]	; (8009e9c <xTaskPriorityDisinherit+0x108>)
 8009e66:	6013      	str	r3, [r2, #0]
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e6c:	4613      	mov	r3, r2
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	4413      	add	r3, r2
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	4a08      	ldr	r2, [pc, #32]	; (8009e98 <xTaskPriorityDisinherit+0x104>)
 8009e76:	441a      	add	r2, r3
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	3304      	adds	r3, #4
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	4610      	mov	r0, r2
 8009e80:	f7fe fa9b 	bl	80083ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009e84:	2301      	movs	r3, #1
 8009e86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009e88:	697b      	ldr	r3, [r7, #20]
	}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3718      	adds	r7, #24
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	20000748 	.word	0x20000748
 8009e98:	2000074c 	.word	0x2000074c
 8009e9c:	20000850 	.word	0x20000850

08009ea0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b088      	sub	sp, #32
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f000 8088 	beq.w	8009fca <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009eba:	69bb      	ldr	r3, [r7, #24]
 8009ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d10a      	bne.n	8009ed8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec6:	f383 8811 	msr	BASEPRI, r3
 8009eca:	f3bf 8f6f 	isb	sy
 8009ece:	f3bf 8f4f 	dsb	sy
 8009ed2:	60fb      	str	r3, [r7, #12]
}
 8009ed4:	bf00      	nop
 8009ed6:	e7fe      	b.n	8009ed6 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009ed8:	69bb      	ldr	r3, [r7, #24]
 8009eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009edc:	683a      	ldr	r2, [r7, #0]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d902      	bls.n	8009ee8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	61fb      	str	r3, [r7, #28]
 8009ee6:	e002      	b.n	8009eee <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009ee8:	69bb      	ldr	r3, [r7, #24]
 8009eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eec:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009eee:	69bb      	ldr	r3, [r7, #24]
 8009ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef2:	69fa      	ldr	r2, [r7, #28]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d068      	beq.n	8009fca <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009ef8:	69bb      	ldr	r3, [r7, #24]
 8009efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009efc:	697a      	ldr	r2, [r7, #20]
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d163      	bne.n	8009fca <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009f02:	4b34      	ldr	r3, [pc, #208]	; (8009fd4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	69ba      	ldr	r2, [r7, #24]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d10a      	bne.n	8009f22 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8009f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f10:	f383 8811 	msr	BASEPRI, r3
 8009f14:	f3bf 8f6f 	isb	sy
 8009f18:	f3bf 8f4f 	dsb	sy
 8009f1c:	60bb      	str	r3, [r7, #8]
}
 8009f1e:	bf00      	nop
 8009f20:	e7fe      	b.n	8009f20 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009f22:	69bb      	ldr	r3, [r7, #24]
 8009f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f26:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009f28:	69bb      	ldr	r3, [r7, #24]
 8009f2a:	69fa      	ldr	r2, [r7, #28]
 8009f2c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009f2e:	69bb      	ldr	r3, [r7, #24]
 8009f30:	699b      	ldr	r3, [r3, #24]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	db04      	blt.n	8009f40 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f36:	69fb      	ldr	r3, [r7, #28]
 8009f38:	f1c3 0207 	rsb	r2, r3, #7
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	6959      	ldr	r1, [r3, #20]
 8009f44:	693a      	ldr	r2, [r7, #16]
 8009f46:	4613      	mov	r3, r2
 8009f48:	009b      	lsls	r3, r3, #2
 8009f4a:	4413      	add	r3, r2
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	4a22      	ldr	r2, [pc, #136]	; (8009fd8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009f50:	4413      	add	r3, r2
 8009f52:	4299      	cmp	r1, r3
 8009f54:	d101      	bne.n	8009f5a <vTaskPriorityDisinheritAfterTimeout+0xba>
 8009f56:	2301      	movs	r3, #1
 8009f58:	e000      	b.n	8009f5c <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d034      	beq.n	8009fca <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f60:	69bb      	ldr	r3, [r7, #24]
 8009f62:	3304      	adds	r3, #4
 8009f64:	4618      	mov	r0, r3
 8009f66:	f7fe fa85 	bl	8008474 <uxListRemove>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d115      	bne.n	8009f9c <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f74:	4918      	ldr	r1, [pc, #96]	; (8009fd8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009f76:	4613      	mov	r3, r2
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	4413      	add	r3, r2
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	440b      	add	r3, r1
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d10a      	bne.n	8009f9c <vTaskPriorityDisinheritAfterTimeout+0xfc>
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8009f90:	43da      	mvns	r2, r3
 8009f92:	4b12      	ldr	r3, [pc, #72]	; (8009fdc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4013      	ands	r3, r2
 8009f98:	4a10      	ldr	r2, [pc, #64]	; (8009fdc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009f9a:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009f9c:	69bb      	ldr	r3, [r7, #24]
 8009f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	409a      	lsls	r2, r3
 8009fa4:	4b0d      	ldr	r3, [pc, #52]	; (8009fdc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	4a0c      	ldr	r2, [pc, #48]	; (8009fdc <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8009fac:	6013      	str	r3, [r2, #0]
 8009fae:	69bb      	ldr	r3, [r7, #24]
 8009fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fb2:	4613      	mov	r3, r2
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	4413      	add	r3, r2
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	4a07      	ldr	r2, [pc, #28]	; (8009fd8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009fbc:	441a      	add	r2, r3
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	3304      	adds	r3, #4
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	4610      	mov	r0, r2
 8009fc6:	f7fe f9f8 	bl	80083ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009fca:	bf00      	nop
 8009fcc:	3720      	adds	r7, #32
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	20000748 	.word	0x20000748
 8009fd8:	2000074c 	.word	0x2000074c
 8009fdc:	20000850 	.word	0x20000850

08009fe0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8009fe0:	b480      	push	{r7}
 8009fe2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009fe4:	4b07      	ldr	r3, [pc, #28]	; (800a004 <pvTaskIncrementMutexHeldCount+0x24>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d004      	beq.n	8009ff6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009fec:	4b05      	ldr	r3, [pc, #20]	; (800a004 <pvTaskIncrementMutexHeldCount+0x24>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ff2:	3201      	adds	r2, #1
 8009ff4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009ff6:	4b03      	ldr	r3, [pc, #12]	; (800a004 <pvTaskIncrementMutexHeldCount+0x24>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
	}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr
 800a004:	20000748 	.word	0x20000748

0800a008 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a012:	4b29      	ldr	r3, [pc, #164]	; (800a0b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a018:	4b28      	ldr	r3, [pc, #160]	; (800a0bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	3304      	adds	r3, #4
 800a01e:	4618      	mov	r0, r3
 800a020:	f7fe fa28 	bl	8008474 <uxListRemove>
 800a024:	4603      	mov	r3, r0
 800a026:	2b00      	cmp	r3, #0
 800a028:	d10b      	bne.n	800a042 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800a02a:	4b24      	ldr	r3, [pc, #144]	; (800a0bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a030:	2201      	movs	r2, #1
 800a032:	fa02 f303 	lsl.w	r3, r2, r3
 800a036:	43da      	mvns	r2, r3
 800a038:	4b21      	ldr	r3, [pc, #132]	; (800a0c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4013      	ands	r3, r2
 800a03e:	4a20      	ldr	r2, [pc, #128]	; (800a0c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a040:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a048:	d10a      	bne.n	800a060 <prvAddCurrentTaskToDelayedList+0x58>
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d007      	beq.n	800a060 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a050:	4b1a      	ldr	r3, [pc, #104]	; (800a0bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	3304      	adds	r3, #4
 800a056:	4619      	mov	r1, r3
 800a058:	481a      	ldr	r0, [pc, #104]	; (800a0c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a05a:	f7fe f9ae 	bl	80083ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a05e:	e026      	b.n	800a0ae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a060:	68fa      	ldr	r2, [r7, #12]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	4413      	add	r3, r2
 800a066:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a068:	4b14      	ldr	r3, [pc, #80]	; (800a0bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	68ba      	ldr	r2, [r7, #8]
 800a06e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a070:	68ba      	ldr	r2, [r7, #8]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	429a      	cmp	r2, r3
 800a076:	d209      	bcs.n	800a08c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a078:	4b13      	ldr	r3, [pc, #76]	; (800a0c8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	4b0f      	ldr	r3, [pc, #60]	; (800a0bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	3304      	adds	r3, #4
 800a082:	4619      	mov	r1, r3
 800a084:	4610      	mov	r0, r2
 800a086:	f7fe f9bc 	bl	8008402 <vListInsert>
}
 800a08a:	e010      	b.n	800a0ae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a08c:	4b0f      	ldr	r3, [pc, #60]	; (800a0cc <prvAddCurrentTaskToDelayedList+0xc4>)
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	4b0a      	ldr	r3, [pc, #40]	; (800a0bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	3304      	adds	r3, #4
 800a096:	4619      	mov	r1, r3
 800a098:	4610      	mov	r0, r2
 800a09a:	f7fe f9b2 	bl	8008402 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a09e:	4b0c      	ldr	r3, [pc, #48]	; (800a0d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	68ba      	ldr	r2, [r7, #8]
 800a0a4:	429a      	cmp	r2, r3
 800a0a6:	d202      	bcs.n	800a0ae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a0a8:	4a09      	ldr	r2, [pc, #36]	; (800a0d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	6013      	str	r3, [r2, #0]
}
 800a0ae:	bf00      	nop
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	2000084c 	.word	0x2000084c
 800a0bc:	20000748 	.word	0x20000748
 800a0c0:	20000850 	.word	0x20000850
 800a0c4:	20000834 	.word	0x20000834
 800a0c8:	20000804 	.word	0x20000804
 800a0cc:	20000800 	.word	0x20000800
 800a0d0:	20000868 	.word	0x20000868

0800a0d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b085      	sub	sp, #20
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	3b04      	subs	r3, #4
 800a0e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a0ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	3b04      	subs	r3, #4
 800a0f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	f023 0201 	bic.w	r2, r3, #1
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	3b04      	subs	r3, #4
 800a102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a104:	4a0c      	ldr	r2, [pc, #48]	; (800a138 <pxPortInitialiseStack+0x64>)
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	3b14      	subs	r3, #20
 800a10e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	3b04      	subs	r3, #4
 800a11a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f06f 0202 	mvn.w	r2, #2
 800a122:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	3b20      	subs	r3, #32
 800a128:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a12a:	68fb      	ldr	r3, [r7, #12]
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3714      	adds	r7, #20
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr
 800a138:	0800a13d 	.word	0x0800a13d

0800a13c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a13c:	b480      	push	{r7}
 800a13e:	b085      	sub	sp, #20
 800a140:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a142:	2300      	movs	r3, #0
 800a144:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a146:	4b12      	ldr	r3, [pc, #72]	; (800a190 <prvTaskExitError+0x54>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a14e:	d00a      	beq.n	800a166 <prvTaskExitError+0x2a>
	__asm volatile
 800a150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a154:	f383 8811 	msr	BASEPRI, r3
 800a158:	f3bf 8f6f 	isb	sy
 800a15c:	f3bf 8f4f 	dsb	sy
 800a160:	60fb      	str	r3, [r7, #12]
}
 800a162:	bf00      	nop
 800a164:	e7fe      	b.n	800a164 <prvTaskExitError+0x28>
	__asm volatile
 800a166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16a:	f383 8811 	msr	BASEPRI, r3
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	f3bf 8f4f 	dsb	sy
 800a176:	60bb      	str	r3, [r7, #8]
}
 800a178:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a17a:	bf00      	nop
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d0fc      	beq.n	800a17c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a182:	bf00      	nop
 800a184:	bf00      	nop
 800a186:	3714      	adds	r7, #20
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr
 800a190:	20000018 	.word	0x20000018
	...

0800a1a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a1a0:	4b07      	ldr	r3, [pc, #28]	; (800a1c0 <pxCurrentTCBConst2>)
 800a1a2:	6819      	ldr	r1, [r3, #0]
 800a1a4:	6808      	ldr	r0, [r1, #0]
 800a1a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1aa:	f380 8809 	msr	PSP, r0
 800a1ae:	f3bf 8f6f 	isb	sy
 800a1b2:	f04f 0000 	mov.w	r0, #0
 800a1b6:	f380 8811 	msr	BASEPRI, r0
 800a1ba:	4770      	bx	lr
 800a1bc:	f3af 8000 	nop.w

0800a1c0 <pxCurrentTCBConst2>:
 800a1c0:	20000748 	.word	0x20000748
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a1c4:	bf00      	nop
 800a1c6:	bf00      	nop

0800a1c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a1c8:	4808      	ldr	r0, [pc, #32]	; (800a1ec <prvPortStartFirstTask+0x24>)
 800a1ca:	6800      	ldr	r0, [r0, #0]
 800a1cc:	6800      	ldr	r0, [r0, #0]
 800a1ce:	f380 8808 	msr	MSP, r0
 800a1d2:	f04f 0000 	mov.w	r0, #0
 800a1d6:	f380 8814 	msr	CONTROL, r0
 800a1da:	b662      	cpsie	i
 800a1dc:	b661      	cpsie	f
 800a1de:	f3bf 8f4f 	dsb	sy
 800a1e2:	f3bf 8f6f 	isb	sy
 800a1e6:	df00      	svc	0
 800a1e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a1ea:	bf00      	nop
 800a1ec:	e000ed08 	.word	0xe000ed08

0800a1f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b086      	sub	sp, #24
 800a1f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a1f6:	4b46      	ldr	r3, [pc, #280]	; (800a310 <xPortStartScheduler+0x120>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a46      	ldr	r2, [pc, #280]	; (800a314 <xPortStartScheduler+0x124>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d10a      	bne.n	800a216 <xPortStartScheduler+0x26>
	__asm volatile
 800a200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a204:	f383 8811 	msr	BASEPRI, r3
 800a208:	f3bf 8f6f 	isb	sy
 800a20c:	f3bf 8f4f 	dsb	sy
 800a210:	613b      	str	r3, [r7, #16]
}
 800a212:	bf00      	nop
 800a214:	e7fe      	b.n	800a214 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a216:	4b3e      	ldr	r3, [pc, #248]	; (800a310 <xPortStartScheduler+0x120>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a3f      	ldr	r2, [pc, #252]	; (800a318 <xPortStartScheduler+0x128>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d10a      	bne.n	800a236 <xPortStartScheduler+0x46>
	__asm volatile
 800a220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a224:	f383 8811 	msr	BASEPRI, r3
 800a228:	f3bf 8f6f 	isb	sy
 800a22c:	f3bf 8f4f 	dsb	sy
 800a230:	60fb      	str	r3, [r7, #12]
}
 800a232:	bf00      	nop
 800a234:	e7fe      	b.n	800a234 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a236:	4b39      	ldr	r3, [pc, #228]	; (800a31c <xPortStartScheduler+0x12c>)
 800a238:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	22ff      	movs	r2, #255	; 0xff
 800a246:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a250:	78fb      	ldrb	r3, [r7, #3]
 800a252:	b2db      	uxtb	r3, r3
 800a254:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a258:	b2da      	uxtb	r2, r3
 800a25a:	4b31      	ldr	r3, [pc, #196]	; (800a320 <xPortStartScheduler+0x130>)
 800a25c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a25e:	4b31      	ldr	r3, [pc, #196]	; (800a324 <xPortStartScheduler+0x134>)
 800a260:	2207      	movs	r2, #7
 800a262:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a264:	e009      	b.n	800a27a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a266:	4b2f      	ldr	r3, [pc, #188]	; (800a324 <xPortStartScheduler+0x134>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	3b01      	subs	r3, #1
 800a26c:	4a2d      	ldr	r2, [pc, #180]	; (800a324 <xPortStartScheduler+0x134>)
 800a26e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a270:	78fb      	ldrb	r3, [r7, #3]
 800a272:	b2db      	uxtb	r3, r3
 800a274:	005b      	lsls	r3, r3, #1
 800a276:	b2db      	uxtb	r3, r3
 800a278:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a27a:	78fb      	ldrb	r3, [r7, #3]
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a282:	2b80      	cmp	r3, #128	; 0x80
 800a284:	d0ef      	beq.n	800a266 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a286:	4b27      	ldr	r3, [pc, #156]	; (800a324 <xPortStartScheduler+0x134>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f1c3 0307 	rsb	r3, r3, #7
 800a28e:	2b04      	cmp	r3, #4
 800a290:	d00a      	beq.n	800a2a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a292:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a296:	f383 8811 	msr	BASEPRI, r3
 800a29a:	f3bf 8f6f 	isb	sy
 800a29e:	f3bf 8f4f 	dsb	sy
 800a2a2:	60bb      	str	r3, [r7, #8]
}
 800a2a4:	bf00      	nop
 800a2a6:	e7fe      	b.n	800a2a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a2a8:	4b1e      	ldr	r3, [pc, #120]	; (800a324 <xPortStartScheduler+0x134>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	021b      	lsls	r3, r3, #8
 800a2ae:	4a1d      	ldr	r2, [pc, #116]	; (800a324 <xPortStartScheduler+0x134>)
 800a2b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a2b2:	4b1c      	ldr	r3, [pc, #112]	; (800a324 <xPortStartScheduler+0x134>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a2ba:	4a1a      	ldr	r2, [pc, #104]	; (800a324 <xPortStartScheduler+0x134>)
 800a2bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	b2da      	uxtb	r2, r3
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a2c6:	4b18      	ldr	r3, [pc, #96]	; (800a328 <xPortStartScheduler+0x138>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4a17      	ldr	r2, [pc, #92]	; (800a328 <xPortStartScheduler+0x138>)
 800a2cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a2d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a2d2:	4b15      	ldr	r3, [pc, #84]	; (800a328 <xPortStartScheduler+0x138>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a14      	ldr	r2, [pc, #80]	; (800a328 <xPortStartScheduler+0x138>)
 800a2d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a2dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a2de:	f000 f8dd 	bl	800a49c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a2e2:	4b12      	ldr	r3, [pc, #72]	; (800a32c <xPortStartScheduler+0x13c>)
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a2e8:	f000 f8fc 	bl	800a4e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a2ec:	4b10      	ldr	r3, [pc, #64]	; (800a330 <xPortStartScheduler+0x140>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a0f      	ldr	r2, [pc, #60]	; (800a330 <xPortStartScheduler+0x140>)
 800a2f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a2f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a2f8:	f7ff ff66 	bl	800a1c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a2fc:	f7ff fa64 	bl	80097c8 <vTaskSwitchContext>
	prvTaskExitError();
 800a300:	f7ff ff1c 	bl	800a13c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	3718      	adds	r7, #24
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	e000ed00 	.word	0xe000ed00
 800a314:	410fc271 	.word	0x410fc271
 800a318:	410fc270 	.word	0x410fc270
 800a31c:	e000e400 	.word	0xe000e400
 800a320:	20000874 	.word	0x20000874
 800a324:	20000878 	.word	0x20000878
 800a328:	e000ed20 	.word	0xe000ed20
 800a32c:	20000018 	.word	0x20000018
 800a330:	e000ef34 	.word	0xe000ef34

0800a334 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
	__asm volatile
 800a33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33e:	f383 8811 	msr	BASEPRI, r3
 800a342:	f3bf 8f6f 	isb	sy
 800a346:	f3bf 8f4f 	dsb	sy
 800a34a:	607b      	str	r3, [r7, #4]
}
 800a34c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a34e:	4b0f      	ldr	r3, [pc, #60]	; (800a38c <vPortEnterCritical+0x58>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	3301      	adds	r3, #1
 800a354:	4a0d      	ldr	r2, [pc, #52]	; (800a38c <vPortEnterCritical+0x58>)
 800a356:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a358:	4b0c      	ldr	r3, [pc, #48]	; (800a38c <vPortEnterCritical+0x58>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d10f      	bne.n	800a380 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a360:	4b0b      	ldr	r3, [pc, #44]	; (800a390 <vPortEnterCritical+0x5c>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	b2db      	uxtb	r3, r3
 800a366:	2b00      	cmp	r3, #0
 800a368:	d00a      	beq.n	800a380 <vPortEnterCritical+0x4c>
	__asm volatile
 800a36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36e:	f383 8811 	msr	BASEPRI, r3
 800a372:	f3bf 8f6f 	isb	sy
 800a376:	f3bf 8f4f 	dsb	sy
 800a37a:	603b      	str	r3, [r7, #0]
}
 800a37c:	bf00      	nop
 800a37e:	e7fe      	b.n	800a37e <vPortEnterCritical+0x4a>
	}
}
 800a380:	bf00      	nop
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr
 800a38c:	20000018 	.word	0x20000018
 800a390:	e000ed04 	.word	0xe000ed04

0800a394 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a39a:	4b12      	ldr	r3, [pc, #72]	; (800a3e4 <vPortExitCritical+0x50>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d10a      	bne.n	800a3b8 <vPortExitCritical+0x24>
	__asm volatile
 800a3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a6:	f383 8811 	msr	BASEPRI, r3
 800a3aa:	f3bf 8f6f 	isb	sy
 800a3ae:	f3bf 8f4f 	dsb	sy
 800a3b2:	607b      	str	r3, [r7, #4]
}
 800a3b4:	bf00      	nop
 800a3b6:	e7fe      	b.n	800a3b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a3b8:	4b0a      	ldr	r3, [pc, #40]	; (800a3e4 <vPortExitCritical+0x50>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	4a09      	ldr	r2, [pc, #36]	; (800a3e4 <vPortExitCritical+0x50>)
 800a3c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a3c2:	4b08      	ldr	r3, [pc, #32]	; (800a3e4 <vPortExitCritical+0x50>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d105      	bne.n	800a3d6 <vPortExitCritical+0x42>
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	f383 8811 	msr	BASEPRI, r3
}
 800a3d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a3d6:	bf00      	nop
 800a3d8:	370c      	adds	r7, #12
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	20000018 	.word	0x20000018
	...

0800a3f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a3f0:	f3ef 8009 	mrs	r0, PSP
 800a3f4:	f3bf 8f6f 	isb	sy
 800a3f8:	4b15      	ldr	r3, [pc, #84]	; (800a450 <pxCurrentTCBConst>)
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	f01e 0f10 	tst.w	lr, #16
 800a400:	bf08      	it	eq
 800a402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a40a:	6010      	str	r0, [r2, #0]
 800a40c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a410:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a414:	f380 8811 	msr	BASEPRI, r0
 800a418:	f3bf 8f4f 	dsb	sy
 800a41c:	f3bf 8f6f 	isb	sy
 800a420:	f7ff f9d2 	bl	80097c8 <vTaskSwitchContext>
 800a424:	f04f 0000 	mov.w	r0, #0
 800a428:	f380 8811 	msr	BASEPRI, r0
 800a42c:	bc09      	pop	{r0, r3}
 800a42e:	6819      	ldr	r1, [r3, #0]
 800a430:	6808      	ldr	r0, [r1, #0]
 800a432:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a436:	f01e 0f10 	tst.w	lr, #16
 800a43a:	bf08      	it	eq
 800a43c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a440:	f380 8809 	msr	PSP, r0
 800a444:	f3bf 8f6f 	isb	sy
 800a448:	4770      	bx	lr
 800a44a:	bf00      	nop
 800a44c:	f3af 8000 	nop.w

0800a450 <pxCurrentTCBConst>:
 800a450:	20000748 	.word	0x20000748
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a454:	bf00      	nop
 800a456:	bf00      	nop

0800a458 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a458:	b580      	push	{r7, lr}
 800a45a:	b082      	sub	sp, #8
 800a45c:	af00      	add	r7, sp, #0
	__asm volatile
 800a45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a462:	f383 8811 	msr	BASEPRI, r3
 800a466:	f3bf 8f6f 	isb	sy
 800a46a:	f3bf 8f4f 	dsb	sy
 800a46e:	607b      	str	r3, [r7, #4]
}
 800a470:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a472:	f7ff f8eb 	bl	800964c <xTaskIncrementTick>
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d003      	beq.n	800a484 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a47c:	4b06      	ldr	r3, [pc, #24]	; (800a498 <SysTick_Handler+0x40>)
 800a47e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a482:	601a      	str	r2, [r3, #0]
 800a484:	2300      	movs	r3, #0
 800a486:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	f383 8811 	msr	BASEPRI, r3
}
 800a48e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a490:	bf00      	nop
 800a492:	3708      	adds	r7, #8
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}
 800a498:	e000ed04 	.word	0xe000ed04

0800a49c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a49c:	b480      	push	{r7}
 800a49e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a4a0:	4b0b      	ldr	r3, [pc, #44]	; (800a4d0 <vPortSetupTimerInterrupt+0x34>)
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a4a6:	4b0b      	ldr	r3, [pc, #44]	; (800a4d4 <vPortSetupTimerInterrupt+0x38>)
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a4ac:	4b0a      	ldr	r3, [pc, #40]	; (800a4d8 <vPortSetupTimerInterrupt+0x3c>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a0a      	ldr	r2, [pc, #40]	; (800a4dc <vPortSetupTimerInterrupt+0x40>)
 800a4b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a4b6:	099b      	lsrs	r3, r3, #6
 800a4b8:	4a09      	ldr	r2, [pc, #36]	; (800a4e0 <vPortSetupTimerInterrupt+0x44>)
 800a4ba:	3b01      	subs	r3, #1
 800a4bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a4be:	4b04      	ldr	r3, [pc, #16]	; (800a4d0 <vPortSetupTimerInterrupt+0x34>)
 800a4c0:	2207      	movs	r2, #7
 800a4c2:	601a      	str	r2, [r3, #0]
}
 800a4c4:	bf00      	nop
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	e000e010 	.word	0xe000e010
 800a4d4:	e000e018 	.word	0xe000e018
 800a4d8:	2000000c 	.word	0x2000000c
 800a4dc:	10624dd3 	.word	0x10624dd3
 800a4e0:	e000e014 	.word	0xe000e014

0800a4e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a4e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a4f4 <vPortEnableVFP+0x10>
 800a4e8:	6801      	ldr	r1, [r0, #0]
 800a4ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a4ee:	6001      	str	r1, [r0, #0]
 800a4f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a4f2:	bf00      	nop
 800a4f4:	e000ed88 	.word	0xe000ed88

0800a4f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a4fe:	f3ef 8305 	mrs	r3, IPSR
 800a502:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2b0f      	cmp	r3, #15
 800a508:	d914      	bls.n	800a534 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a50a:	4a17      	ldr	r2, [pc, #92]	; (800a568 <vPortValidateInterruptPriority+0x70>)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	4413      	add	r3, r2
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a514:	4b15      	ldr	r3, [pc, #84]	; (800a56c <vPortValidateInterruptPriority+0x74>)
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	7afa      	ldrb	r2, [r7, #11]
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d20a      	bcs.n	800a534 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a522:	f383 8811 	msr	BASEPRI, r3
 800a526:	f3bf 8f6f 	isb	sy
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	607b      	str	r3, [r7, #4]
}
 800a530:	bf00      	nop
 800a532:	e7fe      	b.n	800a532 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a534:	4b0e      	ldr	r3, [pc, #56]	; (800a570 <vPortValidateInterruptPriority+0x78>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a53c:	4b0d      	ldr	r3, [pc, #52]	; (800a574 <vPortValidateInterruptPriority+0x7c>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	429a      	cmp	r2, r3
 800a542:	d90a      	bls.n	800a55a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a548:	f383 8811 	msr	BASEPRI, r3
 800a54c:	f3bf 8f6f 	isb	sy
 800a550:	f3bf 8f4f 	dsb	sy
 800a554:	603b      	str	r3, [r7, #0]
}
 800a556:	bf00      	nop
 800a558:	e7fe      	b.n	800a558 <vPortValidateInterruptPriority+0x60>
	}
 800a55a:	bf00      	nop
 800a55c:	3714      	adds	r7, #20
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr
 800a566:	bf00      	nop
 800a568:	e000e3f0 	.word	0xe000e3f0
 800a56c:	20000874 	.word	0x20000874
 800a570:	e000ed0c 	.word	0xe000ed0c
 800a574:	20000878 	.word	0x20000878

0800a578 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b08a      	sub	sp, #40	; 0x28
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a580:	2300      	movs	r3, #0
 800a582:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a584:	f7fe ffb8 	bl	80094f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a588:	4b58      	ldr	r3, [pc, #352]	; (800a6ec <pvPortMalloc+0x174>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d101      	bne.n	800a594 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a590:	f000 f910 	bl	800a7b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a594:	4b56      	ldr	r3, [pc, #344]	; (800a6f0 <pvPortMalloc+0x178>)
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4013      	ands	r3, r2
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f040 808e 	bne.w	800a6be <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d01d      	beq.n	800a5e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a5a8:	2208      	movs	r2, #8
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f003 0307 	and.w	r3, r3, #7
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d014      	beq.n	800a5e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f023 0307 	bic.w	r3, r3, #7
 800a5c0:	3308      	adds	r3, #8
 800a5c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f003 0307 	and.w	r3, r3, #7
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d00a      	beq.n	800a5e4 <pvPortMalloc+0x6c>
	__asm volatile
 800a5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d2:	f383 8811 	msr	BASEPRI, r3
 800a5d6:	f3bf 8f6f 	isb	sy
 800a5da:	f3bf 8f4f 	dsb	sy
 800a5de:	617b      	str	r3, [r7, #20]
}
 800a5e0:	bf00      	nop
 800a5e2:	e7fe      	b.n	800a5e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d069      	beq.n	800a6be <pvPortMalloc+0x146>
 800a5ea:	4b42      	ldr	r3, [pc, #264]	; (800a6f4 <pvPortMalloc+0x17c>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d864      	bhi.n	800a6be <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a5f4:	4b40      	ldr	r3, [pc, #256]	; (800a6f8 <pvPortMalloc+0x180>)
 800a5f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a5f8:	4b3f      	ldr	r3, [pc, #252]	; (800a6f8 <pvPortMalloc+0x180>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a5fe:	e004      	b.n	800a60a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a602:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	429a      	cmp	r2, r3
 800a612:	d903      	bls.n	800a61c <pvPortMalloc+0xa4>
 800a614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d1f1      	bne.n	800a600 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a61c:	4b33      	ldr	r3, [pc, #204]	; (800a6ec <pvPortMalloc+0x174>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a622:	429a      	cmp	r2, r3
 800a624:	d04b      	beq.n	800a6be <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a626:	6a3b      	ldr	r3, [r7, #32]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	2208      	movs	r2, #8
 800a62c:	4413      	add	r3, r2
 800a62e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	6a3b      	ldr	r3, [r7, #32]
 800a636:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63a:	685a      	ldr	r2, [r3, #4]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	1ad2      	subs	r2, r2, r3
 800a640:	2308      	movs	r3, #8
 800a642:	005b      	lsls	r3, r3, #1
 800a644:	429a      	cmp	r2, r3
 800a646:	d91f      	bls.n	800a688 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	4413      	add	r3, r2
 800a64e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a650:	69bb      	ldr	r3, [r7, #24]
 800a652:	f003 0307 	and.w	r3, r3, #7
 800a656:	2b00      	cmp	r3, #0
 800a658:	d00a      	beq.n	800a670 <pvPortMalloc+0xf8>
	__asm volatile
 800a65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65e:	f383 8811 	msr	BASEPRI, r3
 800a662:	f3bf 8f6f 	isb	sy
 800a666:	f3bf 8f4f 	dsb	sy
 800a66a:	613b      	str	r3, [r7, #16]
}
 800a66c:	bf00      	nop
 800a66e:	e7fe      	b.n	800a66e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a672:	685a      	ldr	r2, [r3, #4]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	1ad2      	subs	r2, r2, r3
 800a678:	69bb      	ldr	r3, [r7, #24]
 800a67a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a682:	69b8      	ldr	r0, [r7, #24]
 800a684:	f000 f8f8 	bl	800a878 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a688:	4b1a      	ldr	r3, [pc, #104]	; (800a6f4 <pvPortMalloc+0x17c>)
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	1ad3      	subs	r3, r2, r3
 800a692:	4a18      	ldr	r2, [pc, #96]	; (800a6f4 <pvPortMalloc+0x17c>)
 800a694:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a696:	4b17      	ldr	r3, [pc, #92]	; (800a6f4 <pvPortMalloc+0x17c>)
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	4b18      	ldr	r3, [pc, #96]	; (800a6fc <pvPortMalloc+0x184>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d203      	bcs.n	800a6aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a6a2:	4b14      	ldr	r3, [pc, #80]	; (800a6f4 <pvPortMalloc+0x17c>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a15      	ldr	r2, [pc, #84]	; (800a6fc <pvPortMalloc+0x184>)
 800a6a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ac:	685a      	ldr	r2, [r3, #4]
 800a6ae:	4b10      	ldr	r3, [pc, #64]	; (800a6f0 <pvPortMalloc+0x178>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	431a      	orrs	r2, r3
 800a6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a6be:	f7fe ff29 	bl	8009514 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6c2:	69fb      	ldr	r3, [r7, #28]
 800a6c4:	f003 0307 	and.w	r3, r3, #7
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d00a      	beq.n	800a6e2 <pvPortMalloc+0x16a>
	__asm volatile
 800a6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d0:	f383 8811 	msr	BASEPRI, r3
 800a6d4:	f3bf 8f6f 	isb	sy
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	60fb      	str	r3, [r7, #12]
}
 800a6de:	bf00      	nop
 800a6e0:	e7fe      	b.n	800a6e0 <pvPortMalloc+0x168>
	return pvReturn;
 800a6e2:	69fb      	ldr	r3, [r7, #28]
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3728      	adds	r7, #40	; 0x28
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}
 800a6ec:	20001ff4 	.word	0x20001ff4
 800a6f0:	20002000 	.word	0x20002000
 800a6f4:	20001ff8 	.word	0x20001ff8
 800a6f8:	20001fec 	.word	0x20001fec
 800a6fc:	20001ffc 	.word	0x20001ffc

0800a700 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b086      	sub	sp, #24
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d048      	beq.n	800a7a4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a712:	2308      	movs	r3, #8
 800a714:	425b      	negs	r3, r3
 800a716:	697a      	ldr	r2, [r7, #20]
 800a718:	4413      	add	r3, r2
 800a71a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	685a      	ldr	r2, [r3, #4]
 800a724:	4b21      	ldr	r3, [pc, #132]	; (800a7ac <vPortFree+0xac>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4013      	ands	r3, r2
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d10a      	bne.n	800a744 <vPortFree+0x44>
	__asm volatile
 800a72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a732:	f383 8811 	msr	BASEPRI, r3
 800a736:	f3bf 8f6f 	isb	sy
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	60fb      	str	r3, [r7, #12]
}
 800a740:	bf00      	nop
 800a742:	e7fe      	b.n	800a742 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d00a      	beq.n	800a762 <vPortFree+0x62>
	__asm volatile
 800a74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a750:	f383 8811 	msr	BASEPRI, r3
 800a754:	f3bf 8f6f 	isb	sy
 800a758:	f3bf 8f4f 	dsb	sy
 800a75c:	60bb      	str	r3, [r7, #8]
}
 800a75e:	bf00      	nop
 800a760:	e7fe      	b.n	800a760 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	685a      	ldr	r2, [r3, #4]
 800a766:	4b11      	ldr	r3, [pc, #68]	; (800a7ac <vPortFree+0xac>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4013      	ands	r3, r2
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d019      	beq.n	800a7a4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d115      	bne.n	800a7a4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	685a      	ldr	r2, [r3, #4]
 800a77c:	4b0b      	ldr	r3, [pc, #44]	; (800a7ac <vPortFree+0xac>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	43db      	mvns	r3, r3
 800a782:	401a      	ands	r2, r3
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a788:	f7fe feb6 	bl	80094f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	685a      	ldr	r2, [r3, #4]
 800a790:	4b07      	ldr	r3, [pc, #28]	; (800a7b0 <vPortFree+0xb0>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4413      	add	r3, r2
 800a796:	4a06      	ldr	r2, [pc, #24]	; (800a7b0 <vPortFree+0xb0>)
 800a798:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a79a:	6938      	ldr	r0, [r7, #16]
 800a79c:	f000 f86c 	bl	800a878 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a7a0:	f7fe feb8 	bl	8009514 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a7a4:	bf00      	nop
 800a7a6:	3718      	adds	r7, #24
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}
 800a7ac:	20002000 	.word	0x20002000
 800a7b0:	20001ff8 	.word	0x20001ff8

0800a7b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b085      	sub	sp, #20
 800a7b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a7ba:	f241 7370 	movw	r3, #6000	; 0x1770
 800a7be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a7c0:	4b27      	ldr	r3, [pc, #156]	; (800a860 <prvHeapInit+0xac>)
 800a7c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f003 0307 	and.w	r3, r3, #7
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d00c      	beq.n	800a7e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	3307      	adds	r3, #7
 800a7d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f023 0307 	bic.w	r3, r3, #7
 800a7da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a7dc:	68ba      	ldr	r2, [r7, #8]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	1ad3      	subs	r3, r2, r3
 800a7e2:	4a1f      	ldr	r2, [pc, #124]	; (800a860 <prvHeapInit+0xac>)
 800a7e4:	4413      	add	r3, r2
 800a7e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a7ec:	4a1d      	ldr	r2, [pc, #116]	; (800a864 <prvHeapInit+0xb0>)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a7f2:	4b1c      	ldr	r3, [pc, #112]	; (800a864 <prvHeapInit+0xb0>)
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	68ba      	ldr	r2, [r7, #8]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a800:	2208      	movs	r2, #8
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	1a9b      	subs	r3, r3, r2
 800a806:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f023 0307 	bic.w	r3, r3, #7
 800a80e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	4a15      	ldr	r2, [pc, #84]	; (800a868 <prvHeapInit+0xb4>)
 800a814:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a816:	4b14      	ldr	r3, [pc, #80]	; (800a868 <prvHeapInit+0xb4>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	2200      	movs	r2, #0
 800a81c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a81e:	4b12      	ldr	r3, [pc, #72]	; (800a868 <prvHeapInit+0xb4>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	2200      	movs	r2, #0
 800a824:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	1ad2      	subs	r2, r2, r3
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a834:	4b0c      	ldr	r3, [pc, #48]	; (800a868 <prvHeapInit+0xb4>)
 800a836:	681a      	ldr	r2, [r3, #0]
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	4a0a      	ldr	r2, [pc, #40]	; (800a86c <prvHeapInit+0xb8>)
 800a842:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	4a09      	ldr	r2, [pc, #36]	; (800a870 <prvHeapInit+0xbc>)
 800a84a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a84c:	4b09      	ldr	r3, [pc, #36]	; (800a874 <prvHeapInit+0xc0>)
 800a84e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a852:	601a      	str	r2, [r3, #0]
}
 800a854:	bf00      	nop
 800a856:	3714      	adds	r7, #20
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr
 800a860:	2000087c 	.word	0x2000087c
 800a864:	20001fec 	.word	0x20001fec
 800a868:	20001ff4 	.word	0x20001ff4
 800a86c:	20001ffc 	.word	0x20001ffc
 800a870:	20001ff8 	.word	0x20001ff8
 800a874:	20002000 	.word	0x20002000

0800a878 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a878:	b480      	push	{r7}
 800a87a:	b085      	sub	sp, #20
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a880:	4b28      	ldr	r3, [pc, #160]	; (800a924 <prvInsertBlockIntoFreeList+0xac>)
 800a882:	60fb      	str	r3, [r7, #12]
 800a884:	e002      	b.n	800a88c <prvInsertBlockIntoFreeList+0x14>
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	60fb      	str	r3, [r7, #12]
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	429a      	cmp	r2, r3
 800a894:	d8f7      	bhi.n	800a886 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	68ba      	ldr	r2, [r7, #8]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d108      	bne.n	800a8ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	685a      	ldr	r2, [r3, #4]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	441a      	add	r2, r3
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	68ba      	ldr	r2, [r7, #8]
 800a8c4:	441a      	add	r2, r3
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d118      	bne.n	800a900 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	4b15      	ldr	r3, [pc, #84]	; (800a928 <prvInsertBlockIntoFreeList+0xb0>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d00d      	beq.n	800a8f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	685a      	ldr	r2, [r3, #4]
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	441a      	add	r2, r3
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	681a      	ldr	r2, [r3, #0]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	601a      	str	r2, [r3, #0]
 800a8f4:	e008      	b.n	800a908 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a8f6:	4b0c      	ldr	r3, [pc, #48]	; (800a928 <prvInsertBlockIntoFreeList+0xb0>)
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	601a      	str	r2, [r3, #0]
 800a8fe:	e003      	b.n	800a908 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a908:	68fa      	ldr	r2, [r7, #12]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	429a      	cmp	r2, r3
 800a90e:	d002      	beq.n	800a916 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a916:	bf00      	nop
 800a918:	3714      	adds	r7, #20
 800a91a:	46bd      	mov	sp, r7
 800a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a920:	4770      	bx	lr
 800a922:	bf00      	nop
 800a924:	20001fec 	.word	0x20001fec
 800a928:	20001ff4 	.word	0x20001ff4

0800a92c <atoi>:
 800a92c:	220a      	movs	r2, #10
 800a92e:	2100      	movs	r1, #0
 800a930:	f000 b882 	b.w	800aa38 <strtol>

0800a934 <_strtol_l.constprop.0>:
 800a934:	2b01      	cmp	r3, #1
 800a936:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a93a:	d001      	beq.n	800a940 <_strtol_l.constprop.0+0xc>
 800a93c:	2b24      	cmp	r3, #36	; 0x24
 800a93e:	d906      	bls.n	800a94e <_strtol_l.constprop.0+0x1a>
 800a940:	f000 fa68 	bl	800ae14 <__errno>
 800a944:	2316      	movs	r3, #22
 800a946:	6003      	str	r3, [r0, #0]
 800a948:	2000      	movs	r0, #0
 800a94a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a94e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800aa34 <_strtol_l.constprop.0+0x100>
 800a952:	460d      	mov	r5, r1
 800a954:	462e      	mov	r6, r5
 800a956:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a95a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a95e:	f017 0708 	ands.w	r7, r7, #8
 800a962:	d1f7      	bne.n	800a954 <_strtol_l.constprop.0+0x20>
 800a964:	2c2d      	cmp	r4, #45	; 0x2d
 800a966:	d132      	bne.n	800a9ce <_strtol_l.constprop.0+0x9a>
 800a968:	782c      	ldrb	r4, [r5, #0]
 800a96a:	2701      	movs	r7, #1
 800a96c:	1cb5      	adds	r5, r6, #2
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d05b      	beq.n	800aa2a <_strtol_l.constprop.0+0xf6>
 800a972:	2b10      	cmp	r3, #16
 800a974:	d109      	bne.n	800a98a <_strtol_l.constprop.0+0x56>
 800a976:	2c30      	cmp	r4, #48	; 0x30
 800a978:	d107      	bne.n	800a98a <_strtol_l.constprop.0+0x56>
 800a97a:	782c      	ldrb	r4, [r5, #0]
 800a97c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a980:	2c58      	cmp	r4, #88	; 0x58
 800a982:	d14d      	bne.n	800aa20 <_strtol_l.constprop.0+0xec>
 800a984:	786c      	ldrb	r4, [r5, #1]
 800a986:	2310      	movs	r3, #16
 800a988:	3502      	adds	r5, #2
 800a98a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a98e:	f108 38ff 	add.w	r8, r8, #4294967295
 800a992:	f04f 0e00 	mov.w	lr, #0
 800a996:	fbb8 f9f3 	udiv	r9, r8, r3
 800a99a:	4676      	mov	r6, lr
 800a99c:	fb03 8a19 	mls	sl, r3, r9, r8
 800a9a0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a9a4:	f1bc 0f09 	cmp.w	ip, #9
 800a9a8:	d816      	bhi.n	800a9d8 <_strtol_l.constprop.0+0xa4>
 800a9aa:	4664      	mov	r4, ip
 800a9ac:	42a3      	cmp	r3, r4
 800a9ae:	dd24      	ble.n	800a9fa <_strtol_l.constprop.0+0xc6>
 800a9b0:	f1be 3fff 	cmp.w	lr, #4294967295
 800a9b4:	d008      	beq.n	800a9c8 <_strtol_l.constprop.0+0x94>
 800a9b6:	45b1      	cmp	r9, r6
 800a9b8:	d31c      	bcc.n	800a9f4 <_strtol_l.constprop.0+0xc0>
 800a9ba:	d101      	bne.n	800a9c0 <_strtol_l.constprop.0+0x8c>
 800a9bc:	45a2      	cmp	sl, r4
 800a9be:	db19      	blt.n	800a9f4 <_strtol_l.constprop.0+0xc0>
 800a9c0:	fb06 4603 	mla	r6, r6, r3, r4
 800a9c4:	f04f 0e01 	mov.w	lr, #1
 800a9c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9cc:	e7e8      	b.n	800a9a0 <_strtol_l.constprop.0+0x6c>
 800a9ce:	2c2b      	cmp	r4, #43	; 0x2b
 800a9d0:	bf04      	itt	eq
 800a9d2:	782c      	ldrbeq	r4, [r5, #0]
 800a9d4:	1cb5      	addeq	r5, r6, #2
 800a9d6:	e7ca      	b.n	800a96e <_strtol_l.constprop.0+0x3a>
 800a9d8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a9dc:	f1bc 0f19 	cmp.w	ip, #25
 800a9e0:	d801      	bhi.n	800a9e6 <_strtol_l.constprop.0+0xb2>
 800a9e2:	3c37      	subs	r4, #55	; 0x37
 800a9e4:	e7e2      	b.n	800a9ac <_strtol_l.constprop.0+0x78>
 800a9e6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a9ea:	f1bc 0f19 	cmp.w	ip, #25
 800a9ee:	d804      	bhi.n	800a9fa <_strtol_l.constprop.0+0xc6>
 800a9f0:	3c57      	subs	r4, #87	; 0x57
 800a9f2:	e7db      	b.n	800a9ac <_strtol_l.constprop.0+0x78>
 800a9f4:	f04f 3eff 	mov.w	lr, #4294967295
 800a9f8:	e7e6      	b.n	800a9c8 <_strtol_l.constprop.0+0x94>
 800a9fa:	f1be 3fff 	cmp.w	lr, #4294967295
 800a9fe:	d105      	bne.n	800aa0c <_strtol_l.constprop.0+0xd8>
 800aa00:	2322      	movs	r3, #34	; 0x22
 800aa02:	6003      	str	r3, [r0, #0]
 800aa04:	4646      	mov	r6, r8
 800aa06:	b942      	cbnz	r2, 800aa1a <_strtol_l.constprop.0+0xe6>
 800aa08:	4630      	mov	r0, r6
 800aa0a:	e79e      	b.n	800a94a <_strtol_l.constprop.0+0x16>
 800aa0c:	b107      	cbz	r7, 800aa10 <_strtol_l.constprop.0+0xdc>
 800aa0e:	4276      	negs	r6, r6
 800aa10:	2a00      	cmp	r2, #0
 800aa12:	d0f9      	beq.n	800aa08 <_strtol_l.constprop.0+0xd4>
 800aa14:	f1be 0f00 	cmp.w	lr, #0
 800aa18:	d000      	beq.n	800aa1c <_strtol_l.constprop.0+0xe8>
 800aa1a:	1e69      	subs	r1, r5, #1
 800aa1c:	6011      	str	r1, [r2, #0]
 800aa1e:	e7f3      	b.n	800aa08 <_strtol_l.constprop.0+0xd4>
 800aa20:	2430      	movs	r4, #48	; 0x30
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d1b1      	bne.n	800a98a <_strtol_l.constprop.0+0x56>
 800aa26:	2308      	movs	r3, #8
 800aa28:	e7af      	b.n	800a98a <_strtol_l.constprop.0+0x56>
 800aa2a:	2c30      	cmp	r4, #48	; 0x30
 800aa2c:	d0a5      	beq.n	800a97a <_strtol_l.constprop.0+0x46>
 800aa2e:	230a      	movs	r3, #10
 800aa30:	e7ab      	b.n	800a98a <_strtol_l.constprop.0+0x56>
 800aa32:	bf00      	nop
 800aa34:	0800bf6d 	.word	0x0800bf6d

0800aa38 <strtol>:
 800aa38:	4613      	mov	r3, r2
 800aa3a:	460a      	mov	r2, r1
 800aa3c:	4601      	mov	r1, r0
 800aa3e:	4802      	ldr	r0, [pc, #8]	; (800aa48 <strtol+0x10>)
 800aa40:	6800      	ldr	r0, [r0, #0]
 800aa42:	f7ff bf77 	b.w	800a934 <_strtol_l.constprop.0>
 800aa46:	bf00      	nop
 800aa48:	20000074 	.word	0x20000074

0800aa4c <std>:
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	b510      	push	{r4, lr}
 800aa50:	4604      	mov	r4, r0
 800aa52:	e9c0 3300 	strd	r3, r3, [r0]
 800aa56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa5a:	6083      	str	r3, [r0, #8]
 800aa5c:	8181      	strh	r1, [r0, #12]
 800aa5e:	6643      	str	r3, [r0, #100]	; 0x64
 800aa60:	81c2      	strh	r2, [r0, #14]
 800aa62:	6183      	str	r3, [r0, #24]
 800aa64:	4619      	mov	r1, r3
 800aa66:	2208      	movs	r2, #8
 800aa68:	305c      	adds	r0, #92	; 0x5c
 800aa6a:	f000 f928 	bl	800acbe <memset>
 800aa6e:	4b0d      	ldr	r3, [pc, #52]	; (800aaa4 <std+0x58>)
 800aa70:	6263      	str	r3, [r4, #36]	; 0x24
 800aa72:	4b0d      	ldr	r3, [pc, #52]	; (800aaa8 <std+0x5c>)
 800aa74:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa76:	4b0d      	ldr	r3, [pc, #52]	; (800aaac <std+0x60>)
 800aa78:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa7a:	4b0d      	ldr	r3, [pc, #52]	; (800aab0 <std+0x64>)
 800aa7c:	6323      	str	r3, [r4, #48]	; 0x30
 800aa7e:	4b0d      	ldr	r3, [pc, #52]	; (800aab4 <std+0x68>)
 800aa80:	6224      	str	r4, [r4, #32]
 800aa82:	429c      	cmp	r4, r3
 800aa84:	d006      	beq.n	800aa94 <std+0x48>
 800aa86:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800aa8a:	4294      	cmp	r4, r2
 800aa8c:	d002      	beq.n	800aa94 <std+0x48>
 800aa8e:	33d0      	adds	r3, #208	; 0xd0
 800aa90:	429c      	cmp	r4, r3
 800aa92:	d105      	bne.n	800aaa0 <std+0x54>
 800aa94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa9c:	f000 b9e4 	b.w	800ae68 <__retarget_lock_init_recursive>
 800aaa0:	bd10      	pop	{r4, pc}
 800aaa2:	bf00      	nop
 800aaa4:	0800ac39 	.word	0x0800ac39
 800aaa8:	0800ac5b 	.word	0x0800ac5b
 800aaac:	0800ac93 	.word	0x0800ac93
 800aab0:	0800acb7 	.word	0x0800acb7
 800aab4:	20002004 	.word	0x20002004

0800aab8 <stdio_exit_handler>:
 800aab8:	4a02      	ldr	r2, [pc, #8]	; (800aac4 <stdio_exit_handler+0xc>)
 800aaba:	4903      	ldr	r1, [pc, #12]	; (800aac8 <stdio_exit_handler+0x10>)
 800aabc:	4803      	ldr	r0, [pc, #12]	; (800aacc <stdio_exit_handler+0x14>)
 800aabe:	f000 b869 	b.w	800ab94 <_fwalk_sglue>
 800aac2:	bf00      	nop
 800aac4:	2000001c 	.word	0x2000001c
 800aac8:	0800b7a5 	.word	0x0800b7a5
 800aacc:	20000028 	.word	0x20000028

0800aad0 <cleanup_stdio>:
 800aad0:	6841      	ldr	r1, [r0, #4]
 800aad2:	4b0c      	ldr	r3, [pc, #48]	; (800ab04 <cleanup_stdio+0x34>)
 800aad4:	4299      	cmp	r1, r3
 800aad6:	b510      	push	{r4, lr}
 800aad8:	4604      	mov	r4, r0
 800aada:	d001      	beq.n	800aae0 <cleanup_stdio+0x10>
 800aadc:	f000 fe62 	bl	800b7a4 <_fflush_r>
 800aae0:	68a1      	ldr	r1, [r4, #8]
 800aae2:	4b09      	ldr	r3, [pc, #36]	; (800ab08 <cleanup_stdio+0x38>)
 800aae4:	4299      	cmp	r1, r3
 800aae6:	d002      	beq.n	800aaee <cleanup_stdio+0x1e>
 800aae8:	4620      	mov	r0, r4
 800aaea:	f000 fe5b 	bl	800b7a4 <_fflush_r>
 800aaee:	68e1      	ldr	r1, [r4, #12]
 800aaf0:	4b06      	ldr	r3, [pc, #24]	; (800ab0c <cleanup_stdio+0x3c>)
 800aaf2:	4299      	cmp	r1, r3
 800aaf4:	d004      	beq.n	800ab00 <cleanup_stdio+0x30>
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aafc:	f000 be52 	b.w	800b7a4 <_fflush_r>
 800ab00:	bd10      	pop	{r4, pc}
 800ab02:	bf00      	nop
 800ab04:	20002004 	.word	0x20002004
 800ab08:	2000206c 	.word	0x2000206c
 800ab0c:	200020d4 	.word	0x200020d4

0800ab10 <global_stdio_init.part.0>:
 800ab10:	b510      	push	{r4, lr}
 800ab12:	4b0b      	ldr	r3, [pc, #44]	; (800ab40 <global_stdio_init.part.0+0x30>)
 800ab14:	4c0b      	ldr	r4, [pc, #44]	; (800ab44 <global_stdio_init.part.0+0x34>)
 800ab16:	4a0c      	ldr	r2, [pc, #48]	; (800ab48 <global_stdio_init.part.0+0x38>)
 800ab18:	601a      	str	r2, [r3, #0]
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	2104      	movs	r1, #4
 800ab20:	f7ff ff94 	bl	800aa4c <std>
 800ab24:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ab28:	2201      	movs	r2, #1
 800ab2a:	2109      	movs	r1, #9
 800ab2c:	f7ff ff8e 	bl	800aa4c <std>
 800ab30:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ab34:	2202      	movs	r2, #2
 800ab36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab3a:	2112      	movs	r1, #18
 800ab3c:	f7ff bf86 	b.w	800aa4c <std>
 800ab40:	2000213c 	.word	0x2000213c
 800ab44:	20002004 	.word	0x20002004
 800ab48:	0800aab9 	.word	0x0800aab9

0800ab4c <__sfp_lock_acquire>:
 800ab4c:	4801      	ldr	r0, [pc, #4]	; (800ab54 <__sfp_lock_acquire+0x8>)
 800ab4e:	f000 b98c 	b.w	800ae6a <__retarget_lock_acquire_recursive>
 800ab52:	bf00      	nop
 800ab54:	20002145 	.word	0x20002145

0800ab58 <__sfp_lock_release>:
 800ab58:	4801      	ldr	r0, [pc, #4]	; (800ab60 <__sfp_lock_release+0x8>)
 800ab5a:	f000 b987 	b.w	800ae6c <__retarget_lock_release_recursive>
 800ab5e:	bf00      	nop
 800ab60:	20002145 	.word	0x20002145

0800ab64 <__sinit>:
 800ab64:	b510      	push	{r4, lr}
 800ab66:	4604      	mov	r4, r0
 800ab68:	f7ff fff0 	bl	800ab4c <__sfp_lock_acquire>
 800ab6c:	6a23      	ldr	r3, [r4, #32]
 800ab6e:	b11b      	cbz	r3, 800ab78 <__sinit+0x14>
 800ab70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab74:	f7ff bff0 	b.w	800ab58 <__sfp_lock_release>
 800ab78:	4b04      	ldr	r3, [pc, #16]	; (800ab8c <__sinit+0x28>)
 800ab7a:	6223      	str	r3, [r4, #32]
 800ab7c:	4b04      	ldr	r3, [pc, #16]	; (800ab90 <__sinit+0x2c>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d1f5      	bne.n	800ab70 <__sinit+0xc>
 800ab84:	f7ff ffc4 	bl	800ab10 <global_stdio_init.part.0>
 800ab88:	e7f2      	b.n	800ab70 <__sinit+0xc>
 800ab8a:	bf00      	nop
 800ab8c:	0800aad1 	.word	0x0800aad1
 800ab90:	2000213c 	.word	0x2000213c

0800ab94 <_fwalk_sglue>:
 800ab94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab98:	4607      	mov	r7, r0
 800ab9a:	4688      	mov	r8, r1
 800ab9c:	4614      	mov	r4, r2
 800ab9e:	2600      	movs	r6, #0
 800aba0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aba4:	f1b9 0901 	subs.w	r9, r9, #1
 800aba8:	d505      	bpl.n	800abb6 <_fwalk_sglue+0x22>
 800abaa:	6824      	ldr	r4, [r4, #0]
 800abac:	2c00      	cmp	r4, #0
 800abae:	d1f7      	bne.n	800aba0 <_fwalk_sglue+0xc>
 800abb0:	4630      	mov	r0, r6
 800abb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abb6:	89ab      	ldrh	r3, [r5, #12]
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d907      	bls.n	800abcc <_fwalk_sglue+0x38>
 800abbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800abc0:	3301      	adds	r3, #1
 800abc2:	d003      	beq.n	800abcc <_fwalk_sglue+0x38>
 800abc4:	4629      	mov	r1, r5
 800abc6:	4638      	mov	r0, r7
 800abc8:	47c0      	blx	r8
 800abca:	4306      	orrs	r6, r0
 800abcc:	3568      	adds	r5, #104	; 0x68
 800abce:	e7e9      	b.n	800aba4 <_fwalk_sglue+0x10>

0800abd0 <sniprintf>:
 800abd0:	b40c      	push	{r2, r3}
 800abd2:	b530      	push	{r4, r5, lr}
 800abd4:	4b17      	ldr	r3, [pc, #92]	; (800ac34 <sniprintf+0x64>)
 800abd6:	1e0c      	subs	r4, r1, #0
 800abd8:	681d      	ldr	r5, [r3, #0]
 800abda:	b09d      	sub	sp, #116	; 0x74
 800abdc:	da08      	bge.n	800abf0 <sniprintf+0x20>
 800abde:	238b      	movs	r3, #139	; 0x8b
 800abe0:	602b      	str	r3, [r5, #0]
 800abe2:	f04f 30ff 	mov.w	r0, #4294967295
 800abe6:	b01d      	add	sp, #116	; 0x74
 800abe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800abec:	b002      	add	sp, #8
 800abee:	4770      	bx	lr
 800abf0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800abf4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800abf8:	bf14      	ite	ne
 800abfa:	f104 33ff 	addne.w	r3, r4, #4294967295
 800abfe:	4623      	moveq	r3, r4
 800ac00:	9304      	str	r3, [sp, #16]
 800ac02:	9307      	str	r3, [sp, #28]
 800ac04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ac08:	9002      	str	r0, [sp, #8]
 800ac0a:	9006      	str	r0, [sp, #24]
 800ac0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ac10:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ac12:	ab21      	add	r3, sp, #132	; 0x84
 800ac14:	a902      	add	r1, sp, #8
 800ac16:	4628      	mov	r0, r5
 800ac18:	9301      	str	r3, [sp, #4]
 800ac1a:	f000 faaf 	bl	800b17c <_svfiprintf_r>
 800ac1e:	1c43      	adds	r3, r0, #1
 800ac20:	bfbc      	itt	lt
 800ac22:	238b      	movlt	r3, #139	; 0x8b
 800ac24:	602b      	strlt	r3, [r5, #0]
 800ac26:	2c00      	cmp	r4, #0
 800ac28:	d0dd      	beq.n	800abe6 <sniprintf+0x16>
 800ac2a:	9b02      	ldr	r3, [sp, #8]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	701a      	strb	r2, [r3, #0]
 800ac30:	e7d9      	b.n	800abe6 <sniprintf+0x16>
 800ac32:	bf00      	nop
 800ac34:	20000074 	.word	0x20000074

0800ac38 <__sread>:
 800ac38:	b510      	push	{r4, lr}
 800ac3a:	460c      	mov	r4, r1
 800ac3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac40:	f000 f8c4 	bl	800adcc <_read_r>
 800ac44:	2800      	cmp	r0, #0
 800ac46:	bfab      	itete	ge
 800ac48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac4a:	89a3      	ldrhlt	r3, [r4, #12]
 800ac4c:	181b      	addge	r3, r3, r0
 800ac4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac52:	bfac      	ite	ge
 800ac54:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac56:	81a3      	strhlt	r3, [r4, #12]
 800ac58:	bd10      	pop	{r4, pc}

0800ac5a <__swrite>:
 800ac5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac5e:	461f      	mov	r7, r3
 800ac60:	898b      	ldrh	r3, [r1, #12]
 800ac62:	05db      	lsls	r3, r3, #23
 800ac64:	4605      	mov	r5, r0
 800ac66:	460c      	mov	r4, r1
 800ac68:	4616      	mov	r6, r2
 800ac6a:	d505      	bpl.n	800ac78 <__swrite+0x1e>
 800ac6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac70:	2302      	movs	r3, #2
 800ac72:	2200      	movs	r2, #0
 800ac74:	f000 f898 	bl	800ada8 <_lseek_r>
 800ac78:	89a3      	ldrh	r3, [r4, #12]
 800ac7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac82:	81a3      	strh	r3, [r4, #12]
 800ac84:	4632      	mov	r2, r6
 800ac86:	463b      	mov	r3, r7
 800ac88:	4628      	mov	r0, r5
 800ac8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac8e:	f000 b8af 	b.w	800adf0 <_write_r>

0800ac92 <__sseek>:
 800ac92:	b510      	push	{r4, lr}
 800ac94:	460c      	mov	r4, r1
 800ac96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac9a:	f000 f885 	bl	800ada8 <_lseek_r>
 800ac9e:	1c43      	adds	r3, r0, #1
 800aca0:	89a3      	ldrh	r3, [r4, #12]
 800aca2:	bf15      	itete	ne
 800aca4:	6560      	strne	r0, [r4, #84]	; 0x54
 800aca6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800acaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800acae:	81a3      	strheq	r3, [r4, #12]
 800acb0:	bf18      	it	ne
 800acb2:	81a3      	strhne	r3, [r4, #12]
 800acb4:	bd10      	pop	{r4, pc}

0800acb6 <__sclose>:
 800acb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acba:	f000 b865 	b.w	800ad88 <_close_r>

0800acbe <memset>:
 800acbe:	4402      	add	r2, r0
 800acc0:	4603      	mov	r3, r0
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d100      	bne.n	800acc8 <memset+0xa>
 800acc6:	4770      	bx	lr
 800acc8:	f803 1b01 	strb.w	r1, [r3], #1
 800accc:	e7f9      	b.n	800acc2 <memset+0x4>
	...

0800acd0 <strtok>:
 800acd0:	4b16      	ldr	r3, [pc, #88]	; (800ad2c <strtok+0x5c>)
 800acd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800acd4:	681e      	ldr	r6, [r3, #0]
 800acd6:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800acd8:	4605      	mov	r5, r0
 800acda:	b9fc      	cbnz	r4, 800ad1c <strtok+0x4c>
 800acdc:	2050      	movs	r0, #80	; 0x50
 800acde:	9101      	str	r1, [sp, #4]
 800ace0:	f000 f93e 	bl	800af60 <malloc>
 800ace4:	9901      	ldr	r1, [sp, #4]
 800ace6:	6470      	str	r0, [r6, #68]	; 0x44
 800ace8:	4602      	mov	r2, r0
 800acea:	b920      	cbnz	r0, 800acf6 <strtok+0x26>
 800acec:	4b10      	ldr	r3, [pc, #64]	; (800ad30 <strtok+0x60>)
 800acee:	4811      	ldr	r0, [pc, #68]	; (800ad34 <strtok+0x64>)
 800acf0:	215b      	movs	r1, #91	; 0x5b
 800acf2:	f000 f8cb 	bl	800ae8c <__assert_func>
 800acf6:	e9c0 4400 	strd	r4, r4, [r0]
 800acfa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800acfe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ad02:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ad06:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ad0a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ad0e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ad12:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ad16:	6184      	str	r4, [r0, #24]
 800ad18:	7704      	strb	r4, [r0, #28]
 800ad1a:	6244      	str	r4, [r0, #36]	; 0x24
 800ad1c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800ad1e:	2301      	movs	r3, #1
 800ad20:	4628      	mov	r0, r5
 800ad22:	b002      	add	sp, #8
 800ad24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad28:	f000 b806 	b.w	800ad38 <__strtok_r>
 800ad2c:	20000074 	.word	0x20000074
 800ad30:	0800c06d 	.word	0x0800c06d
 800ad34:	0800c084 	.word	0x0800c084

0800ad38 <__strtok_r>:
 800ad38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad3a:	b908      	cbnz	r0, 800ad40 <__strtok_r+0x8>
 800ad3c:	6810      	ldr	r0, [r2, #0]
 800ad3e:	b188      	cbz	r0, 800ad64 <__strtok_r+0x2c>
 800ad40:	4604      	mov	r4, r0
 800ad42:	4620      	mov	r0, r4
 800ad44:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ad48:	460f      	mov	r7, r1
 800ad4a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ad4e:	b91e      	cbnz	r6, 800ad58 <__strtok_r+0x20>
 800ad50:	b965      	cbnz	r5, 800ad6c <__strtok_r+0x34>
 800ad52:	6015      	str	r5, [r2, #0]
 800ad54:	4628      	mov	r0, r5
 800ad56:	e005      	b.n	800ad64 <__strtok_r+0x2c>
 800ad58:	42b5      	cmp	r5, r6
 800ad5a:	d1f6      	bne.n	800ad4a <__strtok_r+0x12>
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d1f0      	bne.n	800ad42 <__strtok_r+0xa>
 800ad60:	6014      	str	r4, [r2, #0]
 800ad62:	7003      	strb	r3, [r0, #0]
 800ad64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad66:	461c      	mov	r4, r3
 800ad68:	e00c      	b.n	800ad84 <__strtok_r+0x4c>
 800ad6a:	b915      	cbnz	r5, 800ad72 <__strtok_r+0x3a>
 800ad6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ad70:	460e      	mov	r6, r1
 800ad72:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ad76:	42ab      	cmp	r3, r5
 800ad78:	d1f7      	bne.n	800ad6a <__strtok_r+0x32>
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d0f3      	beq.n	800ad66 <__strtok_r+0x2e>
 800ad7e:	2300      	movs	r3, #0
 800ad80:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ad84:	6014      	str	r4, [r2, #0]
 800ad86:	e7ed      	b.n	800ad64 <__strtok_r+0x2c>

0800ad88 <_close_r>:
 800ad88:	b538      	push	{r3, r4, r5, lr}
 800ad8a:	4d06      	ldr	r5, [pc, #24]	; (800ada4 <_close_r+0x1c>)
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	4604      	mov	r4, r0
 800ad90:	4608      	mov	r0, r1
 800ad92:	602b      	str	r3, [r5, #0]
 800ad94:	f7f7 f923 	bl	8001fde <_close>
 800ad98:	1c43      	adds	r3, r0, #1
 800ad9a:	d102      	bne.n	800ada2 <_close_r+0x1a>
 800ad9c:	682b      	ldr	r3, [r5, #0]
 800ad9e:	b103      	cbz	r3, 800ada2 <_close_r+0x1a>
 800ada0:	6023      	str	r3, [r4, #0]
 800ada2:	bd38      	pop	{r3, r4, r5, pc}
 800ada4:	20002140 	.word	0x20002140

0800ada8 <_lseek_r>:
 800ada8:	b538      	push	{r3, r4, r5, lr}
 800adaa:	4d07      	ldr	r5, [pc, #28]	; (800adc8 <_lseek_r+0x20>)
 800adac:	4604      	mov	r4, r0
 800adae:	4608      	mov	r0, r1
 800adb0:	4611      	mov	r1, r2
 800adb2:	2200      	movs	r2, #0
 800adb4:	602a      	str	r2, [r5, #0]
 800adb6:	461a      	mov	r2, r3
 800adb8:	f7f7 f938 	bl	800202c <_lseek>
 800adbc:	1c43      	adds	r3, r0, #1
 800adbe:	d102      	bne.n	800adc6 <_lseek_r+0x1e>
 800adc0:	682b      	ldr	r3, [r5, #0]
 800adc2:	b103      	cbz	r3, 800adc6 <_lseek_r+0x1e>
 800adc4:	6023      	str	r3, [r4, #0]
 800adc6:	bd38      	pop	{r3, r4, r5, pc}
 800adc8:	20002140 	.word	0x20002140

0800adcc <_read_r>:
 800adcc:	b538      	push	{r3, r4, r5, lr}
 800adce:	4d07      	ldr	r5, [pc, #28]	; (800adec <_read_r+0x20>)
 800add0:	4604      	mov	r4, r0
 800add2:	4608      	mov	r0, r1
 800add4:	4611      	mov	r1, r2
 800add6:	2200      	movs	r2, #0
 800add8:	602a      	str	r2, [r5, #0]
 800adda:	461a      	mov	r2, r3
 800addc:	f7f7 f8c6 	bl	8001f6c <_read>
 800ade0:	1c43      	adds	r3, r0, #1
 800ade2:	d102      	bne.n	800adea <_read_r+0x1e>
 800ade4:	682b      	ldr	r3, [r5, #0]
 800ade6:	b103      	cbz	r3, 800adea <_read_r+0x1e>
 800ade8:	6023      	str	r3, [r4, #0]
 800adea:	bd38      	pop	{r3, r4, r5, pc}
 800adec:	20002140 	.word	0x20002140

0800adf0 <_write_r>:
 800adf0:	b538      	push	{r3, r4, r5, lr}
 800adf2:	4d07      	ldr	r5, [pc, #28]	; (800ae10 <_write_r+0x20>)
 800adf4:	4604      	mov	r4, r0
 800adf6:	4608      	mov	r0, r1
 800adf8:	4611      	mov	r1, r2
 800adfa:	2200      	movs	r2, #0
 800adfc:	602a      	str	r2, [r5, #0]
 800adfe:	461a      	mov	r2, r3
 800ae00:	f7f7 f8d1 	bl	8001fa6 <_write>
 800ae04:	1c43      	adds	r3, r0, #1
 800ae06:	d102      	bne.n	800ae0e <_write_r+0x1e>
 800ae08:	682b      	ldr	r3, [r5, #0]
 800ae0a:	b103      	cbz	r3, 800ae0e <_write_r+0x1e>
 800ae0c:	6023      	str	r3, [r4, #0]
 800ae0e:	bd38      	pop	{r3, r4, r5, pc}
 800ae10:	20002140 	.word	0x20002140

0800ae14 <__errno>:
 800ae14:	4b01      	ldr	r3, [pc, #4]	; (800ae1c <__errno+0x8>)
 800ae16:	6818      	ldr	r0, [r3, #0]
 800ae18:	4770      	bx	lr
 800ae1a:	bf00      	nop
 800ae1c:	20000074 	.word	0x20000074

0800ae20 <__libc_init_array>:
 800ae20:	b570      	push	{r4, r5, r6, lr}
 800ae22:	4d0d      	ldr	r5, [pc, #52]	; (800ae58 <__libc_init_array+0x38>)
 800ae24:	4c0d      	ldr	r4, [pc, #52]	; (800ae5c <__libc_init_array+0x3c>)
 800ae26:	1b64      	subs	r4, r4, r5
 800ae28:	10a4      	asrs	r4, r4, #2
 800ae2a:	2600      	movs	r6, #0
 800ae2c:	42a6      	cmp	r6, r4
 800ae2e:	d109      	bne.n	800ae44 <__libc_init_array+0x24>
 800ae30:	4d0b      	ldr	r5, [pc, #44]	; (800ae60 <__libc_init_array+0x40>)
 800ae32:	4c0c      	ldr	r4, [pc, #48]	; (800ae64 <__libc_init_array+0x44>)
 800ae34:	f000 fffa 	bl	800be2c <_init>
 800ae38:	1b64      	subs	r4, r4, r5
 800ae3a:	10a4      	asrs	r4, r4, #2
 800ae3c:	2600      	movs	r6, #0
 800ae3e:	42a6      	cmp	r6, r4
 800ae40:	d105      	bne.n	800ae4e <__libc_init_array+0x2e>
 800ae42:	bd70      	pop	{r4, r5, r6, pc}
 800ae44:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae48:	4798      	blx	r3
 800ae4a:	3601      	adds	r6, #1
 800ae4c:	e7ee      	b.n	800ae2c <__libc_init_array+0xc>
 800ae4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae52:	4798      	blx	r3
 800ae54:	3601      	adds	r6, #1
 800ae56:	e7f2      	b.n	800ae3e <__libc_init_array+0x1e>
 800ae58:	0800c150 	.word	0x0800c150
 800ae5c:	0800c150 	.word	0x0800c150
 800ae60:	0800c150 	.word	0x0800c150
 800ae64:	0800c154 	.word	0x0800c154

0800ae68 <__retarget_lock_init_recursive>:
 800ae68:	4770      	bx	lr

0800ae6a <__retarget_lock_acquire_recursive>:
 800ae6a:	4770      	bx	lr

0800ae6c <__retarget_lock_release_recursive>:
 800ae6c:	4770      	bx	lr

0800ae6e <memcpy>:
 800ae6e:	440a      	add	r2, r1
 800ae70:	4291      	cmp	r1, r2
 800ae72:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae76:	d100      	bne.n	800ae7a <memcpy+0xc>
 800ae78:	4770      	bx	lr
 800ae7a:	b510      	push	{r4, lr}
 800ae7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae80:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae84:	4291      	cmp	r1, r2
 800ae86:	d1f9      	bne.n	800ae7c <memcpy+0xe>
 800ae88:	bd10      	pop	{r4, pc}
	...

0800ae8c <__assert_func>:
 800ae8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae8e:	4614      	mov	r4, r2
 800ae90:	461a      	mov	r2, r3
 800ae92:	4b09      	ldr	r3, [pc, #36]	; (800aeb8 <__assert_func+0x2c>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4605      	mov	r5, r0
 800ae98:	68d8      	ldr	r0, [r3, #12]
 800ae9a:	b14c      	cbz	r4, 800aeb0 <__assert_func+0x24>
 800ae9c:	4b07      	ldr	r3, [pc, #28]	; (800aebc <__assert_func+0x30>)
 800ae9e:	9100      	str	r1, [sp, #0]
 800aea0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aea4:	4906      	ldr	r1, [pc, #24]	; (800aec0 <__assert_func+0x34>)
 800aea6:	462b      	mov	r3, r5
 800aea8:	f000 fca4 	bl	800b7f4 <fiprintf>
 800aeac:	f000 fcde 	bl	800b86c <abort>
 800aeb0:	4b04      	ldr	r3, [pc, #16]	; (800aec4 <__assert_func+0x38>)
 800aeb2:	461c      	mov	r4, r3
 800aeb4:	e7f3      	b.n	800ae9e <__assert_func+0x12>
 800aeb6:	bf00      	nop
 800aeb8:	20000074 	.word	0x20000074
 800aebc:	0800c0de 	.word	0x0800c0de
 800aec0:	0800c0eb 	.word	0x0800c0eb
 800aec4:	0800c119 	.word	0x0800c119

0800aec8 <_free_r>:
 800aec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aeca:	2900      	cmp	r1, #0
 800aecc:	d044      	beq.n	800af58 <_free_r+0x90>
 800aece:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aed2:	9001      	str	r0, [sp, #4]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	f1a1 0404 	sub.w	r4, r1, #4
 800aeda:	bfb8      	it	lt
 800aedc:	18e4      	addlt	r4, r4, r3
 800aede:	f000 f8e7 	bl	800b0b0 <__malloc_lock>
 800aee2:	4a1e      	ldr	r2, [pc, #120]	; (800af5c <_free_r+0x94>)
 800aee4:	9801      	ldr	r0, [sp, #4]
 800aee6:	6813      	ldr	r3, [r2, #0]
 800aee8:	b933      	cbnz	r3, 800aef8 <_free_r+0x30>
 800aeea:	6063      	str	r3, [r4, #4]
 800aeec:	6014      	str	r4, [r2, #0]
 800aeee:	b003      	add	sp, #12
 800aef0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aef4:	f000 b8e2 	b.w	800b0bc <__malloc_unlock>
 800aef8:	42a3      	cmp	r3, r4
 800aefa:	d908      	bls.n	800af0e <_free_r+0x46>
 800aefc:	6825      	ldr	r5, [r4, #0]
 800aefe:	1961      	adds	r1, r4, r5
 800af00:	428b      	cmp	r3, r1
 800af02:	bf01      	itttt	eq
 800af04:	6819      	ldreq	r1, [r3, #0]
 800af06:	685b      	ldreq	r3, [r3, #4]
 800af08:	1949      	addeq	r1, r1, r5
 800af0a:	6021      	streq	r1, [r4, #0]
 800af0c:	e7ed      	b.n	800aeea <_free_r+0x22>
 800af0e:	461a      	mov	r2, r3
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	b10b      	cbz	r3, 800af18 <_free_r+0x50>
 800af14:	42a3      	cmp	r3, r4
 800af16:	d9fa      	bls.n	800af0e <_free_r+0x46>
 800af18:	6811      	ldr	r1, [r2, #0]
 800af1a:	1855      	adds	r5, r2, r1
 800af1c:	42a5      	cmp	r5, r4
 800af1e:	d10b      	bne.n	800af38 <_free_r+0x70>
 800af20:	6824      	ldr	r4, [r4, #0]
 800af22:	4421      	add	r1, r4
 800af24:	1854      	adds	r4, r2, r1
 800af26:	42a3      	cmp	r3, r4
 800af28:	6011      	str	r1, [r2, #0]
 800af2a:	d1e0      	bne.n	800aeee <_free_r+0x26>
 800af2c:	681c      	ldr	r4, [r3, #0]
 800af2e:	685b      	ldr	r3, [r3, #4]
 800af30:	6053      	str	r3, [r2, #4]
 800af32:	440c      	add	r4, r1
 800af34:	6014      	str	r4, [r2, #0]
 800af36:	e7da      	b.n	800aeee <_free_r+0x26>
 800af38:	d902      	bls.n	800af40 <_free_r+0x78>
 800af3a:	230c      	movs	r3, #12
 800af3c:	6003      	str	r3, [r0, #0]
 800af3e:	e7d6      	b.n	800aeee <_free_r+0x26>
 800af40:	6825      	ldr	r5, [r4, #0]
 800af42:	1961      	adds	r1, r4, r5
 800af44:	428b      	cmp	r3, r1
 800af46:	bf04      	itt	eq
 800af48:	6819      	ldreq	r1, [r3, #0]
 800af4a:	685b      	ldreq	r3, [r3, #4]
 800af4c:	6063      	str	r3, [r4, #4]
 800af4e:	bf04      	itt	eq
 800af50:	1949      	addeq	r1, r1, r5
 800af52:	6021      	streq	r1, [r4, #0]
 800af54:	6054      	str	r4, [r2, #4]
 800af56:	e7ca      	b.n	800aeee <_free_r+0x26>
 800af58:	b003      	add	sp, #12
 800af5a:	bd30      	pop	{r4, r5, pc}
 800af5c:	20002148 	.word	0x20002148

0800af60 <malloc>:
 800af60:	4b02      	ldr	r3, [pc, #8]	; (800af6c <malloc+0xc>)
 800af62:	4601      	mov	r1, r0
 800af64:	6818      	ldr	r0, [r3, #0]
 800af66:	f000 b823 	b.w	800afb0 <_malloc_r>
 800af6a:	bf00      	nop
 800af6c:	20000074 	.word	0x20000074

0800af70 <sbrk_aligned>:
 800af70:	b570      	push	{r4, r5, r6, lr}
 800af72:	4e0e      	ldr	r6, [pc, #56]	; (800afac <sbrk_aligned+0x3c>)
 800af74:	460c      	mov	r4, r1
 800af76:	6831      	ldr	r1, [r6, #0]
 800af78:	4605      	mov	r5, r0
 800af7a:	b911      	cbnz	r1, 800af82 <sbrk_aligned+0x12>
 800af7c:	f000 fc66 	bl	800b84c <_sbrk_r>
 800af80:	6030      	str	r0, [r6, #0]
 800af82:	4621      	mov	r1, r4
 800af84:	4628      	mov	r0, r5
 800af86:	f000 fc61 	bl	800b84c <_sbrk_r>
 800af8a:	1c43      	adds	r3, r0, #1
 800af8c:	d00a      	beq.n	800afa4 <sbrk_aligned+0x34>
 800af8e:	1cc4      	adds	r4, r0, #3
 800af90:	f024 0403 	bic.w	r4, r4, #3
 800af94:	42a0      	cmp	r0, r4
 800af96:	d007      	beq.n	800afa8 <sbrk_aligned+0x38>
 800af98:	1a21      	subs	r1, r4, r0
 800af9a:	4628      	mov	r0, r5
 800af9c:	f000 fc56 	bl	800b84c <_sbrk_r>
 800afa0:	3001      	adds	r0, #1
 800afa2:	d101      	bne.n	800afa8 <sbrk_aligned+0x38>
 800afa4:	f04f 34ff 	mov.w	r4, #4294967295
 800afa8:	4620      	mov	r0, r4
 800afaa:	bd70      	pop	{r4, r5, r6, pc}
 800afac:	2000214c 	.word	0x2000214c

0800afb0 <_malloc_r>:
 800afb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afb4:	1ccd      	adds	r5, r1, #3
 800afb6:	f025 0503 	bic.w	r5, r5, #3
 800afba:	3508      	adds	r5, #8
 800afbc:	2d0c      	cmp	r5, #12
 800afbe:	bf38      	it	cc
 800afc0:	250c      	movcc	r5, #12
 800afc2:	2d00      	cmp	r5, #0
 800afc4:	4607      	mov	r7, r0
 800afc6:	db01      	blt.n	800afcc <_malloc_r+0x1c>
 800afc8:	42a9      	cmp	r1, r5
 800afca:	d905      	bls.n	800afd8 <_malloc_r+0x28>
 800afcc:	230c      	movs	r3, #12
 800afce:	603b      	str	r3, [r7, #0]
 800afd0:	2600      	movs	r6, #0
 800afd2:	4630      	mov	r0, r6
 800afd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afd8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b0ac <_malloc_r+0xfc>
 800afdc:	f000 f868 	bl	800b0b0 <__malloc_lock>
 800afe0:	f8d8 3000 	ldr.w	r3, [r8]
 800afe4:	461c      	mov	r4, r3
 800afe6:	bb5c      	cbnz	r4, 800b040 <_malloc_r+0x90>
 800afe8:	4629      	mov	r1, r5
 800afea:	4638      	mov	r0, r7
 800afec:	f7ff ffc0 	bl	800af70 <sbrk_aligned>
 800aff0:	1c43      	adds	r3, r0, #1
 800aff2:	4604      	mov	r4, r0
 800aff4:	d155      	bne.n	800b0a2 <_malloc_r+0xf2>
 800aff6:	f8d8 4000 	ldr.w	r4, [r8]
 800affa:	4626      	mov	r6, r4
 800affc:	2e00      	cmp	r6, #0
 800affe:	d145      	bne.n	800b08c <_malloc_r+0xdc>
 800b000:	2c00      	cmp	r4, #0
 800b002:	d048      	beq.n	800b096 <_malloc_r+0xe6>
 800b004:	6823      	ldr	r3, [r4, #0]
 800b006:	4631      	mov	r1, r6
 800b008:	4638      	mov	r0, r7
 800b00a:	eb04 0903 	add.w	r9, r4, r3
 800b00e:	f000 fc1d 	bl	800b84c <_sbrk_r>
 800b012:	4581      	cmp	r9, r0
 800b014:	d13f      	bne.n	800b096 <_malloc_r+0xe6>
 800b016:	6821      	ldr	r1, [r4, #0]
 800b018:	1a6d      	subs	r5, r5, r1
 800b01a:	4629      	mov	r1, r5
 800b01c:	4638      	mov	r0, r7
 800b01e:	f7ff ffa7 	bl	800af70 <sbrk_aligned>
 800b022:	3001      	adds	r0, #1
 800b024:	d037      	beq.n	800b096 <_malloc_r+0xe6>
 800b026:	6823      	ldr	r3, [r4, #0]
 800b028:	442b      	add	r3, r5
 800b02a:	6023      	str	r3, [r4, #0]
 800b02c:	f8d8 3000 	ldr.w	r3, [r8]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d038      	beq.n	800b0a6 <_malloc_r+0xf6>
 800b034:	685a      	ldr	r2, [r3, #4]
 800b036:	42a2      	cmp	r2, r4
 800b038:	d12b      	bne.n	800b092 <_malloc_r+0xe2>
 800b03a:	2200      	movs	r2, #0
 800b03c:	605a      	str	r2, [r3, #4]
 800b03e:	e00f      	b.n	800b060 <_malloc_r+0xb0>
 800b040:	6822      	ldr	r2, [r4, #0]
 800b042:	1b52      	subs	r2, r2, r5
 800b044:	d41f      	bmi.n	800b086 <_malloc_r+0xd6>
 800b046:	2a0b      	cmp	r2, #11
 800b048:	d917      	bls.n	800b07a <_malloc_r+0xca>
 800b04a:	1961      	adds	r1, r4, r5
 800b04c:	42a3      	cmp	r3, r4
 800b04e:	6025      	str	r5, [r4, #0]
 800b050:	bf18      	it	ne
 800b052:	6059      	strne	r1, [r3, #4]
 800b054:	6863      	ldr	r3, [r4, #4]
 800b056:	bf08      	it	eq
 800b058:	f8c8 1000 	streq.w	r1, [r8]
 800b05c:	5162      	str	r2, [r4, r5]
 800b05e:	604b      	str	r3, [r1, #4]
 800b060:	4638      	mov	r0, r7
 800b062:	f104 060b 	add.w	r6, r4, #11
 800b066:	f000 f829 	bl	800b0bc <__malloc_unlock>
 800b06a:	f026 0607 	bic.w	r6, r6, #7
 800b06e:	1d23      	adds	r3, r4, #4
 800b070:	1af2      	subs	r2, r6, r3
 800b072:	d0ae      	beq.n	800afd2 <_malloc_r+0x22>
 800b074:	1b9b      	subs	r3, r3, r6
 800b076:	50a3      	str	r3, [r4, r2]
 800b078:	e7ab      	b.n	800afd2 <_malloc_r+0x22>
 800b07a:	42a3      	cmp	r3, r4
 800b07c:	6862      	ldr	r2, [r4, #4]
 800b07e:	d1dd      	bne.n	800b03c <_malloc_r+0x8c>
 800b080:	f8c8 2000 	str.w	r2, [r8]
 800b084:	e7ec      	b.n	800b060 <_malloc_r+0xb0>
 800b086:	4623      	mov	r3, r4
 800b088:	6864      	ldr	r4, [r4, #4]
 800b08a:	e7ac      	b.n	800afe6 <_malloc_r+0x36>
 800b08c:	4634      	mov	r4, r6
 800b08e:	6876      	ldr	r6, [r6, #4]
 800b090:	e7b4      	b.n	800affc <_malloc_r+0x4c>
 800b092:	4613      	mov	r3, r2
 800b094:	e7cc      	b.n	800b030 <_malloc_r+0x80>
 800b096:	230c      	movs	r3, #12
 800b098:	603b      	str	r3, [r7, #0]
 800b09a:	4638      	mov	r0, r7
 800b09c:	f000 f80e 	bl	800b0bc <__malloc_unlock>
 800b0a0:	e797      	b.n	800afd2 <_malloc_r+0x22>
 800b0a2:	6025      	str	r5, [r4, #0]
 800b0a4:	e7dc      	b.n	800b060 <_malloc_r+0xb0>
 800b0a6:	605b      	str	r3, [r3, #4]
 800b0a8:	deff      	udf	#255	; 0xff
 800b0aa:	bf00      	nop
 800b0ac:	20002148 	.word	0x20002148

0800b0b0 <__malloc_lock>:
 800b0b0:	4801      	ldr	r0, [pc, #4]	; (800b0b8 <__malloc_lock+0x8>)
 800b0b2:	f7ff beda 	b.w	800ae6a <__retarget_lock_acquire_recursive>
 800b0b6:	bf00      	nop
 800b0b8:	20002144 	.word	0x20002144

0800b0bc <__malloc_unlock>:
 800b0bc:	4801      	ldr	r0, [pc, #4]	; (800b0c4 <__malloc_unlock+0x8>)
 800b0be:	f7ff bed5 	b.w	800ae6c <__retarget_lock_release_recursive>
 800b0c2:	bf00      	nop
 800b0c4:	20002144 	.word	0x20002144

0800b0c8 <__ssputs_r>:
 800b0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0cc:	688e      	ldr	r6, [r1, #8]
 800b0ce:	461f      	mov	r7, r3
 800b0d0:	42be      	cmp	r6, r7
 800b0d2:	680b      	ldr	r3, [r1, #0]
 800b0d4:	4682      	mov	sl, r0
 800b0d6:	460c      	mov	r4, r1
 800b0d8:	4690      	mov	r8, r2
 800b0da:	d82c      	bhi.n	800b136 <__ssputs_r+0x6e>
 800b0dc:	898a      	ldrh	r2, [r1, #12]
 800b0de:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b0e2:	d026      	beq.n	800b132 <__ssputs_r+0x6a>
 800b0e4:	6965      	ldr	r5, [r4, #20]
 800b0e6:	6909      	ldr	r1, [r1, #16]
 800b0e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b0ec:	eba3 0901 	sub.w	r9, r3, r1
 800b0f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b0f4:	1c7b      	adds	r3, r7, #1
 800b0f6:	444b      	add	r3, r9
 800b0f8:	106d      	asrs	r5, r5, #1
 800b0fa:	429d      	cmp	r5, r3
 800b0fc:	bf38      	it	cc
 800b0fe:	461d      	movcc	r5, r3
 800b100:	0553      	lsls	r3, r2, #21
 800b102:	d527      	bpl.n	800b154 <__ssputs_r+0x8c>
 800b104:	4629      	mov	r1, r5
 800b106:	f7ff ff53 	bl	800afb0 <_malloc_r>
 800b10a:	4606      	mov	r6, r0
 800b10c:	b360      	cbz	r0, 800b168 <__ssputs_r+0xa0>
 800b10e:	6921      	ldr	r1, [r4, #16]
 800b110:	464a      	mov	r2, r9
 800b112:	f7ff feac 	bl	800ae6e <memcpy>
 800b116:	89a3      	ldrh	r3, [r4, #12]
 800b118:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b11c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b120:	81a3      	strh	r3, [r4, #12]
 800b122:	6126      	str	r6, [r4, #16]
 800b124:	6165      	str	r5, [r4, #20]
 800b126:	444e      	add	r6, r9
 800b128:	eba5 0509 	sub.w	r5, r5, r9
 800b12c:	6026      	str	r6, [r4, #0]
 800b12e:	60a5      	str	r5, [r4, #8]
 800b130:	463e      	mov	r6, r7
 800b132:	42be      	cmp	r6, r7
 800b134:	d900      	bls.n	800b138 <__ssputs_r+0x70>
 800b136:	463e      	mov	r6, r7
 800b138:	6820      	ldr	r0, [r4, #0]
 800b13a:	4632      	mov	r2, r6
 800b13c:	4641      	mov	r1, r8
 800b13e:	f000 fb6b 	bl	800b818 <memmove>
 800b142:	68a3      	ldr	r3, [r4, #8]
 800b144:	1b9b      	subs	r3, r3, r6
 800b146:	60a3      	str	r3, [r4, #8]
 800b148:	6823      	ldr	r3, [r4, #0]
 800b14a:	4433      	add	r3, r6
 800b14c:	6023      	str	r3, [r4, #0]
 800b14e:	2000      	movs	r0, #0
 800b150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b154:	462a      	mov	r2, r5
 800b156:	f000 fb90 	bl	800b87a <_realloc_r>
 800b15a:	4606      	mov	r6, r0
 800b15c:	2800      	cmp	r0, #0
 800b15e:	d1e0      	bne.n	800b122 <__ssputs_r+0x5a>
 800b160:	6921      	ldr	r1, [r4, #16]
 800b162:	4650      	mov	r0, sl
 800b164:	f7ff feb0 	bl	800aec8 <_free_r>
 800b168:	230c      	movs	r3, #12
 800b16a:	f8ca 3000 	str.w	r3, [sl]
 800b16e:	89a3      	ldrh	r3, [r4, #12]
 800b170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b174:	81a3      	strh	r3, [r4, #12]
 800b176:	f04f 30ff 	mov.w	r0, #4294967295
 800b17a:	e7e9      	b.n	800b150 <__ssputs_r+0x88>

0800b17c <_svfiprintf_r>:
 800b17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b180:	4698      	mov	r8, r3
 800b182:	898b      	ldrh	r3, [r1, #12]
 800b184:	061b      	lsls	r3, r3, #24
 800b186:	b09d      	sub	sp, #116	; 0x74
 800b188:	4607      	mov	r7, r0
 800b18a:	460d      	mov	r5, r1
 800b18c:	4614      	mov	r4, r2
 800b18e:	d50e      	bpl.n	800b1ae <_svfiprintf_r+0x32>
 800b190:	690b      	ldr	r3, [r1, #16]
 800b192:	b963      	cbnz	r3, 800b1ae <_svfiprintf_r+0x32>
 800b194:	2140      	movs	r1, #64	; 0x40
 800b196:	f7ff ff0b 	bl	800afb0 <_malloc_r>
 800b19a:	6028      	str	r0, [r5, #0]
 800b19c:	6128      	str	r0, [r5, #16]
 800b19e:	b920      	cbnz	r0, 800b1aa <_svfiprintf_r+0x2e>
 800b1a0:	230c      	movs	r3, #12
 800b1a2:	603b      	str	r3, [r7, #0]
 800b1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a8:	e0d0      	b.n	800b34c <_svfiprintf_r+0x1d0>
 800b1aa:	2340      	movs	r3, #64	; 0x40
 800b1ac:	616b      	str	r3, [r5, #20]
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	9309      	str	r3, [sp, #36]	; 0x24
 800b1b2:	2320      	movs	r3, #32
 800b1b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1bc:	2330      	movs	r3, #48	; 0x30
 800b1be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b364 <_svfiprintf_r+0x1e8>
 800b1c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1c6:	f04f 0901 	mov.w	r9, #1
 800b1ca:	4623      	mov	r3, r4
 800b1cc:	469a      	mov	sl, r3
 800b1ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1d2:	b10a      	cbz	r2, 800b1d8 <_svfiprintf_r+0x5c>
 800b1d4:	2a25      	cmp	r2, #37	; 0x25
 800b1d6:	d1f9      	bne.n	800b1cc <_svfiprintf_r+0x50>
 800b1d8:	ebba 0b04 	subs.w	fp, sl, r4
 800b1dc:	d00b      	beq.n	800b1f6 <_svfiprintf_r+0x7a>
 800b1de:	465b      	mov	r3, fp
 800b1e0:	4622      	mov	r2, r4
 800b1e2:	4629      	mov	r1, r5
 800b1e4:	4638      	mov	r0, r7
 800b1e6:	f7ff ff6f 	bl	800b0c8 <__ssputs_r>
 800b1ea:	3001      	adds	r0, #1
 800b1ec:	f000 80a9 	beq.w	800b342 <_svfiprintf_r+0x1c6>
 800b1f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1f2:	445a      	add	r2, fp
 800b1f4:	9209      	str	r2, [sp, #36]	; 0x24
 800b1f6:	f89a 3000 	ldrb.w	r3, [sl]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	f000 80a1 	beq.w	800b342 <_svfiprintf_r+0x1c6>
 800b200:	2300      	movs	r3, #0
 800b202:	f04f 32ff 	mov.w	r2, #4294967295
 800b206:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b20a:	f10a 0a01 	add.w	sl, sl, #1
 800b20e:	9304      	str	r3, [sp, #16]
 800b210:	9307      	str	r3, [sp, #28]
 800b212:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b216:	931a      	str	r3, [sp, #104]	; 0x68
 800b218:	4654      	mov	r4, sl
 800b21a:	2205      	movs	r2, #5
 800b21c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b220:	4850      	ldr	r0, [pc, #320]	; (800b364 <_svfiprintf_r+0x1e8>)
 800b222:	f7f4 ffd5 	bl	80001d0 <memchr>
 800b226:	9a04      	ldr	r2, [sp, #16]
 800b228:	b9d8      	cbnz	r0, 800b262 <_svfiprintf_r+0xe6>
 800b22a:	06d0      	lsls	r0, r2, #27
 800b22c:	bf44      	itt	mi
 800b22e:	2320      	movmi	r3, #32
 800b230:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b234:	0711      	lsls	r1, r2, #28
 800b236:	bf44      	itt	mi
 800b238:	232b      	movmi	r3, #43	; 0x2b
 800b23a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b23e:	f89a 3000 	ldrb.w	r3, [sl]
 800b242:	2b2a      	cmp	r3, #42	; 0x2a
 800b244:	d015      	beq.n	800b272 <_svfiprintf_r+0xf6>
 800b246:	9a07      	ldr	r2, [sp, #28]
 800b248:	4654      	mov	r4, sl
 800b24a:	2000      	movs	r0, #0
 800b24c:	f04f 0c0a 	mov.w	ip, #10
 800b250:	4621      	mov	r1, r4
 800b252:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b256:	3b30      	subs	r3, #48	; 0x30
 800b258:	2b09      	cmp	r3, #9
 800b25a:	d94d      	bls.n	800b2f8 <_svfiprintf_r+0x17c>
 800b25c:	b1b0      	cbz	r0, 800b28c <_svfiprintf_r+0x110>
 800b25e:	9207      	str	r2, [sp, #28]
 800b260:	e014      	b.n	800b28c <_svfiprintf_r+0x110>
 800b262:	eba0 0308 	sub.w	r3, r0, r8
 800b266:	fa09 f303 	lsl.w	r3, r9, r3
 800b26a:	4313      	orrs	r3, r2
 800b26c:	9304      	str	r3, [sp, #16]
 800b26e:	46a2      	mov	sl, r4
 800b270:	e7d2      	b.n	800b218 <_svfiprintf_r+0x9c>
 800b272:	9b03      	ldr	r3, [sp, #12]
 800b274:	1d19      	adds	r1, r3, #4
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	9103      	str	r1, [sp, #12]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	bfbb      	ittet	lt
 800b27e:	425b      	neglt	r3, r3
 800b280:	f042 0202 	orrlt.w	r2, r2, #2
 800b284:	9307      	strge	r3, [sp, #28]
 800b286:	9307      	strlt	r3, [sp, #28]
 800b288:	bfb8      	it	lt
 800b28a:	9204      	strlt	r2, [sp, #16]
 800b28c:	7823      	ldrb	r3, [r4, #0]
 800b28e:	2b2e      	cmp	r3, #46	; 0x2e
 800b290:	d10c      	bne.n	800b2ac <_svfiprintf_r+0x130>
 800b292:	7863      	ldrb	r3, [r4, #1]
 800b294:	2b2a      	cmp	r3, #42	; 0x2a
 800b296:	d134      	bne.n	800b302 <_svfiprintf_r+0x186>
 800b298:	9b03      	ldr	r3, [sp, #12]
 800b29a:	1d1a      	adds	r2, r3, #4
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	9203      	str	r2, [sp, #12]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	bfb8      	it	lt
 800b2a4:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2a8:	3402      	adds	r4, #2
 800b2aa:	9305      	str	r3, [sp, #20]
 800b2ac:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b374 <_svfiprintf_r+0x1f8>
 800b2b0:	7821      	ldrb	r1, [r4, #0]
 800b2b2:	2203      	movs	r2, #3
 800b2b4:	4650      	mov	r0, sl
 800b2b6:	f7f4 ff8b 	bl	80001d0 <memchr>
 800b2ba:	b138      	cbz	r0, 800b2cc <_svfiprintf_r+0x150>
 800b2bc:	9b04      	ldr	r3, [sp, #16]
 800b2be:	eba0 000a 	sub.w	r0, r0, sl
 800b2c2:	2240      	movs	r2, #64	; 0x40
 800b2c4:	4082      	lsls	r2, r0
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	3401      	adds	r4, #1
 800b2ca:	9304      	str	r3, [sp, #16]
 800b2cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2d0:	4825      	ldr	r0, [pc, #148]	; (800b368 <_svfiprintf_r+0x1ec>)
 800b2d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2d6:	2206      	movs	r2, #6
 800b2d8:	f7f4 ff7a 	bl	80001d0 <memchr>
 800b2dc:	2800      	cmp	r0, #0
 800b2de:	d038      	beq.n	800b352 <_svfiprintf_r+0x1d6>
 800b2e0:	4b22      	ldr	r3, [pc, #136]	; (800b36c <_svfiprintf_r+0x1f0>)
 800b2e2:	bb1b      	cbnz	r3, 800b32c <_svfiprintf_r+0x1b0>
 800b2e4:	9b03      	ldr	r3, [sp, #12]
 800b2e6:	3307      	adds	r3, #7
 800b2e8:	f023 0307 	bic.w	r3, r3, #7
 800b2ec:	3308      	adds	r3, #8
 800b2ee:	9303      	str	r3, [sp, #12]
 800b2f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2f2:	4433      	add	r3, r6
 800b2f4:	9309      	str	r3, [sp, #36]	; 0x24
 800b2f6:	e768      	b.n	800b1ca <_svfiprintf_r+0x4e>
 800b2f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2fc:	460c      	mov	r4, r1
 800b2fe:	2001      	movs	r0, #1
 800b300:	e7a6      	b.n	800b250 <_svfiprintf_r+0xd4>
 800b302:	2300      	movs	r3, #0
 800b304:	3401      	adds	r4, #1
 800b306:	9305      	str	r3, [sp, #20]
 800b308:	4619      	mov	r1, r3
 800b30a:	f04f 0c0a 	mov.w	ip, #10
 800b30e:	4620      	mov	r0, r4
 800b310:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b314:	3a30      	subs	r2, #48	; 0x30
 800b316:	2a09      	cmp	r2, #9
 800b318:	d903      	bls.n	800b322 <_svfiprintf_r+0x1a6>
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d0c6      	beq.n	800b2ac <_svfiprintf_r+0x130>
 800b31e:	9105      	str	r1, [sp, #20]
 800b320:	e7c4      	b.n	800b2ac <_svfiprintf_r+0x130>
 800b322:	fb0c 2101 	mla	r1, ip, r1, r2
 800b326:	4604      	mov	r4, r0
 800b328:	2301      	movs	r3, #1
 800b32a:	e7f0      	b.n	800b30e <_svfiprintf_r+0x192>
 800b32c:	ab03      	add	r3, sp, #12
 800b32e:	9300      	str	r3, [sp, #0]
 800b330:	462a      	mov	r2, r5
 800b332:	4b0f      	ldr	r3, [pc, #60]	; (800b370 <_svfiprintf_r+0x1f4>)
 800b334:	a904      	add	r1, sp, #16
 800b336:	4638      	mov	r0, r7
 800b338:	f3af 8000 	nop.w
 800b33c:	1c42      	adds	r2, r0, #1
 800b33e:	4606      	mov	r6, r0
 800b340:	d1d6      	bne.n	800b2f0 <_svfiprintf_r+0x174>
 800b342:	89ab      	ldrh	r3, [r5, #12]
 800b344:	065b      	lsls	r3, r3, #25
 800b346:	f53f af2d 	bmi.w	800b1a4 <_svfiprintf_r+0x28>
 800b34a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b34c:	b01d      	add	sp, #116	; 0x74
 800b34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b352:	ab03      	add	r3, sp, #12
 800b354:	9300      	str	r3, [sp, #0]
 800b356:	462a      	mov	r2, r5
 800b358:	4b05      	ldr	r3, [pc, #20]	; (800b370 <_svfiprintf_r+0x1f4>)
 800b35a:	a904      	add	r1, sp, #16
 800b35c:	4638      	mov	r0, r7
 800b35e:	f000 f879 	bl	800b454 <_printf_i>
 800b362:	e7eb      	b.n	800b33c <_svfiprintf_r+0x1c0>
 800b364:	0800c11a 	.word	0x0800c11a
 800b368:	0800c124 	.word	0x0800c124
 800b36c:	00000000 	.word	0x00000000
 800b370:	0800b0c9 	.word	0x0800b0c9
 800b374:	0800c120 	.word	0x0800c120

0800b378 <_printf_common>:
 800b378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b37c:	4616      	mov	r6, r2
 800b37e:	4699      	mov	r9, r3
 800b380:	688a      	ldr	r2, [r1, #8]
 800b382:	690b      	ldr	r3, [r1, #16]
 800b384:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b388:	4293      	cmp	r3, r2
 800b38a:	bfb8      	it	lt
 800b38c:	4613      	movlt	r3, r2
 800b38e:	6033      	str	r3, [r6, #0]
 800b390:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b394:	4607      	mov	r7, r0
 800b396:	460c      	mov	r4, r1
 800b398:	b10a      	cbz	r2, 800b39e <_printf_common+0x26>
 800b39a:	3301      	adds	r3, #1
 800b39c:	6033      	str	r3, [r6, #0]
 800b39e:	6823      	ldr	r3, [r4, #0]
 800b3a0:	0699      	lsls	r1, r3, #26
 800b3a2:	bf42      	ittt	mi
 800b3a4:	6833      	ldrmi	r3, [r6, #0]
 800b3a6:	3302      	addmi	r3, #2
 800b3a8:	6033      	strmi	r3, [r6, #0]
 800b3aa:	6825      	ldr	r5, [r4, #0]
 800b3ac:	f015 0506 	ands.w	r5, r5, #6
 800b3b0:	d106      	bne.n	800b3c0 <_printf_common+0x48>
 800b3b2:	f104 0a19 	add.w	sl, r4, #25
 800b3b6:	68e3      	ldr	r3, [r4, #12]
 800b3b8:	6832      	ldr	r2, [r6, #0]
 800b3ba:	1a9b      	subs	r3, r3, r2
 800b3bc:	42ab      	cmp	r3, r5
 800b3be:	dc26      	bgt.n	800b40e <_printf_common+0x96>
 800b3c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b3c4:	1e13      	subs	r3, r2, #0
 800b3c6:	6822      	ldr	r2, [r4, #0]
 800b3c8:	bf18      	it	ne
 800b3ca:	2301      	movne	r3, #1
 800b3cc:	0692      	lsls	r2, r2, #26
 800b3ce:	d42b      	bmi.n	800b428 <_printf_common+0xb0>
 800b3d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b3d4:	4649      	mov	r1, r9
 800b3d6:	4638      	mov	r0, r7
 800b3d8:	47c0      	blx	r8
 800b3da:	3001      	adds	r0, #1
 800b3dc:	d01e      	beq.n	800b41c <_printf_common+0xa4>
 800b3de:	6823      	ldr	r3, [r4, #0]
 800b3e0:	6922      	ldr	r2, [r4, #16]
 800b3e2:	f003 0306 	and.w	r3, r3, #6
 800b3e6:	2b04      	cmp	r3, #4
 800b3e8:	bf02      	ittt	eq
 800b3ea:	68e5      	ldreq	r5, [r4, #12]
 800b3ec:	6833      	ldreq	r3, [r6, #0]
 800b3ee:	1aed      	subeq	r5, r5, r3
 800b3f0:	68a3      	ldr	r3, [r4, #8]
 800b3f2:	bf0c      	ite	eq
 800b3f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3f8:	2500      	movne	r5, #0
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	bfc4      	itt	gt
 800b3fe:	1a9b      	subgt	r3, r3, r2
 800b400:	18ed      	addgt	r5, r5, r3
 800b402:	2600      	movs	r6, #0
 800b404:	341a      	adds	r4, #26
 800b406:	42b5      	cmp	r5, r6
 800b408:	d11a      	bne.n	800b440 <_printf_common+0xc8>
 800b40a:	2000      	movs	r0, #0
 800b40c:	e008      	b.n	800b420 <_printf_common+0xa8>
 800b40e:	2301      	movs	r3, #1
 800b410:	4652      	mov	r2, sl
 800b412:	4649      	mov	r1, r9
 800b414:	4638      	mov	r0, r7
 800b416:	47c0      	blx	r8
 800b418:	3001      	adds	r0, #1
 800b41a:	d103      	bne.n	800b424 <_printf_common+0xac>
 800b41c:	f04f 30ff 	mov.w	r0, #4294967295
 800b420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b424:	3501      	adds	r5, #1
 800b426:	e7c6      	b.n	800b3b6 <_printf_common+0x3e>
 800b428:	18e1      	adds	r1, r4, r3
 800b42a:	1c5a      	adds	r2, r3, #1
 800b42c:	2030      	movs	r0, #48	; 0x30
 800b42e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b432:	4422      	add	r2, r4
 800b434:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b438:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b43c:	3302      	adds	r3, #2
 800b43e:	e7c7      	b.n	800b3d0 <_printf_common+0x58>
 800b440:	2301      	movs	r3, #1
 800b442:	4622      	mov	r2, r4
 800b444:	4649      	mov	r1, r9
 800b446:	4638      	mov	r0, r7
 800b448:	47c0      	blx	r8
 800b44a:	3001      	adds	r0, #1
 800b44c:	d0e6      	beq.n	800b41c <_printf_common+0xa4>
 800b44e:	3601      	adds	r6, #1
 800b450:	e7d9      	b.n	800b406 <_printf_common+0x8e>
	...

0800b454 <_printf_i>:
 800b454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b458:	7e0f      	ldrb	r7, [r1, #24]
 800b45a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b45c:	2f78      	cmp	r7, #120	; 0x78
 800b45e:	4691      	mov	r9, r2
 800b460:	4680      	mov	r8, r0
 800b462:	460c      	mov	r4, r1
 800b464:	469a      	mov	sl, r3
 800b466:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b46a:	d807      	bhi.n	800b47c <_printf_i+0x28>
 800b46c:	2f62      	cmp	r7, #98	; 0x62
 800b46e:	d80a      	bhi.n	800b486 <_printf_i+0x32>
 800b470:	2f00      	cmp	r7, #0
 800b472:	f000 80d4 	beq.w	800b61e <_printf_i+0x1ca>
 800b476:	2f58      	cmp	r7, #88	; 0x58
 800b478:	f000 80c0 	beq.w	800b5fc <_printf_i+0x1a8>
 800b47c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b480:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b484:	e03a      	b.n	800b4fc <_printf_i+0xa8>
 800b486:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b48a:	2b15      	cmp	r3, #21
 800b48c:	d8f6      	bhi.n	800b47c <_printf_i+0x28>
 800b48e:	a101      	add	r1, pc, #4	; (adr r1, 800b494 <_printf_i+0x40>)
 800b490:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b494:	0800b4ed 	.word	0x0800b4ed
 800b498:	0800b501 	.word	0x0800b501
 800b49c:	0800b47d 	.word	0x0800b47d
 800b4a0:	0800b47d 	.word	0x0800b47d
 800b4a4:	0800b47d 	.word	0x0800b47d
 800b4a8:	0800b47d 	.word	0x0800b47d
 800b4ac:	0800b501 	.word	0x0800b501
 800b4b0:	0800b47d 	.word	0x0800b47d
 800b4b4:	0800b47d 	.word	0x0800b47d
 800b4b8:	0800b47d 	.word	0x0800b47d
 800b4bc:	0800b47d 	.word	0x0800b47d
 800b4c0:	0800b605 	.word	0x0800b605
 800b4c4:	0800b52d 	.word	0x0800b52d
 800b4c8:	0800b5bf 	.word	0x0800b5bf
 800b4cc:	0800b47d 	.word	0x0800b47d
 800b4d0:	0800b47d 	.word	0x0800b47d
 800b4d4:	0800b627 	.word	0x0800b627
 800b4d8:	0800b47d 	.word	0x0800b47d
 800b4dc:	0800b52d 	.word	0x0800b52d
 800b4e0:	0800b47d 	.word	0x0800b47d
 800b4e4:	0800b47d 	.word	0x0800b47d
 800b4e8:	0800b5c7 	.word	0x0800b5c7
 800b4ec:	682b      	ldr	r3, [r5, #0]
 800b4ee:	1d1a      	adds	r2, r3, #4
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	602a      	str	r2, [r5, #0]
 800b4f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	e09f      	b.n	800b640 <_printf_i+0x1ec>
 800b500:	6820      	ldr	r0, [r4, #0]
 800b502:	682b      	ldr	r3, [r5, #0]
 800b504:	0607      	lsls	r7, r0, #24
 800b506:	f103 0104 	add.w	r1, r3, #4
 800b50a:	6029      	str	r1, [r5, #0]
 800b50c:	d501      	bpl.n	800b512 <_printf_i+0xbe>
 800b50e:	681e      	ldr	r6, [r3, #0]
 800b510:	e003      	b.n	800b51a <_printf_i+0xc6>
 800b512:	0646      	lsls	r6, r0, #25
 800b514:	d5fb      	bpl.n	800b50e <_printf_i+0xba>
 800b516:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b51a:	2e00      	cmp	r6, #0
 800b51c:	da03      	bge.n	800b526 <_printf_i+0xd2>
 800b51e:	232d      	movs	r3, #45	; 0x2d
 800b520:	4276      	negs	r6, r6
 800b522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b526:	485a      	ldr	r0, [pc, #360]	; (800b690 <_printf_i+0x23c>)
 800b528:	230a      	movs	r3, #10
 800b52a:	e012      	b.n	800b552 <_printf_i+0xfe>
 800b52c:	682b      	ldr	r3, [r5, #0]
 800b52e:	6820      	ldr	r0, [r4, #0]
 800b530:	1d19      	adds	r1, r3, #4
 800b532:	6029      	str	r1, [r5, #0]
 800b534:	0605      	lsls	r5, r0, #24
 800b536:	d501      	bpl.n	800b53c <_printf_i+0xe8>
 800b538:	681e      	ldr	r6, [r3, #0]
 800b53a:	e002      	b.n	800b542 <_printf_i+0xee>
 800b53c:	0641      	lsls	r1, r0, #25
 800b53e:	d5fb      	bpl.n	800b538 <_printf_i+0xe4>
 800b540:	881e      	ldrh	r6, [r3, #0]
 800b542:	4853      	ldr	r0, [pc, #332]	; (800b690 <_printf_i+0x23c>)
 800b544:	2f6f      	cmp	r7, #111	; 0x6f
 800b546:	bf0c      	ite	eq
 800b548:	2308      	moveq	r3, #8
 800b54a:	230a      	movne	r3, #10
 800b54c:	2100      	movs	r1, #0
 800b54e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b552:	6865      	ldr	r5, [r4, #4]
 800b554:	60a5      	str	r5, [r4, #8]
 800b556:	2d00      	cmp	r5, #0
 800b558:	bfa2      	ittt	ge
 800b55a:	6821      	ldrge	r1, [r4, #0]
 800b55c:	f021 0104 	bicge.w	r1, r1, #4
 800b560:	6021      	strge	r1, [r4, #0]
 800b562:	b90e      	cbnz	r6, 800b568 <_printf_i+0x114>
 800b564:	2d00      	cmp	r5, #0
 800b566:	d04b      	beq.n	800b600 <_printf_i+0x1ac>
 800b568:	4615      	mov	r5, r2
 800b56a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b56e:	fb03 6711 	mls	r7, r3, r1, r6
 800b572:	5dc7      	ldrb	r7, [r0, r7]
 800b574:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b578:	4637      	mov	r7, r6
 800b57a:	42bb      	cmp	r3, r7
 800b57c:	460e      	mov	r6, r1
 800b57e:	d9f4      	bls.n	800b56a <_printf_i+0x116>
 800b580:	2b08      	cmp	r3, #8
 800b582:	d10b      	bne.n	800b59c <_printf_i+0x148>
 800b584:	6823      	ldr	r3, [r4, #0]
 800b586:	07de      	lsls	r6, r3, #31
 800b588:	d508      	bpl.n	800b59c <_printf_i+0x148>
 800b58a:	6923      	ldr	r3, [r4, #16]
 800b58c:	6861      	ldr	r1, [r4, #4]
 800b58e:	4299      	cmp	r1, r3
 800b590:	bfde      	ittt	le
 800b592:	2330      	movle	r3, #48	; 0x30
 800b594:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b598:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b59c:	1b52      	subs	r2, r2, r5
 800b59e:	6122      	str	r2, [r4, #16]
 800b5a0:	f8cd a000 	str.w	sl, [sp]
 800b5a4:	464b      	mov	r3, r9
 800b5a6:	aa03      	add	r2, sp, #12
 800b5a8:	4621      	mov	r1, r4
 800b5aa:	4640      	mov	r0, r8
 800b5ac:	f7ff fee4 	bl	800b378 <_printf_common>
 800b5b0:	3001      	adds	r0, #1
 800b5b2:	d14a      	bne.n	800b64a <_printf_i+0x1f6>
 800b5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b8:	b004      	add	sp, #16
 800b5ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5be:	6823      	ldr	r3, [r4, #0]
 800b5c0:	f043 0320 	orr.w	r3, r3, #32
 800b5c4:	6023      	str	r3, [r4, #0]
 800b5c6:	4833      	ldr	r0, [pc, #204]	; (800b694 <_printf_i+0x240>)
 800b5c8:	2778      	movs	r7, #120	; 0x78
 800b5ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b5ce:	6823      	ldr	r3, [r4, #0]
 800b5d0:	6829      	ldr	r1, [r5, #0]
 800b5d2:	061f      	lsls	r7, r3, #24
 800b5d4:	f851 6b04 	ldr.w	r6, [r1], #4
 800b5d8:	d402      	bmi.n	800b5e0 <_printf_i+0x18c>
 800b5da:	065f      	lsls	r7, r3, #25
 800b5dc:	bf48      	it	mi
 800b5de:	b2b6      	uxthmi	r6, r6
 800b5e0:	07df      	lsls	r7, r3, #31
 800b5e2:	bf48      	it	mi
 800b5e4:	f043 0320 	orrmi.w	r3, r3, #32
 800b5e8:	6029      	str	r1, [r5, #0]
 800b5ea:	bf48      	it	mi
 800b5ec:	6023      	strmi	r3, [r4, #0]
 800b5ee:	b91e      	cbnz	r6, 800b5f8 <_printf_i+0x1a4>
 800b5f0:	6823      	ldr	r3, [r4, #0]
 800b5f2:	f023 0320 	bic.w	r3, r3, #32
 800b5f6:	6023      	str	r3, [r4, #0]
 800b5f8:	2310      	movs	r3, #16
 800b5fa:	e7a7      	b.n	800b54c <_printf_i+0xf8>
 800b5fc:	4824      	ldr	r0, [pc, #144]	; (800b690 <_printf_i+0x23c>)
 800b5fe:	e7e4      	b.n	800b5ca <_printf_i+0x176>
 800b600:	4615      	mov	r5, r2
 800b602:	e7bd      	b.n	800b580 <_printf_i+0x12c>
 800b604:	682b      	ldr	r3, [r5, #0]
 800b606:	6826      	ldr	r6, [r4, #0]
 800b608:	6961      	ldr	r1, [r4, #20]
 800b60a:	1d18      	adds	r0, r3, #4
 800b60c:	6028      	str	r0, [r5, #0]
 800b60e:	0635      	lsls	r5, r6, #24
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	d501      	bpl.n	800b618 <_printf_i+0x1c4>
 800b614:	6019      	str	r1, [r3, #0]
 800b616:	e002      	b.n	800b61e <_printf_i+0x1ca>
 800b618:	0670      	lsls	r0, r6, #25
 800b61a:	d5fb      	bpl.n	800b614 <_printf_i+0x1c0>
 800b61c:	8019      	strh	r1, [r3, #0]
 800b61e:	2300      	movs	r3, #0
 800b620:	6123      	str	r3, [r4, #16]
 800b622:	4615      	mov	r5, r2
 800b624:	e7bc      	b.n	800b5a0 <_printf_i+0x14c>
 800b626:	682b      	ldr	r3, [r5, #0]
 800b628:	1d1a      	adds	r2, r3, #4
 800b62a:	602a      	str	r2, [r5, #0]
 800b62c:	681d      	ldr	r5, [r3, #0]
 800b62e:	6862      	ldr	r2, [r4, #4]
 800b630:	2100      	movs	r1, #0
 800b632:	4628      	mov	r0, r5
 800b634:	f7f4 fdcc 	bl	80001d0 <memchr>
 800b638:	b108      	cbz	r0, 800b63e <_printf_i+0x1ea>
 800b63a:	1b40      	subs	r0, r0, r5
 800b63c:	6060      	str	r0, [r4, #4]
 800b63e:	6863      	ldr	r3, [r4, #4]
 800b640:	6123      	str	r3, [r4, #16]
 800b642:	2300      	movs	r3, #0
 800b644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b648:	e7aa      	b.n	800b5a0 <_printf_i+0x14c>
 800b64a:	6923      	ldr	r3, [r4, #16]
 800b64c:	462a      	mov	r2, r5
 800b64e:	4649      	mov	r1, r9
 800b650:	4640      	mov	r0, r8
 800b652:	47d0      	blx	sl
 800b654:	3001      	adds	r0, #1
 800b656:	d0ad      	beq.n	800b5b4 <_printf_i+0x160>
 800b658:	6823      	ldr	r3, [r4, #0]
 800b65a:	079b      	lsls	r3, r3, #30
 800b65c:	d413      	bmi.n	800b686 <_printf_i+0x232>
 800b65e:	68e0      	ldr	r0, [r4, #12]
 800b660:	9b03      	ldr	r3, [sp, #12]
 800b662:	4298      	cmp	r0, r3
 800b664:	bfb8      	it	lt
 800b666:	4618      	movlt	r0, r3
 800b668:	e7a6      	b.n	800b5b8 <_printf_i+0x164>
 800b66a:	2301      	movs	r3, #1
 800b66c:	4632      	mov	r2, r6
 800b66e:	4649      	mov	r1, r9
 800b670:	4640      	mov	r0, r8
 800b672:	47d0      	blx	sl
 800b674:	3001      	adds	r0, #1
 800b676:	d09d      	beq.n	800b5b4 <_printf_i+0x160>
 800b678:	3501      	adds	r5, #1
 800b67a:	68e3      	ldr	r3, [r4, #12]
 800b67c:	9903      	ldr	r1, [sp, #12]
 800b67e:	1a5b      	subs	r3, r3, r1
 800b680:	42ab      	cmp	r3, r5
 800b682:	dcf2      	bgt.n	800b66a <_printf_i+0x216>
 800b684:	e7eb      	b.n	800b65e <_printf_i+0x20a>
 800b686:	2500      	movs	r5, #0
 800b688:	f104 0619 	add.w	r6, r4, #25
 800b68c:	e7f5      	b.n	800b67a <_printf_i+0x226>
 800b68e:	bf00      	nop
 800b690:	0800c12b 	.word	0x0800c12b
 800b694:	0800c13c 	.word	0x0800c13c

0800b698 <__sflush_r>:
 800b698:	898a      	ldrh	r2, [r1, #12]
 800b69a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b69e:	4605      	mov	r5, r0
 800b6a0:	0710      	lsls	r0, r2, #28
 800b6a2:	460c      	mov	r4, r1
 800b6a4:	d458      	bmi.n	800b758 <__sflush_r+0xc0>
 800b6a6:	684b      	ldr	r3, [r1, #4]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	dc05      	bgt.n	800b6b8 <__sflush_r+0x20>
 800b6ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	dc02      	bgt.n	800b6b8 <__sflush_r+0x20>
 800b6b2:	2000      	movs	r0, #0
 800b6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6ba:	2e00      	cmp	r6, #0
 800b6bc:	d0f9      	beq.n	800b6b2 <__sflush_r+0x1a>
 800b6be:	2300      	movs	r3, #0
 800b6c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b6c4:	682f      	ldr	r7, [r5, #0]
 800b6c6:	6a21      	ldr	r1, [r4, #32]
 800b6c8:	602b      	str	r3, [r5, #0]
 800b6ca:	d032      	beq.n	800b732 <__sflush_r+0x9a>
 800b6cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b6ce:	89a3      	ldrh	r3, [r4, #12]
 800b6d0:	075a      	lsls	r2, r3, #29
 800b6d2:	d505      	bpl.n	800b6e0 <__sflush_r+0x48>
 800b6d4:	6863      	ldr	r3, [r4, #4]
 800b6d6:	1ac0      	subs	r0, r0, r3
 800b6d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b6da:	b10b      	cbz	r3, 800b6e0 <__sflush_r+0x48>
 800b6dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b6de:	1ac0      	subs	r0, r0, r3
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6e6:	6a21      	ldr	r1, [r4, #32]
 800b6e8:	4628      	mov	r0, r5
 800b6ea:	47b0      	blx	r6
 800b6ec:	1c43      	adds	r3, r0, #1
 800b6ee:	89a3      	ldrh	r3, [r4, #12]
 800b6f0:	d106      	bne.n	800b700 <__sflush_r+0x68>
 800b6f2:	6829      	ldr	r1, [r5, #0]
 800b6f4:	291d      	cmp	r1, #29
 800b6f6:	d82b      	bhi.n	800b750 <__sflush_r+0xb8>
 800b6f8:	4a29      	ldr	r2, [pc, #164]	; (800b7a0 <__sflush_r+0x108>)
 800b6fa:	410a      	asrs	r2, r1
 800b6fc:	07d6      	lsls	r6, r2, #31
 800b6fe:	d427      	bmi.n	800b750 <__sflush_r+0xb8>
 800b700:	2200      	movs	r2, #0
 800b702:	6062      	str	r2, [r4, #4]
 800b704:	04d9      	lsls	r1, r3, #19
 800b706:	6922      	ldr	r2, [r4, #16]
 800b708:	6022      	str	r2, [r4, #0]
 800b70a:	d504      	bpl.n	800b716 <__sflush_r+0x7e>
 800b70c:	1c42      	adds	r2, r0, #1
 800b70e:	d101      	bne.n	800b714 <__sflush_r+0x7c>
 800b710:	682b      	ldr	r3, [r5, #0]
 800b712:	b903      	cbnz	r3, 800b716 <__sflush_r+0x7e>
 800b714:	6560      	str	r0, [r4, #84]	; 0x54
 800b716:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b718:	602f      	str	r7, [r5, #0]
 800b71a:	2900      	cmp	r1, #0
 800b71c:	d0c9      	beq.n	800b6b2 <__sflush_r+0x1a>
 800b71e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b722:	4299      	cmp	r1, r3
 800b724:	d002      	beq.n	800b72c <__sflush_r+0x94>
 800b726:	4628      	mov	r0, r5
 800b728:	f7ff fbce 	bl	800aec8 <_free_r>
 800b72c:	2000      	movs	r0, #0
 800b72e:	6360      	str	r0, [r4, #52]	; 0x34
 800b730:	e7c0      	b.n	800b6b4 <__sflush_r+0x1c>
 800b732:	2301      	movs	r3, #1
 800b734:	4628      	mov	r0, r5
 800b736:	47b0      	blx	r6
 800b738:	1c41      	adds	r1, r0, #1
 800b73a:	d1c8      	bne.n	800b6ce <__sflush_r+0x36>
 800b73c:	682b      	ldr	r3, [r5, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d0c5      	beq.n	800b6ce <__sflush_r+0x36>
 800b742:	2b1d      	cmp	r3, #29
 800b744:	d001      	beq.n	800b74a <__sflush_r+0xb2>
 800b746:	2b16      	cmp	r3, #22
 800b748:	d101      	bne.n	800b74e <__sflush_r+0xb6>
 800b74a:	602f      	str	r7, [r5, #0]
 800b74c:	e7b1      	b.n	800b6b2 <__sflush_r+0x1a>
 800b74e:	89a3      	ldrh	r3, [r4, #12]
 800b750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b754:	81a3      	strh	r3, [r4, #12]
 800b756:	e7ad      	b.n	800b6b4 <__sflush_r+0x1c>
 800b758:	690f      	ldr	r7, [r1, #16]
 800b75a:	2f00      	cmp	r7, #0
 800b75c:	d0a9      	beq.n	800b6b2 <__sflush_r+0x1a>
 800b75e:	0793      	lsls	r3, r2, #30
 800b760:	680e      	ldr	r6, [r1, #0]
 800b762:	bf08      	it	eq
 800b764:	694b      	ldreq	r3, [r1, #20]
 800b766:	600f      	str	r7, [r1, #0]
 800b768:	bf18      	it	ne
 800b76a:	2300      	movne	r3, #0
 800b76c:	eba6 0807 	sub.w	r8, r6, r7
 800b770:	608b      	str	r3, [r1, #8]
 800b772:	f1b8 0f00 	cmp.w	r8, #0
 800b776:	dd9c      	ble.n	800b6b2 <__sflush_r+0x1a>
 800b778:	6a21      	ldr	r1, [r4, #32]
 800b77a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b77c:	4643      	mov	r3, r8
 800b77e:	463a      	mov	r2, r7
 800b780:	4628      	mov	r0, r5
 800b782:	47b0      	blx	r6
 800b784:	2800      	cmp	r0, #0
 800b786:	dc06      	bgt.n	800b796 <__sflush_r+0xfe>
 800b788:	89a3      	ldrh	r3, [r4, #12]
 800b78a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b78e:	81a3      	strh	r3, [r4, #12]
 800b790:	f04f 30ff 	mov.w	r0, #4294967295
 800b794:	e78e      	b.n	800b6b4 <__sflush_r+0x1c>
 800b796:	4407      	add	r7, r0
 800b798:	eba8 0800 	sub.w	r8, r8, r0
 800b79c:	e7e9      	b.n	800b772 <__sflush_r+0xda>
 800b79e:	bf00      	nop
 800b7a0:	dfbffffe 	.word	0xdfbffffe

0800b7a4 <_fflush_r>:
 800b7a4:	b538      	push	{r3, r4, r5, lr}
 800b7a6:	690b      	ldr	r3, [r1, #16]
 800b7a8:	4605      	mov	r5, r0
 800b7aa:	460c      	mov	r4, r1
 800b7ac:	b913      	cbnz	r3, 800b7b4 <_fflush_r+0x10>
 800b7ae:	2500      	movs	r5, #0
 800b7b0:	4628      	mov	r0, r5
 800b7b2:	bd38      	pop	{r3, r4, r5, pc}
 800b7b4:	b118      	cbz	r0, 800b7be <_fflush_r+0x1a>
 800b7b6:	6a03      	ldr	r3, [r0, #32]
 800b7b8:	b90b      	cbnz	r3, 800b7be <_fflush_r+0x1a>
 800b7ba:	f7ff f9d3 	bl	800ab64 <__sinit>
 800b7be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d0f3      	beq.n	800b7ae <_fflush_r+0xa>
 800b7c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b7c8:	07d0      	lsls	r0, r2, #31
 800b7ca:	d404      	bmi.n	800b7d6 <_fflush_r+0x32>
 800b7cc:	0599      	lsls	r1, r3, #22
 800b7ce:	d402      	bmi.n	800b7d6 <_fflush_r+0x32>
 800b7d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7d2:	f7ff fb4a 	bl	800ae6a <__retarget_lock_acquire_recursive>
 800b7d6:	4628      	mov	r0, r5
 800b7d8:	4621      	mov	r1, r4
 800b7da:	f7ff ff5d 	bl	800b698 <__sflush_r>
 800b7de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7e0:	07da      	lsls	r2, r3, #31
 800b7e2:	4605      	mov	r5, r0
 800b7e4:	d4e4      	bmi.n	800b7b0 <_fflush_r+0xc>
 800b7e6:	89a3      	ldrh	r3, [r4, #12]
 800b7e8:	059b      	lsls	r3, r3, #22
 800b7ea:	d4e1      	bmi.n	800b7b0 <_fflush_r+0xc>
 800b7ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7ee:	f7ff fb3d 	bl	800ae6c <__retarget_lock_release_recursive>
 800b7f2:	e7dd      	b.n	800b7b0 <_fflush_r+0xc>

0800b7f4 <fiprintf>:
 800b7f4:	b40e      	push	{r1, r2, r3}
 800b7f6:	b503      	push	{r0, r1, lr}
 800b7f8:	4601      	mov	r1, r0
 800b7fa:	ab03      	add	r3, sp, #12
 800b7fc:	4805      	ldr	r0, [pc, #20]	; (800b814 <fiprintf+0x20>)
 800b7fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800b802:	6800      	ldr	r0, [r0, #0]
 800b804:	9301      	str	r3, [sp, #4]
 800b806:	f000 f891 	bl	800b92c <_vfiprintf_r>
 800b80a:	b002      	add	sp, #8
 800b80c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b810:	b003      	add	sp, #12
 800b812:	4770      	bx	lr
 800b814:	20000074 	.word	0x20000074

0800b818 <memmove>:
 800b818:	4288      	cmp	r0, r1
 800b81a:	b510      	push	{r4, lr}
 800b81c:	eb01 0402 	add.w	r4, r1, r2
 800b820:	d902      	bls.n	800b828 <memmove+0x10>
 800b822:	4284      	cmp	r4, r0
 800b824:	4623      	mov	r3, r4
 800b826:	d807      	bhi.n	800b838 <memmove+0x20>
 800b828:	1e43      	subs	r3, r0, #1
 800b82a:	42a1      	cmp	r1, r4
 800b82c:	d008      	beq.n	800b840 <memmove+0x28>
 800b82e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b832:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b836:	e7f8      	b.n	800b82a <memmove+0x12>
 800b838:	4402      	add	r2, r0
 800b83a:	4601      	mov	r1, r0
 800b83c:	428a      	cmp	r2, r1
 800b83e:	d100      	bne.n	800b842 <memmove+0x2a>
 800b840:	bd10      	pop	{r4, pc}
 800b842:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b846:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b84a:	e7f7      	b.n	800b83c <memmove+0x24>

0800b84c <_sbrk_r>:
 800b84c:	b538      	push	{r3, r4, r5, lr}
 800b84e:	4d06      	ldr	r5, [pc, #24]	; (800b868 <_sbrk_r+0x1c>)
 800b850:	2300      	movs	r3, #0
 800b852:	4604      	mov	r4, r0
 800b854:	4608      	mov	r0, r1
 800b856:	602b      	str	r3, [r5, #0]
 800b858:	f7f6 fbf6 	bl	8002048 <_sbrk>
 800b85c:	1c43      	adds	r3, r0, #1
 800b85e:	d102      	bne.n	800b866 <_sbrk_r+0x1a>
 800b860:	682b      	ldr	r3, [r5, #0]
 800b862:	b103      	cbz	r3, 800b866 <_sbrk_r+0x1a>
 800b864:	6023      	str	r3, [r4, #0]
 800b866:	bd38      	pop	{r3, r4, r5, pc}
 800b868:	20002140 	.word	0x20002140

0800b86c <abort>:
 800b86c:	b508      	push	{r3, lr}
 800b86e:	2006      	movs	r0, #6
 800b870:	f000 fa34 	bl	800bcdc <raise>
 800b874:	2001      	movs	r0, #1
 800b876:	f7f6 fb6f 	bl	8001f58 <_exit>

0800b87a <_realloc_r>:
 800b87a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b87e:	4680      	mov	r8, r0
 800b880:	4614      	mov	r4, r2
 800b882:	460e      	mov	r6, r1
 800b884:	b921      	cbnz	r1, 800b890 <_realloc_r+0x16>
 800b886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b88a:	4611      	mov	r1, r2
 800b88c:	f7ff bb90 	b.w	800afb0 <_malloc_r>
 800b890:	b92a      	cbnz	r2, 800b89e <_realloc_r+0x24>
 800b892:	f7ff fb19 	bl	800aec8 <_free_r>
 800b896:	4625      	mov	r5, r4
 800b898:	4628      	mov	r0, r5
 800b89a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b89e:	f000 fa39 	bl	800bd14 <_malloc_usable_size_r>
 800b8a2:	4284      	cmp	r4, r0
 800b8a4:	4607      	mov	r7, r0
 800b8a6:	d802      	bhi.n	800b8ae <_realloc_r+0x34>
 800b8a8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b8ac:	d812      	bhi.n	800b8d4 <_realloc_r+0x5a>
 800b8ae:	4621      	mov	r1, r4
 800b8b0:	4640      	mov	r0, r8
 800b8b2:	f7ff fb7d 	bl	800afb0 <_malloc_r>
 800b8b6:	4605      	mov	r5, r0
 800b8b8:	2800      	cmp	r0, #0
 800b8ba:	d0ed      	beq.n	800b898 <_realloc_r+0x1e>
 800b8bc:	42bc      	cmp	r4, r7
 800b8be:	4622      	mov	r2, r4
 800b8c0:	4631      	mov	r1, r6
 800b8c2:	bf28      	it	cs
 800b8c4:	463a      	movcs	r2, r7
 800b8c6:	f7ff fad2 	bl	800ae6e <memcpy>
 800b8ca:	4631      	mov	r1, r6
 800b8cc:	4640      	mov	r0, r8
 800b8ce:	f7ff fafb 	bl	800aec8 <_free_r>
 800b8d2:	e7e1      	b.n	800b898 <_realloc_r+0x1e>
 800b8d4:	4635      	mov	r5, r6
 800b8d6:	e7df      	b.n	800b898 <_realloc_r+0x1e>

0800b8d8 <__sfputc_r>:
 800b8d8:	6893      	ldr	r3, [r2, #8]
 800b8da:	3b01      	subs	r3, #1
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	b410      	push	{r4}
 800b8e0:	6093      	str	r3, [r2, #8]
 800b8e2:	da08      	bge.n	800b8f6 <__sfputc_r+0x1e>
 800b8e4:	6994      	ldr	r4, [r2, #24]
 800b8e6:	42a3      	cmp	r3, r4
 800b8e8:	db01      	blt.n	800b8ee <__sfputc_r+0x16>
 800b8ea:	290a      	cmp	r1, #10
 800b8ec:	d103      	bne.n	800b8f6 <__sfputc_r+0x1e>
 800b8ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8f2:	f000 b935 	b.w	800bb60 <__swbuf_r>
 800b8f6:	6813      	ldr	r3, [r2, #0]
 800b8f8:	1c58      	adds	r0, r3, #1
 800b8fa:	6010      	str	r0, [r2, #0]
 800b8fc:	7019      	strb	r1, [r3, #0]
 800b8fe:	4608      	mov	r0, r1
 800b900:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b904:	4770      	bx	lr

0800b906 <__sfputs_r>:
 800b906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b908:	4606      	mov	r6, r0
 800b90a:	460f      	mov	r7, r1
 800b90c:	4614      	mov	r4, r2
 800b90e:	18d5      	adds	r5, r2, r3
 800b910:	42ac      	cmp	r4, r5
 800b912:	d101      	bne.n	800b918 <__sfputs_r+0x12>
 800b914:	2000      	movs	r0, #0
 800b916:	e007      	b.n	800b928 <__sfputs_r+0x22>
 800b918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b91c:	463a      	mov	r2, r7
 800b91e:	4630      	mov	r0, r6
 800b920:	f7ff ffda 	bl	800b8d8 <__sfputc_r>
 800b924:	1c43      	adds	r3, r0, #1
 800b926:	d1f3      	bne.n	800b910 <__sfputs_r+0xa>
 800b928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b92c <_vfiprintf_r>:
 800b92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b930:	460d      	mov	r5, r1
 800b932:	b09d      	sub	sp, #116	; 0x74
 800b934:	4614      	mov	r4, r2
 800b936:	4698      	mov	r8, r3
 800b938:	4606      	mov	r6, r0
 800b93a:	b118      	cbz	r0, 800b944 <_vfiprintf_r+0x18>
 800b93c:	6a03      	ldr	r3, [r0, #32]
 800b93e:	b90b      	cbnz	r3, 800b944 <_vfiprintf_r+0x18>
 800b940:	f7ff f910 	bl	800ab64 <__sinit>
 800b944:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b946:	07d9      	lsls	r1, r3, #31
 800b948:	d405      	bmi.n	800b956 <_vfiprintf_r+0x2a>
 800b94a:	89ab      	ldrh	r3, [r5, #12]
 800b94c:	059a      	lsls	r2, r3, #22
 800b94e:	d402      	bmi.n	800b956 <_vfiprintf_r+0x2a>
 800b950:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b952:	f7ff fa8a 	bl	800ae6a <__retarget_lock_acquire_recursive>
 800b956:	89ab      	ldrh	r3, [r5, #12]
 800b958:	071b      	lsls	r3, r3, #28
 800b95a:	d501      	bpl.n	800b960 <_vfiprintf_r+0x34>
 800b95c:	692b      	ldr	r3, [r5, #16]
 800b95e:	b99b      	cbnz	r3, 800b988 <_vfiprintf_r+0x5c>
 800b960:	4629      	mov	r1, r5
 800b962:	4630      	mov	r0, r6
 800b964:	f000 f93a 	bl	800bbdc <__swsetup_r>
 800b968:	b170      	cbz	r0, 800b988 <_vfiprintf_r+0x5c>
 800b96a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b96c:	07dc      	lsls	r4, r3, #31
 800b96e:	d504      	bpl.n	800b97a <_vfiprintf_r+0x4e>
 800b970:	f04f 30ff 	mov.w	r0, #4294967295
 800b974:	b01d      	add	sp, #116	; 0x74
 800b976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b97a:	89ab      	ldrh	r3, [r5, #12]
 800b97c:	0598      	lsls	r0, r3, #22
 800b97e:	d4f7      	bmi.n	800b970 <_vfiprintf_r+0x44>
 800b980:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b982:	f7ff fa73 	bl	800ae6c <__retarget_lock_release_recursive>
 800b986:	e7f3      	b.n	800b970 <_vfiprintf_r+0x44>
 800b988:	2300      	movs	r3, #0
 800b98a:	9309      	str	r3, [sp, #36]	; 0x24
 800b98c:	2320      	movs	r3, #32
 800b98e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b992:	f8cd 800c 	str.w	r8, [sp, #12]
 800b996:	2330      	movs	r3, #48	; 0x30
 800b998:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bb4c <_vfiprintf_r+0x220>
 800b99c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9a0:	f04f 0901 	mov.w	r9, #1
 800b9a4:	4623      	mov	r3, r4
 800b9a6:	469a      	mov	sl, r3
 800b9a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9ac:	b10a      	cbz	r2, 800b9b2 <_vfiprintf_r+0x86>
 800b9ae:	2a25      	cmp	r2, #37	; 0x25
 800b9b0:	d1f9      	bne.n	800b9a6 <_vfiprintf_r+0x7a>
 800b9b2:	ebba 0b04 	subs.w	fp, sl, r4
 800b9b6:	d00b      	beq.n	800b9d0 <_vfiprintf_r+0xa4>
 800b9b8:	465b      	mov	r3, fp
 800b9ba:	4622      	mov	r2, r4
 800b9bc:	4629      	mov	r1, r5
 800b9be:	4630      	mov	r0, r6
 800b9c0:	f7ff ffa1 	bl	800b906 <__sfputs_r>
 800b9c4:	3001      	adds	r0, #1
 800b9c6:	f000 80a9 	beq.w	800bb1c <_vfiprintf_r+0x1f0>
 800b9ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9cc:	445a      	add	r2, fp
 800b9ce:	9209      	str	r2, [sp, #36]	; 0x24
 800b9d0:	f89a 3000 	ldrb.w	r3, [sl]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	f000 80a1 	beq.w	800bb1c <_vfiprintf_r+0x1f0>
 800b9da:	2300      	movs	r3, #0
 800b9dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b9e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9e4:	f10a 0a01 	add.w	sl, sl, #1
 800b9e8:	9304      	str	r3, [sp, #16]
 800b9ea:	9307      	str	r3, [sp, #28]
 800b9ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9f0:	931a      	str	r3, [sp, #104]	; 0x68
 800b9f2:	4654      	mov	r4, sl
 800b9f4:	2205      	movs	r2, #5
 800b9f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9fa:	4854      	ldr	r0, [pc, #336]	; (800bb4c <_vfiprintf_r+0x220>)
 800b9fc:	f7f4 fbe8 	bl	80001d0 <memchr>
 800ba00:	9a04      	ldr	r2, [sp, #16]
 800ba02:	b9d8      	cbnz	r0, 800ba3c <_vfiprintf_r+0x110>
 800ba04:	06d1      	lsls	r1, r2, #27
 800ba06:	bf44      	itt	mi
 800ba08:	2320      	movmi	r3, #32
 800ba0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba0e:	0713      	lsls	r3, r2, #28
 800ba10:	bf44      	itt	mi
 800ba12:	232b      	movmi	r3, #43	; 0x2b
 800ba14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba18:	f89a 3000 	ldrb.w	r3, [sl]
 800ba1c:	2b2a      	cmp	r3, #42	; 0x2a
 800ba1e:	d015      	beq.n	800ba4c <_vfiprintf_r+0x120>
 800ba20:	9a07      	ldr	r2, [sp, #28]
 800ba22:	4654      	mov	r4, sl
 800ba24:	2000      	movs	r0, #0
 800ba26:	f04f 0c0a 	mov.w	ip, #10
 800ba2a:	4621      	mov	r1, r4
 800ba2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba30:	3b30      	subs	r3, #48	; 0x30
 800ba32:	2b09      	cmp	r3, #9
 800ba34:	d94d      	bls.n	800bad2 <_vfiprintf_r+0x1a6>
 800ba36:	b1b0      	cbz	r0, 800ba66 <_vfiprintf_r+0x13a>
 800ba38:	9207      	str	r2, [sp, #28]
 800ba3a:	e014      	b.n	800ba66 <_vfiprintf_r+0x13a>
 800ba3c:	eba0 0308 	sub.w	r3, r0, r8
 800ba40:	fa09 f303 	lsl.w	r3, r9, r3
 800ba44:	4313      	orrs	r3, r2
 800ba46:	9304      	str	r3, [sp, #16]
 800ba48:	46a2      	mov	sl, r4
 800ba4a:	e7d2      	b.n	800b9f2 <_vfiprintf_r+0xc6>
 800ba4c:	9b03      	ldr	r3, [sp, #12]
 800ba4e:	1d19      	adds	r1, r3, #4
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	9103      	str	r1, [sp, #12]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	bfbb      	ittet	lt
 800ba58:	425b      	neglt	r3, r3
 800ba5a:	f042 0202 	orrlt.w	r2, r2, #2
 800ba5e:	9307      	strge	r3, [sp, #28]
 800ba60:	9307      	strlt	r3, [sp, #28]
 800ba62:	bfb8      	it	lt
 800ba64:	9204      	strlt	r2, [sp, #16]
 800ba66:	7823      	ldrb	r3, [r4, #0]
 800ba68:	2b2e      	cmp	r3, #46	; 0x2e
 800ba6a:	d10c      	bne.n	800ba86 <_vfiprintf_r+0x15a>
 800ba6c:	7863      	ldrb	r3, [r4, #1]
 800ba6e:	2b2a      	cmp	r3, #42	; 0x2a
 800ba70:	d134      	bne.n	800badc <_vfiprintf_r+0x1b0>
 800ba72:	9b03      	ldr	r3, [sp, #12]
 800ba74:	1d1a      	adds	r2, r3, #4
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	9203      	str	r2, [sp, #12]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	bfb8      	it	lt
 800ba7e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba82:	3402      	adds	r4, #2
 800ba84:	9305      	str	r3, [sp, #20]
 800ba86:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bb5c <_vfiprintf_r+0x230>
 800ba8a:	7821      	ldrb	r1, [r4, #0]
 800ba8c:	2203      	movs	r2, #3
 800ba8e:	4650      	mov	r0, sl
 800ba90:	f7f4 fb9e 	bl	80001d0 <memchr>
 800ba94:	b138      	cbz	r0, 800baa6 <_vfiprintf_r+0x17a>
 800ba96:	9b04      	ldr	r3, [sp, #16]
 800ba98:	eba0 000a 	sub.w	r0, r0, sl
 800ba9c:	2240      	movs	r2, #64	; 0x40
 800ba9e:	4082      	lsls	r2, r0
 800baa0:	4313      	orrs	r3, r2
 800baa2:	3401      	adds	r4, #1
 800baa4:	9304      	str	r3, [sp, #16]
 800baa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baaa:	4829      	ldr	r0, [pc, #164]	; (800bb50 <_vfiprintf_r+0x224>)
 800baac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bab0:	2206      	movs	r2, #6
 800bab2:	f7f4 fb8d 	bl	80001d0 <memchr>
 800bab6:	2800      	cmp	r0, #0
 800bab8:	d03f      	beq.n	800bb3a <_vfiprintf_r+0x20e>
 800baba:	4b26      	ldr	r3, [pc, #152]	; (800bb54 <_vfiprintf_r+0x228>)
 800babc:	bb1b      	cbnz	r3, 800bb06 <_vfiprintf_r+0x1da>
 800babe:	9b03      	ldr	r3, [sp, #12]
 800bac0:	3307      	adds	r3, #7
 800bac2:	f023 0307 	bic.w	r3, r3, #7
 800bac6:	3308      	adds	r3, #8
 800bac8:	9303      	str	r3, [sp, #12]
 800baca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bacc:	443b      	add	r3, r7
 800bace:	9309      	str	r3, [sp, #36]	; 0x24
 800bad0:	e768      	b.n	800b9a4 <_vfiprintf_r+0x78>
 800bad2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bad6:	460c      	mov	r4, r1
 800bad8:	2001      	movs	r0, #1
 800bada:	e7a6      	b.n	800ba2a <_vfiprintf_r+0xfe>
 800badc:	2300      	movs	r3, #0
 800bade:	3401      	adds	r4, #1
 800bae0:	9305      	str	r3, [sp, #20]
 800bae2:	4619      	mov	r1, r3
 800bae4:	f04f 0c0a 	mov.w	ip, #10
 800bae8:	4620      	mov	r0, r4
 800baea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baee:	3a30      	subs	r2, #48	; 0x30
 800baf0:	2a09      	cmp	r2, #9
 800baf2:	d903      	bls.n	800bafc <_vfiprintf_r+0x1d0>
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d0c6      	beq.n	800ba86 <_vfiprintf_r+0x15a>
 800baf8:	9105      	str	r1, [sp, #20]
 800bafa:	e7c4      	b.n	800ba86 <_vfiprintf_r+0x15a>
 800bafc:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb00:	4604      	mov	r4, r0
 800bb02:	2301      	movs	r3, #1
 800bb04:	e7f0      	b.n	800bae8 <_vfiprintf_r+0x1bc>
 800bb06:	ab03      	add	r3, sp, #12
 800bb08:	9300      	str	r3, [sp, #0]
 800bb0a:	462a      	mov	r2, r5
 800bb0c:	4b12      	ldr	r3, [pc, #72]	; (800bb58 <_vfiprintf_r+0x22c>)
 800bb0e:	a904      	add	r1, sp, #16
 800bb10:	4630      	mov	r0, r6
 800bb12:	f3af 8000 	nop.w
 800bb16:	4607      	mov	r7, r0
 800bb18:	1c78      	adds	r0, r7, #1
 800bb1a:	d1d6      	bne.n	800baca <_vfiprintf_r+0x19e>
 800bb1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb1e:	07d9      	lsls	r1, r3, #31
 800bb20:	d405      	bmi.n	800bb2e <_vfiprintf_r+0x202>
 800bb22:	89ab      	ldrh	r3, [r5, #12]
 800bb24:	059a      	lsls	r2, r3, #22
 800bb26:	d402      	bmi.n	800bb2e <_vfiprintf_r+0x202>
 800bb28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb2a:	f7ff f99f 	bl	800ae6c <__retarget_lock_release_recursive>
 800bb2e:	89ab      	ldrh	r3, [r5, #12]
 800bb30:	065b      	lsls	r3, r3, #25
 800bb32:	f53f af1d 	bmi.w	800b970 <_vfiprintf_r+0x44>
 800bb36:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb38:	e71c      	b.n	800b974 <_vfiprintf_r+0x48>
 800bb3a:	ab03      	add	r3, sp, #12
 800bb3c:	9300      	str	r3, [sp, #0]
 800bb3e:	462a      	mov	r2, r5
 800bb40:	4b05      	ldr	r3, [pc, #20]	; (800bb58 <_vfiprintf_r+0x22c>)
 800bb42:	a904      	add	r1, sp, #16
 800bb44:	4630      	mov	r0, r6
 800bb46:	f7ff fc85 	bl	800b454 <_printf_i>
 800bb4a:	e7e4      	b.n	800bb16 <_vfiprintf_r+0x1ea>
 800bb4c:	0800c11a 	.word	0x0800c11a
 800bb50:	0800c124 	.word	0x0800c124
 800bb54:	00000000 	.word	0x00000000
 800bb58:	0800b907 	.word	0x0800b907
 800bb5c:	0800c120 	.word	0x0800c120

0800bb60 <__swbuf_r>:
 800bb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb62:	460e      	mov	r6, r1
 800bb64:	4614      	mov	r4, r2
 800bb66:	4605      	mov	r5, r0
 800bb68:	b118      	cbz	r0, 800bb72 <__swbuf_r+0x12>
 800bb6a:	6a03      	ldr	r3, [r0, #32]
 800bb6c:	b90b      	cbnz	r3, 800bb72 <__swbuf_r+0x12>
 800bb6e:	f7fe fff9 	bl	800ab64 <__sinit>
 800bb72:	69a3      	ldr	r3, [r4, #24]
 800bb74:	60a3      	str	r3, [r4, #8]
 800bb76:	89a3      	ldrh	r3, [r4, #12]
 800bb78:	071a      	lsls	r2, r3, #28
 800bb7a:	d525      	bpl.n	800bbc8 <__swbuf_r+0x68>
 800bb7c:	6923      	ldr	r3, [r4, #16]
 800bb7e:	b31b      	cbz	r3, 800bbc8 <__swbuf_r+0x68>
 800bb80:	6823      	ldr	r3, [r4, #0]
 800bb82:	6922      	ldr	r2, [r4, #16]
 800bb84:	1a98      	subs	r0, r3, r2
 800bb86:	6963      	ldr	r3, [r4, #20]
 800bb88:	b2f6      	uxtb	r6, r6
 800bb8a:	4283      	cmp	r3, r0
 800bb8c:	4637      	mov	r7, r6
 800bb8e:	dc04      	bgt.n	800bb9a <__swbuf_r+0x3a>
 800bb90:	4621      	mov	r1, r4
 800bb92:	4628      	mov	r0, r5
 800bb94:	f7ff fe06 	bl	800b7a4 <_fflush_r>
 800bb98:	b9e0      	cbnz	r0, 800bbd4 <__swbuf_r+0x74>
 800bb9a:	68a3      	ldr	r3, [r4, #8]
 800bb9c:	3b01      	subs	r3, #1
 800bb9e:	60a3      	str	r3, [r4, #8]
 800bba0:	6823      	ldr	r3, [r4, #0]
 800bba2:	1c5a      	adds	r2, r3, #1
 800bba4:	6022      	str	r2, [r4, #0]
 800bba6:	701e      	strb	r6, [r3, #0]
 800bba8:	6962      	ldr	r2, [r4, #20]
 800bbaa:	1c43      	adds	r3, r0, #1
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d004      	beq.n	800bbba <__swbuf_r+0x5a>
 800bbb0:	89a3      	ldrh	r3, [r4, #12]
 800bbb2:	07db      	lsls	r3, r3, #31
 800bbb4:	d506      	bpl.n	800bbc4 <__swbuf_r+0x64>
 800bbb6:	2e0a      	cmp	r6, #10
 800bbb8:	d104      	bne.n	800bbc4 <__swbuf_r+0x64>
 800bbba:	4621      	mov	r1, r4
 800bbbc:	4628      	mov	r0, r5
 800bbbe:	f7ff fdf1 	bl	800b7a4 <_fflush_r>
 800bbc2:	b938      	cbnz	r0, 800bbd4 <__swbuf_r+0x74>
 800bbc4:	4638      	mov	r0, r7
 800bbc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbc8:	4621      	mov	r1, r4
 800bbca:	4628      	mov	r0, r5
 800bbcc:	f000 f806 	bl	800bbdc <__swsetup_r>
 800bbd0:	2800      	cmp	r0, #0
 800bbd2:	d0d5      	beq.n	800bb80 <__swbuf_r+0x20>
 800bbd4:	f04f 37ff 	mov.w	r7, #4294967295
 800bbd8:	e7f4      	b.n	800bbc4 <__swbuf_r+0x64>
	...

0800bbdc <__swsetup_r>:
 800bbdc:	b538      	push	{r3, r4, r5, lr}
 800bbde:	4b2a      	ldr	r3, [pc, #168]	; (800bc88 <__swsetup_r+0xac>)
 800bbe0:	4605      	mov	r5, r0
 800bbe2:	6818      	ldr	r0, [r3, #0]
 800bbe4:	460c      	mov	r4, r1
 800bbe6:	b118      	cbz	r0, 800bbf0 <__swsetup_r+0x14>
 800bbe8:	6a03      	ldr	r3, [r0, #32]
 800bbea:	b90b      	cbnz	r3, 800bbf0 <__swsetup_r+0x14>
 800bbec:	f7fe ffba 	bl	800ab64 <__sinit>
 800bbf0:	89a3      	ldrh	r3, [r4, #12]
 800bbf2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbf6:	0718      	lsls	r0, r3, #28
 800bbf8:	d422      	bmi.n	800bc40 <__swsetup_r+0x64>
 800bbfa:	06d9      	lsls	r1, r3, #27
 800bbfc:	d407      	bmi.n	800bc0e <__swsetup_r+0x32>
 800bbfe:	2309      	movs	r3, #9
 800bc00:	602b      	str	r3, [r5, #0]
 800bc02:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc06:	81a3      	strh	r3, [r4, #12]
 800bc08:	f04f 30ff 	mov.w	r0, #4294967295
 800bc0c:	e034      	b.n	800bc78 <__swsetup_r+0x9c>
 800bc0e:	0758      	lsls	r0, r3, #29
 800bc10:	d512      	bpl.n	800bc38 <__swsetup_r+0x5c>
 800bc12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc14:	b141      	cbz	r1, 800bc28 <__swsetup_r+0x4c>
 800bc16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc1a:	4299      	cmp	r1, r3
 800bc1c:	d002      	beq.n	800bc24 <__swsetup_r+0x48>
 800bc1e:	4628      	mov	r0, r5
 800bc20:	f7ff f952 	bl	800aec8 <_free_r>
 800bc24:	2300      	movs	r3, #0
 800bc26:	6363      	str	r3, [r4, #52]	; 0x34
 800bc28:	89a3      	ldrh	r3, [r4, #12]
 800bc2a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc2e:	81a3      	strh	r3, [r4, #12]
 800bc30:	2300      	movs	r3, #0
 800bc32:	6063      	str	r3, [r4, #4]
 800bc34:	6923      	ldr	r3, [r4, #16]
 800bc36:	6023      	str	r3, [r4, #0]
 800bc38:	89a3      	ldrh	r3, [r4, #12]
 800bc3a:	f043 0308 	orr.w	r3, r3, #8
 800bc3e:	81a3      	strh	r3, [r4, #12]
 800bc40:	6923      	ldr	r3, [r4, #16]
 800bc42:	b94b      	cbnz	r3, 800bc58 <__swsetup_r+0x7c>
 800bc44:	89a3      	ldrh	r3, [r4, #12]
 800bc46:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc4e:	d003      	beq.n	800bc58 <__swsetup_r+0x7c>
 800bc50:	4621      	mov	r1, r4
 800bc52:	4628      	mov	r0, r5
 800bc54:	f000 f88c 	bl	800bd70 <__smakebuf_r>
 800bc58:	89a0      	ldrh	r0, [r4, #12]
 800bc5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc5e:	f010 0301 	ands.w	r3, r0, #1
 800bc62:	d00a      	beq.n	800bc7a <__swsetup_r+0x9e>
 800bc64:	2300      	movs	r3, #0
 800bc66:	60a3      	str	r3, [r4, #8]
 800bc68:	6963      	ldr	r3, [r4, #20]
 800bc6a:	425b      	negs	r3, r3
 800bc6c:	61a3      	str	r3, [r4, #24]
 800bc6e:	6923      	ldr	r3, [r4, #16]
 800bc70:	b943      	cbnz	r3, 800bc84 <__swsetup_r+0xa8>
 800bc72:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc76:	d1c4      	bne.n	800bc02 <__swsetup_r+0x26>
 800bc78:	bd38      	pop	{r3, r4, r5, pc}
 800bc7a:	0781      	lsls	r1, r0, #30
 800bc7c:	bf58      	it	pl
 800bc7e:	6963      	ldrpl	r3, [r4, #20]
 800bc80:	60a3      	str	r3, [r4, #8]
 800bc82:	e7f4      	b.n	800bc6e <__swsetup_r+0x92>
 800bc84:	2000      	movs	r0, #0
 800bc86:	e7f7      	b.n	800bc78 <__swsetup_r+0x9c>
 800bc88:	20000074 	.word	0x20000074

0800bc8c <_raise_r>:
 800bc8c:	291f      	cmp	r1, #31
 800bc8e:	b538      	push	{r3, r4, r5, lr}
 800bc90:	4604      	mov	r4, r0
 800bc92:	460d      	mov	r5, r1
 800bc94:	d904      	bls.n	800bca0 <_raise_r+0x14>
 800bc96:	2316      	movs	r3, #22
 800bc98:	6003      	str	r3, [r0, #0]
 800bc9a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc9e:	bd38      	pop	{r3, r4, r5, pc}
 800bca0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bca2:	b112      	cbz	r2, 800bcaa <_raise_r+0x1e>
 800bca4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bca8:	b94b      	cbnz	r3, 800bcbe <_raise_r+0x32>
 800bcaa:	4620      	mov	r0, r4
 800bcac:	f000 f830 	bl	800bd10 <_getpid_r>
 800bcb0:	462a      	mov	r2, r5
 800bcb2:	4601      	mov	r1, r0
 800bcb4:	4620      	mov	r0, r4
 800bcb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcba:	f000 b817 	b.w	800bcec <_kill_r>
 800bcbe:	2b01      	cmp	r3, #1
 800bcc0:	d00a      	beq.n	800bcd8 <_raise_r+0x4c>
 800bcc2:	1c59      	adds	r1, r3, #1
 800bcc4:	d103      	bne.n	800bcce <_raise_r+0x42>
 800bcc6:	2316      	movs	r3, #22
 800bcc8:	6003      	str	r3, [r0, #0]
 800bcca:	2001      	movs	r0, #1
 800bccc:	e7e7      	b.n	800bc9e <_raise_r+0x12>
 800bcce:	2400      	movs	r4, #0
 800bcd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bcd4:	4628      	mov	r0, r5
 800bcd6:	4798      	blx	r3
 800bcd8:	2000      	movs	r0, #0
 800bcda:	e7e0      	b.n	800bc9e <_raise_r+0x12>

0800bcdc <raise>:
 800bcdc:	4b02      	ldr	r3, [pc, #8]	; (800bce8 <raise+0xc>)
 800bcde:	4601      	mov	r1, r0
 800bce0:	6818      	ldr	r0, [r3, #0]
 800bce2:	f7ff bfd3 	b.w	800bc8c <_raise_r>
 800bce6:	bf00      	nop
 800bce8:	20000074 	.word	0x20000074

0800bcec <_kill_r>:
 800bcec:	b538      	push	{r3, r4, r5, lr}
 800bcee:	4d07      	ldr	r5, [pc, #28]	; (800bd0c <_kill_r+0x20>)
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	4604      	mov	r4, r0
 800bcf4:	4608      	mov	r0, r1
 800bcf6:	4611      	mov	r1, r2
 800bcf8:	602b      	str	r3, [r5, #0]
 800bcfa:	f7f6 f91d 	bl	8001f38 <_kill>
 800bcfe:	1c43      	adds	r3, r0, #1
 800bd00:	d102      	bne.n	800bd08 <_kill_r+0x1c>
 800bd02:	682b      	ldr	r3, [r5, #0]
 800bd04:	b103      	cbz	r3, 800bd08 <_kill_r+0x1c>
 800bd06:	6023      	str	r3, [r4, #0]
 800bd08:	bd38      	pop	{r3, r4, r5, pc}
 800bd0a:	bf00      	nop
 800bd0c:	20002140 	.word	0x20002140

0800bd10 <_getpid_r>:
 800bd10:	f7f6 b90a 	b.w	8001f28 <_getpid>

0800bd14 <_malloc_usable_size_r>:
 800bd14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd18:	1f18      	subs	r0, r3, #4
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	bfbc      	itt	lt
 800bd1e:	580b      	ldrlt	r3, [r1, r0]
 800bd20:	18c0      	addlt	r0, r0, r3
 800bd22:	4770      	bx	lr

0800bd24 <__swhatbuf_r>:
 800bd24:	b570      	push	{r4, r5, r6, lr}
 800bd26:	460c      	mov	r4, r1
 800bd28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd2c:	2900      	cmp	r1, #0
 800bd2e:	b096      	sub	sp, #88	; 0x58
 800bd30:	4615      	mov	r5, r2
 800bd32:	461e      	mov	r6, r3
 800bd34:	da0d      	bge.n	800bd52 <__swhatbuf_r+0x2e>
 800bd36:	89a3      	ldrh	r3, [r4, #12]
 800bd38:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bd3c:	f04f 0100 	mov.w	r1, #0
 800bd40:	bf0c      	ite	eq
 800bd42:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bd46:	2340      	movne	r3, #64	; 0x40
 800bd48:	2000      	movs	r0, #0
 800bd4a:	6031      	str	r1, [r6, #0]
 800bd4c:	602b      	str	r3, [r5, #0]
 800bd4e:	b016      	add	sp, #88	; 0x58
 800bd50:	bd70      	pop	{r4, r5, r6, pc}
 800bd52:	466a      	mov	r2, sp
 800bd54:	f000 f848 	bl	800bde8 <_fstat_r>
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	dbec      	blt.n	800bd36 <__swhatbuf_r+0x12>
 800bd5c:	9901      	ldr	r1, [sp, #4]
 800bd5e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bd62:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bd66:	4259      	negs	r1, r3
 800bd68:	4159      	adcs	r1, r3
 800bd6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd6e:	e7eb      	b.n	800bd48 <__swhatbuf_r+0x24>

0800bd70 <__smakebuf_r>:
 800bd70:	898b      	ldrh	r3, [r1, #12]
 800bd72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd74:	079d      	lsls	r5, r3, #30
 800bd76:	4606      	mov	r6, r0
 800bd78:	460c      	mov	r4, r1
 800bd7a:	d507      	bpl.n	800bd8c <__smakebuf_r+0x1c>
 800bd7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd80:	6023      	str	r3, [r4, #0]
 800bd82:	6123      	str	r3, [r4, #16]
 800bd84:	2301      	movs	r3, #1
 800bd86:	6163      	str	r3, [r4, #20]
 800bd88:	b002      	add	sp, #8
 800bd8a:	bd70      	pop	{r4, r5, r6, pc}
 800bd8c:	ab01      	add	r3, sp, #4
 800bd8e:	466a      	mov	r2, sp
 800bd90:	f7ff ffc8 	bl	800bd24 <__swhatbuf_r>
 800bd94:	9900      	ldr	r1, [sp, #0]
 800bd96:	4605      	mov	r5, r0
 800bd98:	4630      	mov	r0, r6
 800bd9a:	f7ff f909 	bl	800afb0 <_malloc_r>
 800bd9e:	b948      	cbnz	r0, 800bdb4 <__smakebuf_r+0x44>
 800bda0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bda4:	059a      	lsls	r2, r3, #22
 800bda6:	d4ef      	bmi.n	800bd88 <__smakebuf_r+0x18>
 800bda8:	f023 0303 	bic.w	r3, r3, #3
 800bdac:	f043 0302 	orr.w	r3, r3, #2
 800bdb0:	81a3      	strh	r3, [r4, #12]
 800bdb2:	e7e3      	b.n	800bd7c <__smakebuf_r+0xc>
 800bdb4:	89a3      	ldrh	r3, [r4, #12]
 800bdb6:	6020      	str	r0, [r4, #0]
 800bdb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdbc:	81a3      	strh	r3, [r4, #12]
 800bdbe:	9b00      	ldr	r3, [sp, #0]
 800bdc0:	6163      	str	r3, [r4, #20]
 800bdc2:	9b01      	ldr	r3, [sp, #4]
 800bdc4:	6120      	str	r0, [r4, #16]
 800bdc6:	b15b      	cbz	r3, 800bde0 <__smakebuf_r+0x70>
 800bdc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdcc:	4630      	mov	r0, r6
 800bdce:	f000 f81d 	bl	800be0c <_isatty_r>
 800bdd2:	b128      	cbz	r0, 800bde0 <__smakebuf_r+0x70>
 800bdd4:	89a3      	ldrh	r3, [r4, #12]
 800bdd6:	f023 0303 	bic.w	r3, r3, #3
 800bdda:	f043 0301 	orr.w	r3, r3, #1
 800bdde:	81a3      	strh	r3, [r4, #12]
 800bde0:	89a3      	ldrh	r3, [r4, #12]
 800bde2:	431d      	orrs	r5, r3
 800bde4:	81a5      	strh	r5, [r4, #12]
 800bde6:	e7cf      	b.n	800bd88 <__smakebuf_r+0x18>

0800bde8 <_fstat_r>:
 800bde8:	b538      	push	{r3, r4, r5, lr}
 800bdea:	4d07      	ldr	r5, [pc, #28]	; (800be08 <_fstat_r+0x20>)
 800bdec:	2300      	movs	r3, #0
 800bdee:	4604      	mov	r4, r0
 800bdf0:	4608      	mov	r0, r1
 800bdf2:	4611      	mov	r1, r2
 800bdf4:	602b      	str	r3, [r5, #0]
 800bdf6:	f7f6 f8fe 	bl	8001ff6 <_fstat>
 800bdfa:	1c43      	adds	r3, r0, #1
 800bdfc:	d102      	bne.n	800be04 <_fstat_r+0x1c>
 800bdfe:	682b      	ldr	r3, [r5, #0]
 800be00:	b103      	cbz	r3, 800be04 <_fstat_r+0x1c>
 800be02:	6023      	str	r3, [r4, #0]
 800be04:	bd38      	pop	{r3, r4, r5, pc}
 800be06:	bf00      	nop
 800be08:	20002140 	.word	0x20002140

0800be0c <_isatty_r>:
 800be0c:	b538      	push	{r3, r4, r5, lr}
 800be0e:	4d06      	ldr	r5, [pc, #24]	; (800be28 <_isatty_r+0x1c>)
 800be10:	2300      	movs	r3, #0
 800be12:	4604      	mov	r4, r0
 800be14:	4608      	mov	r0, r1
 800be16:	602b      	str	r3, [r5, #0]
 800be18:	f7f6 f8fd 	bl	8002016 <_isatty>
 800be1c:	1c43      	adds	r3, r0, #1
 800be1e:	d102      	bne.n	800be26 <_isatty_r+0x1a>
 800be20:	682b      	ldr	r3, [r5, #0]
 800be22:	b103      	cbz	r3, 800be26 <_isatty_r+0x1a>
 800be24:	6023      	str	r3, [r4, #0]
 800be26:	bd38      	pop	{r3, r4, r5, pc}
 800be28:	20002140 	.word	0x20002140

0800be2c <_init>:
 800be2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be2e:	bf00      	nop
 800be30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be32:	bc08      	pop	{r3}
 800be34:	469e      	mov	lr, r3
 800be36:	4770      	bx	lr

0800be38 <_fini>:
 800be38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be3a:	bf00      	nop
 800be3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be3e:	bc08      	pop	{r3}
 800be40:	469e      	mov	lr, r3
 800be42:	4770      	bx	lr
